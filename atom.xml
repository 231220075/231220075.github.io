<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Summer Flower</title>
  
  <subtitle>Let life be beautiful like summer flowers , and death like autumn leaves</subtitle>
  <link href="http://summer-flower.com/atom.xml" rel="self"/>
  
  <link href="http://summer-flower.com/"/>
  <updated>2025-08-15T02:54:48.637Z</updated>
  <id>http://summer-flower.com/</id>
  
  <author>
    <name>forever</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>域名解析与网站绑定完全指南</title>
    <link href="http://summer-flower.com/2025/08/15/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%B8%8E%E7%BD%91%E7%AB%99%E7%BB%91%E5%AE%9A%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://summer-flower.com/2025/08/15/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%B8%8E%E7%BD%91%E7%AB%99%E7%BB%91%E5%AE%9A%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</id>
    <published>2025-08-15T03:00:00.000Z</published>
    <updated>2025-08-15T02:54:48.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="域名解析与网站绑定完全指南"><a href="#域名解析与网站绑定完全指南" class="headerlink" title="域名解析与网站绑定完全指南"></a>域名解析与网站绑定完全指南</h1><h2 id="🌐-前言"><a href="#🌐-前言" class="headerlink" title="🌐 前言"></a>🌐 前言</h2><p>当我们在浏览器输入 <code>summer-flower.com</code> 时，为什么能访问到我们的网站？这背后涉及了复杂的域名解析系统。本文将从零开始，详细解释域名解析的工作原理，以及如何将自定义域名绑定到 GitHub Pages。</p><h2 id="📚-基础概念"><a href="#📚-基础概念" class="headerlink" title="📚 基础概念"></a>📚 基础概念</h2><h3 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a>什么是域名？</h3><p><strong>域名</strong>（Domain Name）是互联网上网站的人类可读地址，例如：</p><ul><li><code>google.com</code></li><li><code>github.com</code> </li><li><code>summer-flower.com</code></li></ul><p>它的作用是将复杂的IP地址（如 <code>185.199.108.153</code>）转换为容易记忆的名称。</p><h3 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h3><p><strong>DNS</strong>（Domain Name System，域名系统）是互联网的”电话簿”，负责将域名翻译成IP地址。</p><h4 id="DNS解析过程："><a href="#DNS解析过程：" class="headerlink" title="DNS解析过程："></a>DNS解析过程：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户输入: summer-flower.com</span><br><span class="line">    ↓</span><br><span class="line">DNS查询: summer-flower.com 对应哪个IP？</span><br><span class="line">    ↓  </span><br><span class="line">DNS返回: 185.199.108.153</span><br><span class="line">    ↓</span><br><span class="line">浏览器访问: 185.199.108.153</span><br><span class="line">    ↓</span><br><span class="line">服务器返回: 网站内容</span><br></pre></td></tr></table></figure><h2 id="🔧-DNS记录类型详解"><a href="#🔧-DNS记录类型详解" class="headerlink" title="🔧 DNS记录类型详解"></a>🔧 DNS记录类型详解</h2><h3 id="1-A记录（Address-Record）"><a href="#1-A记录（Address-Record）" class="headerlink" title="1. A记录（Address Record）"></a>1. A记录（Address Record）</h3><p><strong>作用</strong>: 将域名直接指向IPv4地址</p><p><strong>格式</strong>: <code>域名 → IP地址</code></p><p><strong>示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summer-flower.com → 185.199.108.153</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>: </p><ul><li>将域名指向网站服务器</li><li>最常用的记录类型</li><li>一个域名可以有多个A记录（负载均衡）</li></ul><h3 id="2-CNAME记录（Canonical-Name-Record）"><a href="#2-CNAME记录（Canonical-Name-Record）" class="headerlink" title="2. CNAME记录（Canonical Name Record）"></a>2. CNAME记录（Canonical Name Record）</h3><p><strong>作用</strong>: 将域名指向另一个域名</p><p><strong>格式</strong>: <code>域名 → 另一个域名</code></p><p><strong>示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.summer-flower.com → summer-flower.com</span><br><span class="line">blog.summer-flower.com → summer-flower.com</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>:</p><ul><li>子域名重定向</li><li>CDN配置</li><li>服务别名</li></ul><p><strong>重要限制</strong>: </p><ul><li>根域名（如 <code>summer-flower.com</code>）不能使用CNAME</li><li>一个域名不能同时有CNAME和其他记录</li></ul><h3 id="3-NS记录（Name-Server-Record）"><a href="#3-NS记录（Name-Server-Record）" class="headerlink" title="3. NS记录（Name Server Record）"></a>3. NS记录（Name Server Record）</h3><p><strong>作用</strong>: 指定域名的DNS服务器</p><p><strong>格式</strong>: <code>域名 → DNS服务器地址</code></p><p><strong>示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">summer-flower.com → ns1.huaweicloud-dns.org</span><br><span class="line">summer-flower.com → ns2.huaweicloud-dns.org</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>:</p><ul><li>域名注册商设置</li><li>DNS服务器迁移</li></ul><h3 id="4-SOA记录（Start-of-Authority-Record）"><a href="#4-SOA记录（Start-of-Authority-Record）" class="headerlink" title="4. SOA记录（Start of Authority Record）"></a>4. SOA记录（Start of Authority Record）</h3><p><strong>作用</strong>: 定义域名的权威信息</p><p><strong>包含信息</strong>:</p><ul><li>主DNS服务器</li><li>域名管理员邮箱</li><li>序列号</li><li>刷新时间</li><li>重试时间</li></ul><p><strong>使用场景</strong>:</p><ul><li>系统自动创建</li><li>DNS同步控制</li></ul><h3 id="5-MX记录（Mail-Exchange-Record）"><a href="#5-MX记录（Mail-Exchange-Record）" class="headerlink" title="5. MX记录（Mail Exchange Record）"></a>5. MX记录（Mail Exchange Record）</h3><p><strong>作用</strong>: 指定邮件服务器</p><p><strong>示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summer-flower.com → mail.summer-flower.com</span><br></pre></td></tr></table></figure><h3 id="6-TXT记录（Text-Record）"><a href="#6-TXT记录（Text-Record）" class="headerlink" title="6. TXT记录（Text Record）"></a>6. TXT记录（Text Record）</h3><p><strong>作用</strong>: 存储文本信息</p><p><strong>使用场景</strong>:</p><ul><li>域名验证</li><li>SPF邮件验证</li><li>网站验证</li></ul><h2 id="🌍-DNS解析的完整流程"><a href="#🌍-DNS解析的完整流程" class="headerlink" title="🌍 DNS解析的完整流程"></a>🌍 DNS解析的完整流程</h2><h3 id="1-浏览器发起请求"><a href="#1-浏览器发起请求" class="headerlink" title="1. 浏览器发起请求"></a>1. 浏览器发起请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户输入: https://summer-flower.com</span><br></pre></td></tr></table></figure><h3 id="2-本地DNS缓存检查"><a href="#2-本地DNS缓存检查" class="headerlink" title="2. 本地DNS缓存检查"></a>2. 本地DNS缓存检查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查顺序:</span><br><span class="line">1. 浏览器缓存</span><br><span class="line">2. 操作系统缓存</span><br><span class="line">3. 路由器缓存</span><br></pre></td></tr></table></figure><h3 id="3-递归DNS查询"><a href="#3-递归DNS查询" class="headerlink" title="3. 递归DNS查询"></a>3. 递归DNS查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本地DNS服务器 → 根DNS服务器</span><br><span class="line">根DNS服务器 → .com顶级域DNS服务器  </span><br><span class="line">.com DNS服务器 → summer-flower.com权威DNS服务器</span><br><span class="line">权威DNS服务器 → 返回IP地址</span><br></pre></td></tr></table></figure><h3 id="4-返回结果并缓存"><a href="#4-返回结果并缓存" class="headerlink" title="4. 返回结果并缓存"></a>4. 返回结果并缓存</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP地址 → 本地DNS服务器 → 用户设备</span><br><span class="line">同时: 各级缓存存储结果</span><br></pre></td></tr></table></figure><h2 id="🚀-GitHub-Pages-域名绑定详解"><a href="#🚀-GitHub-Pages-域名绑定详解" class="headerlink" title="🚀 GitHub Pages 域名绑定详解"></a>🚀 GitHub Pages 域名绑定详解</h2><h3 id="GitHub-Pages-的工作原理"><a href="#GitHub-Pages-的工作原理" class="headerlink" title="GitHub Pages 的工作原理"></a>GitHub Pages 的工作原理</h3><p><strong>默认访问方式</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://用户名.github.io/仓库名</span><br><span class="line">例如: https://231220075.github.io</span><br></pre></td></tr></table></figure><p><strong>自定义域名访问</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://your-domain.com</span><br><span class="line">例如: https://summer-flower.com</span><br></pre></td></tr></table></figure><h3 id="绑定步骤详解"><a href="#绑定步骤详解" class="headerlink" title="绑定步骤详解"></a>绑定步骤详解</h3><h4 id="步骤1-创建CNAME文件"><a href="#步骤1-创建CNAME文件" class="headerlink" title="步骤1: 创建CNAME文件"></a>步骤1: 创建CNAME文件</h4><p><strong>位置</strong>: <code>/source/CNAME</code>（对于Hexo）</p><p><strong>内容</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summer-flower.com</span><br></pre></td></tr></table></figure><p><strong>作用</strong>:</p><ul><li>告诉GitHub Pages你的自定义域名</li><li>触发GitHub生成SSL证书</li><li>启用域名重定向</li></ul><h4 id="步骤2-配置DNS记录"><a href="#步骤2-配置DNS记录" class="headerlink" title="步骤2: 配置DNS记录"></a>步骤2: 配置DNS记录</h4><p><strong>GitHub Pages IP地址</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153  </span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p><strong>DNS配置</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型: A</span><br><span class="line">主机记录: @ 或 *</span><br><span class="line">记录值: 185.199.108.153</span><br><span class="line">TTL: 300</span><br></pre></td></tr></table></figure><p><strong>重复添加其他3个IP地址</strong></p><h4 id="步骤3-等待生效"><a href="#步骤3-等待生效" class="headerlink" title="步骤3: 等待生效"></a>步骤3: 等待生效</h4><p><strong>时间线</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DNS配置 → 5-30分钟 → DNS传播完成</span><br><span class="line">DNS传播完成 → 10-15分钟 → GitHub检测到</span><br><span class="line">GitHub检测到 → 5-10分钟 → SSL证书生成</span><br><span class="line">SSL证书生成 → 网站完全可用</span><br></pre></td></tr></table></figure><h3 id="GitHub-Pages-的验证机制"><a href="#GitHub-Pages-的验证机制" class="headerlink" title="GitHub Pages 的验证机制"></a>GitHub Pages 的验证机制</h3><h4 id="DNS检查过程"><a href="#DNS检查过程" class="headerlink" title="DNS检查过程"></a>DNS检查过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. GitHub定期查询你的域名</span><br><span class="line">2. 检查是否指向GitHub Pages IP</span><br><span class="line">3. 验证CNAME文件内容</span><br><span class="line">4. 生成SSL证书</span><br><span class="line">5. 启用HTTPS访问</span><br></pre></td></tr></table></figure><h4 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">🔴 DNS check unsuccessful</span><br><span class="line">   ↓ (DNS生效)</span><br><span class="line">🟡 DNS check in progress</span><br><span class="line">   ↓ (验证完成)</span><br><span class="line">🟢 DNS configuration successful  </span><br><span class="line">   ↓ (SSL生成)</span><br><span class="line">✅ Enforce HTTPS 可用</span><br></pre></td></tr></table></figure><h2 id="⚠️-常见问题与解决方案"><a href="#⚠️-常见问题与解决方案" class="headerlink" title="⚠️ 常见问题与解决方案"></a>⚠️ 常见问题与解决方案</h2><h3 id="问题1-DNS检查失败"><a href="#问题1-DNS检查失败" class="headerlink" title="问题1: DNS检查失败"></a>问题1: DNS检查失败</h3><p><strong>症状</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS check unsuccessful</span><br><span class="line">Domain does not resolve to the GitHub Pages server</span><br></pre></td></tr></table></figure><p><strong>原因</strong>:</p><ul><li>DNS记录配置错误</li><li>DNS还未传播完成</li><li>存在冲突记录</li></ul><p><strong>解决方案</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查DNS是否生效</span></span><br><span class="line">dig your-domain.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 期望结果: 4个A记录指向GitHub Pages</span></span><br></pre></td></tr></table></figure><h3 id="问题2-CNAME和A记录冲突"><a href="#问题2-CNAME和A记录冲突" class="headerlink" title="问题2: CNAME和A记录冲突"></a>问题2: CNAME和A记录冲突</h3><p><strong>错误配置</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">summer-flower.com → CNAME → other-domain.com (错误)</span><br><span class="line">summer-flower.com → A → 185.199.108.153 (正确)</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong>: 删除CNAME记录，只保留A记录</p><h3 id="问题3-www子域名配置"><a href="#问题3-www子域名配置" class="headerlink" title="问题3: www子域名配置"></a>问题3: www子域名配置</h3><p><strong>方案A: 使用泛域名解析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.summer-flower.com → A → GitHub Pages IP</span><br></pre></td></tr></table></figure><p><strong>方案B: 单独配置CNAME</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.summer-flower.com → CNAME → summer-flower.com</span><br></pre></td></tr></table></figure><h3 id="问题4-SSL证书问题"><a href="#问题4-SSL证书问题" class="headerlink" title="问题4: SSL证书问题"></a>问题4: SSL证书问题</h3><p><strong>常见原因</strong>:</p><ul><li>DNS配置不正确</li><li>GitHub还在验证过程中</li><li>域名验证失败</li></ul><p><strong>解决方案</strong>:</p><ul><li>等待DNS完全传播</li><li>确保CNAME文件正确</li><li>检查GitHub Pages设置</li></ul><h2 id="🛠️-实际操作示例"><a href="#🛠️-实际操作示例" class="headerlink" title="🛠️ 实际操作示例"></a>🛠️ 实际操作示例</h2><h3 id="华为云DNS配置"><a href="#华为云DNS配置" class="headerlink" title="华为云DNS配置"></a>华为云DNS配置</h3><p><strong>登录控制台</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">华为云控制台 → 域名与网站 → 云解析服务</span><br></pre></td></tr></table></figure><p><strong>添加记录</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">记录类型: A</span><br><span class="line">主机记录: * (泛域名) 或 @ (根域名)</span><br><span class="line">线路类型: 全网默认</span><br><span class="line">TTL: 300</span><br><span class="line">记录值: 185.199.108.153</span><br></pre></td></tr></table></figure><p><strong>重复添加其他GitHub Pages IP</strong></p><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p><strong>命令行验证</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查DNS解析</span></span><br><span class="line">dig summer-flower.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网站访问</span></span><br><span class="line">curl -I https://summer-flower.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查SSL证书</span></span><br><span class="line">curl -I https://summer-flower.com | grep -i server</span><br></pre></td></tr></table></figure><p><strong>在线工具验证</strong>:</p><ul><li>DNS传播检查: <code>https://www.whatsmydns.net/</code></li><li>SSL证书检查: <code>https://www.ssllabs.com/ssltest/</code></li></ul><h2 id="📊-性能优化建议"><a href="#📊-性能优化建议" class="headerlink" title="📊 性能优化建议"></a>📊 性能优化建议</h2><h3 id="TTL设置优化"><a href="#TTL设置优化" class="headerlink" title="TTL设置优化"></a>TTL设置优化</h3><p><strong>开发阶段</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL: 300 (5分钟) - 便于快速测试</span><br></pre></td></tr></table></figure><p><strong>生产环境</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL: 3600 (1小时) - 减少DNS查询</span><br></pre></td></tr></table></figure><h3 id="多IP配置的好处"><a href="#多IP配置的好处" class="headerlink" title="多IP配置的好处"></a>多IP配置的好处</h3><p><strong>负载均衡</strong>:</p><ul><li>分散访问压力</li><li>提高可用性</li></ul><p><strong>容错机制</strong>:</p><ul><li>某个IP故障时自动切换</li><li>提高网站稳定性</li></ul><h3 id="CDN集成"><a href="#CDN集成" class="headerlink" title="CDN集成"></a>CDN集成</h3><p><strong>CloudFlare示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名 → CloudFlare → GitHub Pages</span><br></pre></td></tr></table></figure><p><strong>优势</strong>:</p><ul><li>全球加速</li><li>DDoS防护</li><li>高级SSL功能</li></ul><h2 id="🔒-安全考虑"><a href="#🔒-安全考虑" class="headerlink" title="🔒 安全考虑"></a>🔒 安全考虑</h2><h3 id="HTTPS强制"><a href="#HTTPS强制" class="headerlink" title="HTTPS强制"></a>HTTPS强制</h3><p><strong>GitHub Pages设置</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings → Pages → Enforce HTTPS ✓</span><br></pre></td></tr></table></figure><p><strong>好处</strong>:</p><ul><li>数据传输加密</li><li>SEO优势</li><li>现代浏览器要求</li></ul><h3 id="DNS安全"><a href="#DNS安全" class="headerlink" title="DNS安全"></a>DNS安全</h3><p><strong>DNSSEC</strong>:</p><ul><li>防止DNS劫持</li><li>验证DNS响应真实性</li></ul><p><strong>私有DNS</strong>:</p><ul><li>使用可信DNS服务器</li><li>避免DNS污染</li></ul><h2 id="📈-监控与维护"><a href="#📈-监控与维护" class="headerlink" title="📈 监控与维护"></a>📈 监控与维护</h2><h3 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h3><p><strong>可用性监控</strong>:</p><ul><li>网站响应时间</li><li>DNS解析时间</li><li>SSL证书到期时间</li></ul><p><strong>工具推荐</strong>:</p><ul><li>UptimeRobot（免费）</li><li>Pingdom（付费）</li><li>CloudFlare Analytics</li></ul><h3 id="维护任务"><a href="#维护任务" class="headerlink" title="维护任务"></a>维护任务</h3><p><strong>定期检查</strong>:</p><ul><li>DNS记录是否正确</li><li>SSL证书是否有效</li><li>网站访问是否正常</li></ul><p><strong>备份策略</strong>:</p><ul><li>DNS配置备份</li><li>域名转移码保存</li><li>重要文件备份</li></ul><h2 id="🎯-总结"><a href="#🎯-总结" class="headerlink" title="🎯 总结"></a>🎯 总结</h2><p>域名解析是现代互联网的基础设施，理解其工作原理对于网站管理至关重要：</p><h3 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h3><ol><li><strong>DNS记录类型</strong>: A记录指向IP，CNAME指向域名</li><li><strong>GitHub Pages绑定</strong>: 需要正确的DNS配置和CNAME文件</li><li><strong>传播时间</strong>: DNS更改需要5-60分钟生效</li><li><strong>安全性</strong>: 启用HTTPS和DNSSEC保护</li><li><strong>监控</strong>: 持续监控确保服务稳定</li></ol><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>使用A记录指向GitHub Pages IP</li><li>避免不必要的CNAME记录</li><li>设置合适的TTL值</li><li>启用HTTPS强制</li><li>定期监控和维护</li></ul><p>通过本文的学习，相信你已经对域名解析有了全面的理解。在实际操作中，记住耐心等待DNS传播，遇到问题时系统性地排查，大部分问题都能迎刃而解。</p><hr><p><strong>相关资源</strong>:</p><ul><li><a href="https://docs.github.com/pages">GitHub Pages 官方文档</a></li><li><a href="https://www.cloudflare.com/learning/dns/what-is-dns/">DNS 基础知识</a></li><li><a href="https://support.huaweicloud.com/dns/">华为云 DNS 使用指南</a></li></ul><p>祝你的网站部署顺利！🚀</p>]]></content>
    
    
    <summary type="html">从零开始理解域名解析机制，详解DNS记录类型，以及如何将自定义域名绑定到GitHub Pages</summary>
    
    
    
    <category term="技术学习" scheme="http://summer-flower.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="域名" scheme="http://summer-flower.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="DNS" scheme="http://summer-flower.com/tags/DNS/"/>
    
    <category term="GitHub Pages" scheme="http://summer-flower.com/tags/GitHub-Pages/"/>
    
    <category term="网站部署" scheme="http://summer-flower.com/tags/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>React vs. Vue：前端框架的深度对决</title>
    <link href="http://summer-flower.com/2025/08/13/React-vs-Vue-%E6%B7%B1%E5%BA%A6%E5%AF%B9%E5%86%B3/"/>
    <id>http://summer-flower.com/2025/08/13/React-vs-Vue-%E6%B7%B1%E5%BA%A6%E5%AF%B9%E5%86%B3/</id>
    <published>2025-08-13T08:45:00.000Z</published>
    <updated>2025-08-13T07:38:58.623Z</updated>
    
    <content type="html"><![CDATA[<p>在当今前端开发领域，React 和 Vue 无疑是两座无法绕开的高峰。它们都拥有庞大的社区、丰富的生态和出色的性能，但其设计哲学和开发体验却大相径庭。作为开发者，理解它们的核心差异，才能在项目选型时做出最明智的决策。本文将从专业角度，对这两个框架进行一次深度对比。</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><table><thead><tr><th align="left">特性</th><th align="left">React</th><th align="left">Vue</th></tr></thead><tbody><tr><td align="left"><strong>类型</strong></td><td align="left">用于构建用户界面的 JavaScript <strong>库</strong></td><td align="left">渐进式 JavaScript <strong>框架</strong></td></tr><tr><td align="left"><strong>核心思想</strong></td><td align="left">一切皆是 JavaScript，拥抱函数式编程</td><td align="left">拥抱传统 Web，HTML&#x2F;CSS&#x2F;JS 分离</td></tr><tr><td align="left"><strong>创建者</strong></td><td align="left">Meta (Facebook)</td><td align="left">尤雨溪 (前 Google 工程师)</td></tr><tr><td align="left"><strong>上手难度</strong></td><td align="left">较陡峭，需要深入理解 JS 和 JSX</td><td align="left">相对平缓，对新手更友好</td></tr><tr><td align="left"><strong>灵活性</strong></td><td align="left">极高，生态系统庞大，选择多样</td><td align="left">较高，官方提供全家桶，开箱即用</td></tr><tr><td align="left"><strong>数据流</strong></td><td align="left">单向数据流</td><td align="left">支持单向和双向数据绑定</td></tr><tr><td align="left"><strong>状态管理</strong></td><td align="left">Context API, Redux, MobX, Zustand</td><td align="left">Pinia (官方推荐), Vuex</td></tr><tr><td align="left"><strong>路由</strong></td><td align="left">React Router</td><td align="left">Vue Router (官方)</td></tr><tr><td align="left"><strong>构建工具</strong></td><td align="left">Create React App, Vite, Next.js</td><td align="left">Vue CLI, Vite, Nuxt.js</td></tr><tr><td align="left"><strong>市场份额</strong></td><td align="left">更大，尤其在欧美和大型企业</td><td align="left">快速增长，在亚洲和初创公司中非常流行</td></tr></tbody></table><hr><h3 id="1-核心理念与设计哲学"><a href="#1-核心理念与设计哲学" class="headerlink" title="1. 核心理念与设计哲学"></a>1. 核心理念与设计哲学</h3><p><strong>React：更像一个“库”，专注 UI</strong></p><p>React 的核心定位是一个用于构建用户界面（UI）的 JavaScript <strong>库</strong>。它本身只关心视图层（MVC 中的 V）。这意味着 React 只提供构建 UI 组件的核心功能。至于路由、状态管理、HTTP 请求等，你需要自己选择并集成第三方库。</p><ul><li><strong>All in JS</strong>：React 的一个核心哲学是“All in JS”。它认为模板逻辑和渲染逻辑本质上是耦合的，因此发明了 <strong>JSX</strong>（JavaScript XML），让你可以在 JavaScript 代码中直接编写类似 HTML 的结构。这提供了极大的灵活性和编程能力，因为你可以使用 JavaScript 的全部功能（如 <code>map</code>, <code>filter</code>）来构建 UI。</li><li><strong>单向数据流</strong>：数据总是从父组件通过 <code>props</code> 流向子组件。子组件不能直接修改父组件的数据，需要通过调用父组件传递的回调函数来通知父组件进行更新。这种模式使得数据流向清晰可控，在大型应用中更容易追踪和调试。</li></ul><p><strong>Vue：一个“渐进式框架”</strong></p><p>Vue 的定位是一个<strong>渐进式框架</strong>。这意味着你可以从一个简单的功能（比如只用它来处理页面上的一小块交互）开始，然后根据需求逐渐引入路由（Vue Router）、状态管理（Pinia）等功能，最终构建一个功能完整的单页应用（SPA）。</p><ul><li><strong>拥抱传统 Web</strong>：Vue 的设计对有传统 HTML&#x2F;CSS&#x2F;JS 背景的开发者非常友好。它的<strong>单文件组件 (SFC - Single File Component)</strong> 将一个组件的模板 (<code>&lt;template&gt;</code>)、脚本 (<code>&lt;script&gt;</code>) 和样式 (<code>&lt;style&gt;</code>) 封装在同一个 <code>.vue</code> 文件中。这种结构清晰，关注点分离，非常直观。</li><li><strong>灵活的数据绑定</strong>：Vue 同时支持单向数据流和双向数据绑定。通过 <code>v-model</code> 指令，可以轻松实现表单输入和状态之间的双向绑定，这在处理表单时大大简化了代码。</li></ul><hr><h3 id="2-组件化开发"><a href="#2-组件化开发" class="headerlink" title="2. 组件化开发"></a>2. 组件化开发</h3><p>两者都采用组件化思想，但实现方式不同。</p><p><strong>React 组件：函数与 Hooks</strong></p><p>现代 React 开发主要使用<strong>函数式组件</strong>和 <strong>Hooks</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Functional Component with Hooks</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">&#123; initialCount &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount); <span class="comment">// 状态 Hook</span></span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 副作用 Hook，类似生命周期函数</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟数据获取</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(setData);</span><br><span class="line">  &#125;, []); <span class="comment">// 空依赖数组表示只在组件挂载时运行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点</strong>：JSX 提供了无与伦比的灵活性。Hooks（如 <code>useState</code>, <code>useEffect</code>）让函数式组件也能拥有状态和生命周期逻辑，代码更简洁、复用性更强。</li><li><strong>挑战</strong>：需要对 JavaScript 的闭包、<code>this</code> 指向（在类组件中）有深刻理解。JSX 的学习曲线对初学者来说可能稍高。</li></ul><p><strong>Vue 组件：选项式 API 与组合式 API</strong></p><p>Vue 提供了两种组件 API 风格。</p><ol><li><p><strong>选项式 API (Options API)</strong>：对新手友好，结构清晰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;initialCount&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: this.initialCount,</span><br><span class="line">      data: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 模拟数据获取</span><br><span class="line">    fetch(&#x27;https://api.example.com/data&#x27;)</span><br><span class="line">      .then(res =&gt; res.json())</span><br><span class="line">      .then(data =&gt; this.data = data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>组合式 API (Composition API)</strong>：受 React Hooks 启发，更适合大型复杂项目，逻辑组织更灵活。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;initialCount&#x27;]);</span><br><span class="line">const count = ref(props.initialCount); // 响应式状态</span><br><span class="line">const data = ref(null);</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">  data.value = await (await fetch(&#x27;https://api.example.com/data&#x27;)).json();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>优点</strong>：<code>.vue</code> 文件结构清晰，模板语法更接近原生 HTML。组合式 API 解决了选项式 API 在大型组件中逻辑分散的问题，代码组织更灵活。</li><li><strong>挑战</strong>：在组合式 API 中需要理解 <code>ref</code> 和 <code>reactive</code> 的区别。</li></ul><hr><h3 id="3-生态系统与状态管理"><a href="#3-生态系统与状态管理" class="headerlink" title="3. 生态系统与状态管理"></a>3. 生态系统与状态管理</h3><p><strong>React：庞大而分散，选择自由</strong></p><ul><li><strong>状态管理</strong>：<ul><li><strong>简单场景</strong>：使用 <code>useState</code> 和 <code>useReducer</code> 配合 <code>Context API</code>。</li><li><strong>复杂应用</strong>：<strong>Redux</strong> 是事实上的标准，功能强大，但以学习曲线陡峭和模板代码多而闻名。近年来，<strong>Zustand</strong> 和 <strong>MobX</strong> 等更轻量、更现代的方案越来越受欢迎。</li></ul></li><li><strong>生态</strong>：React 的生态系统是其最大的优势之一。几乎任何你能想到的功能都有成熟的第三方库支持。但也意味着你需要花时间去评估和选择技术栈，这被称为“选择疲劳症”。<strong>Next.js</strong> 框架的出现极大地改变了这一局面，它为 React 提供了一个强大的、带有一系列最佳实践的全栈开发骨架。</li></ul><p><strong>Vue：官方维护，集成度高</strong></p><ul><li><strong>状态管理</strong>：<ul><li><strong>Pinia</strong> 是 Vue 3 的官方推荐方案（取代了 Vuex）。它设计极其简洁、类型友好，并且没有 <code>mutations</code> 的概念，上手非常快。</li></ul></li><li><strong>生态</strong>：Vue 的核心库（如 <code>vue-router</code> for routing, <code>pinia</code> for state management）都由官方团队维护。这保证了它们之间的高度协同和一致性。开发者不需要在众多选项中纠lge，可以快速开始。<strong>Nuxt.js</strong> 是 Vue 生态的“Next.js”，提供了服务端渲染（SSR）、静态站点生成（SSG）等高级功能。</li></ul><hr><h3 id="4-性能"><a href="#4-性能" class="headerlink" title="4. 性能"></a>4. 性能</h3><p>两者都使用了<strong>虚拟 DOM (Virtual DOM)</strong>，性能都非常出色，足以应对绝大多数应用场景。</p><ul><li><strong>React</strong>：通过 Fiber 架构实现了可中断的异步渲染，为将来的并发模式等高级功能铺平了道路。</li><li><strong>Vue</strong>：在编译时进行了更多优化。它会静态分析模板，找出动态部分和静态部分，从而在更新时只对比动态节点，减少了虚拟 DOM diff 的开销。</li></ul><p>在实际应用中，性能瓶颈更多地来自于应用本身的逻辑（如巨大的列表、频繁的非必要更新），而不是框架本身。</p><hr><h3 id="总结与选择建议"><a href="#总结与选择建议" class="headerlink" title="总结与选择建议"></a>总结与选择建议</h3><ul><li><p><strong>选择 React 的理由</strong>：</p><ol><li><strong>大型项目和团队</strong>：React 的单向数据流和庞大的生态系统非常适合构建复杂、可维护的大型企业级应用。</li><li><strong>招聘市场</strong>：React 的岗位需求量目前是最大的，如果你想最大化就业机会，React 是一个稳妥的选择。</li><li><strong>追求极致灵活性</strong>：如果你想完全掌控你的技术栈，自由组合各种库来构建应用，React 提供了这种自由。</li><li><strong>跨平台开发</strong>：React Native 允许你使用 React 的知识来构建原生移动应用（iOS&#x2F;Android），这是一个巨大的加分项。</li></ol></li><li><p><strong>选择 Vue 的理由</strong>：</p><ol><li><strong>快速开发和上手</strong>：Vue 的学习曲线更平缓，文档极其出色，官方工具链开箱即用，非常适合初创公司、中小型项目和追求开发效率的场景。</li><li><strong>对传统开发者友好</strong>：如果你有扎实的 HTML&#x2F;CSS&#x2F;JS 基础，Vue 的模板语法会让你感到非常亲切。</li><li><strong>无缝集成</strong>：官方提供的路由和状态管理库与核心库无缝集成，减少了决策成本和集成问题。</li><li><strong>性能</strong>：开箱即用的性能表现非常优秀，心智负担小。</li></ol></li></ul><p><strong>最终，React 和 Vue 都是顶级的框架，没有绝对的好坏之分，只有“更适合”的选择。</strong> 最好的方式是都尝试一下，构建一个小项目，亲身感受它们的开发体验，然后根据你的项目需求和个人偏好做出决定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当今前端开发领域，React 和 Vue 无疑是两座无法绕开的高峰。它们都拥有庞大的社区、丰富的生态和出色的性能，但其设计哲学和开发体验却大相径庭。作为开发者，理解它们的核心差异，才能在项目选型时做出最明智的决策。本文将从专业角度，对这两个框架进行一次深度对比。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术分享" scheme="http://summer-flower.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="React" scheme="http://summer-flower.com/tags/React/"/>
    
    <category term="Vue" scheme="http://summer-flower.com/tags/Vue/"/>
    
    <category term="前端" scheme="http://summer-flower.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>🌐 网页构建基础知识详解</title>
    <link href="http://summer-flower.com/2025/08/13/%E7%BD%91%E9%A1%B5%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://summer-flower.com/2025/08/13/%E7%BD%91%E9%A1%B5%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-08-12T16:00:00.000Z</published>
    <updated>2025-08-13T07:38:41.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🌐-网页构建基础知识体系"><a href="#🌐-网页构建基础知识体系" class="headerlink" title="🌐 网页构建基础知识体系"></a>🌐 网页构建基础知识体系</h1><p>作为一个前端开发的初学者，了解网页构建的完整体系是非常重要的。本文将从专业角度为你系统地解释整个网页开发的基础知识。</p><h2 id="1-前端三剑客-网页的基础构成"><a href="#1-前端三剑客-网页的基础构成" class="headerlink" title="1. 前端三剑客 - 网页的基础构成"></a>1. <strong>前端三剑客 - 网页的基础构成</strong></h2><h3 id="🏗️-HTML-HyperText-Markup-Language"><a href="#🏗️-HTML-HyperText-Markup-Language" class="headerlink" title="🏗️ HTML (HyperText Markup Language)"></a>🏗️ HTML (HyperText Markup Language)</h3><ul><li><strong>作用</strong>：网页的骨架和结构</li><li><strong>比喻</strong>：就像房子的框架，定义了哪里是门、哪里是窗户</li><li><strong>核心概念</strong>：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用HTML标签</strong>：</p><ul><li><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>：标题</li><li><code>&lt;p&gt;</code>：段落</li><li><code>&lt;div&gt;</code>：容器</li><li><code>&lt;span&gt;</code>：内联元素</li><li><code>&lt;a&gt;</code>：链接</li><li><code>&lt;img&gt;</code>：图片</li><li><code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>：列表</li></ul><h3 id="🎨-CSS-Cascading-Style-Sheets"><a href="#🎨-CSS-Cascading-Style-Sheets" class="headerlink" title="🎨 CSS (Cascading Style Sheets)"></a>🎨 CSS (Cascading Style Sheets)</h3><ul><li><strong>作用</strong>：网页的样式和美化</li><li><strong>比喻</strong>：就像房子的装修，决定颜色、布局、字体等</li><li><strong>核心概念</strong>：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS选择器类型</strong>：</p><ul><li>元素选择器：<code>h1</code>, <code>p</code>, <code>div</code></li><li>类选择器：<code>.className</code></li><li>ID选择器：<code>#idName</code></li><li>属性选择器：<code>[type=&quot;text&quot;]</code></li></ul><p><strong>CSS盒模型</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content → padding → border → margin</span><br></pre></td></tr></table></figure><h3 id="⚡-JavaScript"><a href="#⚡-JavaScript" class="headerlink" title="⚡ JavaScript"></a>⚡ JavaScript</h3><ul><li><strong>作用</strong>：网页的交互和动态行为</li><li><strong>比喻</strong>：就像房子的电器，让一切动起来</li><li><strong>核心概念</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础语法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showAlert</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM操作</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = showAlert;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面加载完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量和数据类型</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> isStudent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="2-现代网页开发流程"><a href="#2-现代网页开发流程" class="headerlink" title="2. 现代网页开发流程"></a>2. <strong>现代网页开发流程</strong></h2><h3 id="📝-开发阶段"><a href="#📝-开发阶段" class="headerlink" title="📝 开发阶段"></a>📝 开发阶段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源代码编写 → 预处理 → 打包构建 → 部署上线</span><br></pre></td></tr></table></figure><h3 id="🔧-构建工具的作用"><a href="#🔧-构建工具的作用" class="headerlink" title="🔧 构建工具的作用"></a>🔧 构建工具的作用</h3><h4 id="Hexo-静态网站生成器"><a href="#Hexo-静态网站生成器" class="headerlink" title="Hexo (静态网站生成器)"></a><strong>Hexo</strong> (静态网站生成器)</h4><ul><li>将 Markdown 文件转换为 HTML</li><li>自动应用主题样式</li><li>生成完整的网站结构</li><li>支持插件扩展</li></ul><h4 id="其他流行工具："><a href="#其他流行工具：" class="headerlink" title="其他流行工具："></a><strong>其他流行工具</strong>：</h4><ul><li><strong>Jekyll</strong>：GitHub 原生支持</li><li><strong>Hugo</strong>：Go 语言编写，速度极快</li><li><strong>Gatsby</strong>：基于 React 的现代框架</li><li><strong>Next.js</strong>：全栈 React 框架</li><li><strong>Vue Press</strong>：基于 Vue 的文档工具</li></ul><h3 id="🛠️-前端工程化工具"><a href="#🛠️-前端工程化工具" class="headerlink" title="🛠️ 前端工程化工具"></a>🛠️ 前端工程化工具</h3><ul><li><strong>包管理器</strong>：npm, yarn, pnpm</li><li><strong>构建工具</strong>：Webpack, Vite, Rollup</li><li><strong>CSS预处理器</strong>：Sass, Less, Stylus</li><li><strong>代码规范</strong>：ESLint, Prettier</li><li><strong>版本控制</strong>：Git, GitHub</li></ul><h2 id="3-博客架构解析"><a href="#3-博客架构解析" class="headerlink" title="3. 博客架构解析"></a>3. <strong>博客架构解析</strong></h2><h3 id="📁-目录结构"><a href="#📁-目录结构" class="headerlink" title="📁 目录结构"></a>📁 目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">blog/</span><br><span class="line">├── source/           # 源文件目录</span><br><span class="line">│   ├── _posts/      # 博客文章 (Markdown)</span><br><span class="line">│   ├── _drafts/     # 草稿文件</span><br><span class="line">│   ├── games/       # 自定义页面</span><br><span class="line">│   ├── photos/      # 静态资源</span><br><span class="line">│   └── categories/  # 分类页面</span><br><span class="line">├── themes/          # 主题文件</span><br><span class="line">│   └── butterfly/   # 当前使用的主题</span><br><span class="line">├── public/          # 生成的静态网站</span><br><span class="line">├── node_modules/    # 依赖包</span><br><span class="line">├── _config.yml      # 站点配置文件</span><br><span class="line">├── package.json     # 项目依赖配置</span><br><span class="line">└── .gitignore       # Git忽略文件</span><br></pre></td></tr></table></figure><h3 id="🔄-工作流程"><a href="#🔄-工作流程" class="headerlink" title="🔄 工作流程"></a>🔄 工作流程</h3><ol><li><strong>编写内容</strong>：在 <code>source/_posts/</code> 写 Markdown 文章</li><li><strong>配置主题</strong>：在 <code>_config.yml</code> 和主题配置文件中设置</li><li><strong>本地预览</strong>：<code>hexo server</code> 启动本地服务器</li><li><strong>生成网站</strong>：<code>hexo generate</code> 将源文件转换为静态 HTML</li><li><strong>部署上线</strong>：<code>hexo deploy</code> 发布到 GitHub Pages</li></ol><h3 id="📝-Markdown-语法要点"><a href="#📝-Markdown-语法要点" class="headerlink" title="📝 Markdown 语法要点"></a>📝 Markdown 语法要点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 无序列表项1</span><br><span class="line"><span class="bullet">-</span> 无序列表项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表项1</span><br><span class="line"><span class="bullet">2.</span> 有序列表项2</span><br><span class="line"></span><br><span class="line">[<span class="string">链接文本</span>](<span class="link">https://example.com</span>)</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">image.jpg</span>)</span><br><span class="line"></span><br><span class="line">\<span class="code">`\`</span>\`javascript</span><br><span class="line">// 代码块</span><br><span class="line">console.log(&#x27;Hello World&#x27;);</span><br><span class="line">\<span class="code">`\`</span>\`</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 引用文本</span></span><br><span class="line"></span><br><span class="line">| 表格 | 列1 | 列2 |</span><br><span class="line">|------|-----|-----|</span><br><span class="line">| 行1  | 数据1 | 数据2 |</span><br></pre></td></tr></table></figure><h2 id="4-部署和托管原理"><a href="#4-部署和托管原理" class="headerlink" title="4. 部署和托管原理"></a>4. <strong>部署和托管原理</strong></h2><h3 id="🏠-静态网站-vs-动态网站"><a href="#🏠-静态网站-vs-动态网站" class="headerlink" title="🏠 静态网站 vs 动态网站"></a>🏠 静态网站 vs 动态网站</h3><h4 id="静态网站（如你的博客）："><a href="#静态网站（如你的博客）：" class="headerlink" title="静态网站（如你的博客）："></a><strong>静态网站</strong>（如你的博客）：</h4><ul><li><strong>特点</strong>：预先生成所有 HTML 文件</li><li><strong>优势</strong>：<ul><li>加载速度快</li><li>安全性高</li><li>维护成本低</li><li>SEO友好</li></ul></li><li><strong>适用场景</strong>：博客、文档、展示类网站</li></ul><h4 id="动态网站："><a href="#动态网站：" class="headerlink" title="动态网站："></a><strong>动态网站</strong>：</h4><ul><li><strong>特点</strong>：根据用户请求实时生成页面</li><li><strong>优势</strong>：<ul><li>交互性强</li><li>内容可实时更新</li><li>用户个性化体验</li></ul></li><li><strong>适用场景</strong>：社交媒体、电商、管理系统</li></ul><h3 id="☁️-GitHub-Pages-原理"><a href="#☁️-GitHub-Pages-原理" class="headerlink" title="☁️ GitHub Pages 原理"></a>☁️ GitHub Pages 原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地代码 → Git 推送 → GitHub 仓库 → 自动构建 → CDN分发 → 用户访问</span><br></pre></td></tr></table></figure><p><strong>GitHub Pages 优势</strong>：</p><ul><li>免费托管</li><li>自动部署</li><li>HTTPS 支持</li><li>自定义域名</li><li>全球 CDN 加速</li></ul><h3 id="🌍-其他托管平台"><a href="#🌍-其他托管平台" class="headerlink" title="🌍 其他托管平台"></a>🌍 其他托管平台</h3><ul><li><strong>Netlify</strong>：功能强大，支持表单处理</li><li><strong>Vercel</strong>：专注于前端框架</li><li><strong>Surge.sh</strong>：简单快速的静态托管</li><li><strong>Cloudflare Pages</strong>：结合 CDN 优势</li></ul><h2 id="5-网页加载过程详解"><a href="#5-网页加载过程详解" class="headerlink" title="5. 网页加载过程详解"></a>5. <strong>网页加载过程详解</strong></h2><h3 id="🌊-浏览器加载流程"><a href="#🌊-浏览器加载流程" class="headerlink" title="🌊 浏览器加载流程"></a>🌊 浏览器加载流程</h3><ol><li><strong>DNS 解析</strong>：将域名转换为 IP 地址</li><li><strong>建立连接</strong>：浏览器与服务器建立 TCP 连接</li><li><strong>发送请求</strong>：HTTP&#x2F;HTTPS 请求网页资源</li><li><strong>接收响应</strong>：服务器返回 HTML 文档</li><li><strong>解析 HTML</strong>：构建 DOM 树</li><li><strong>加载资源</strong>：下载 CSS、JavaScript、图片等</li><li><strong>渲染页面</strong>：应用样式，执行脚本</li><li><strong>完成加载</strong>：页面完全可交互</li></ol><h3 id="📊-性能优化要点"><a href="#📊-性能优化要点" class="headerlink" title="📊 性能优化要点"></a>📊 性能优化要点</h3><h4 id="减少文件大小"><a href="#减少文件大小" class="headerlink" title="减少文件大小"></a><strong>减少文件大小</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片压缩</span></span><br><span class="line">- 使用 WebP 格式</span><br><span class="line">- 适当降低图片质量</span><br><span class="line">- 使用响应式图片</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码压缩</span></span><br><span class="line">- CSS/JS 文件压缩</span><br><span class="line">- 移除未使用的代码</span><br><span class="line">- 使用 Tree Shaking</span><br></pre></td></tr></table></figure><h4 id="减少请求次数"><a href="#减少请求次数" class="headerlink" title="减少请求次数"></a><strong>减少请求次数</strong></h4><ul><li>合并 CSS&#x2F;JS 文件</li><li>使用 CSS Sprites</li><li>内联小文件</li><li>启用 HTTP&#x2F;2</li></ul><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a><strong>缓存策略</strong></h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HTTP 缓存头</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=31536000</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;abc123&quot;</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure><h4 id="CDN-使用"><a href="#CDN-使用" class="headerlink" title="CDN 使用"></a><strong>CDN 使用</strong></h4><ul><li>静态资源分发</li><li>就近服务用户</li><li>减轻源服务器压力</li></ul><h2 id="6-响应式设计原理"><a href="#6-响应式设计原理" class="headerlink" title="6. 响应式设计原理"></a>6. <strong>响应式设计原理</strong></h2><h3 id="📱-移动优先设计"><a href="#📱-移动优先设计" class="headerlink" title="📱 移动优先设计"></a>📱 移动优先设计</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基础样式（移动端） */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板端 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 桌面端 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎯-响应式断点"><a href="#🎯-响应式断点" class="headerlink" title="🎯 响应式断点"></a>🎯 响应式断点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 常用断点 */</span></span><br><span class="line"><span class="comment">/* 超小屏幕（手机） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">575.98px</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 小屏幕（手机横屏） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767.98px</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中等屏幕（平板） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">991.98px</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 大屏幕（桌面） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1199.98px</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 超大屏幕（大桌面） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="🔧-Flexbox-布局"><a href="#🔧-Flexbox-布局" class="headerlink" title="🔧 Flexbox 布局"></a>🔧 Flexbox 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;  <span class="comment">/* 主轴对齐 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;             <span class="comment">/* 交叉轴对齐 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;                 <span class="comment">/* 换行 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;        <span class="comment">/* 等比伸缩 */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;   <span class="comment">/* 放大比例 */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>; <span class="comment">/* 缩小比例 */</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">0</span>;  <span class="comment">/* 基础大小 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎨-Grid-布局"><a href="#🎨-Grid-布局" class="headerlink" title="🎨 Grid 布局"></a>🎨 Grid 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;sidebar main main&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">grid-area</span>: header; &#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123; <span class="attribute">grid-area</span>: sidebar; &#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123; <span class="attribute">grid-area</span>: main; &#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123; <span class="attribute">grid-area</span>: footer; &#125;</span><br></pre></td></tr></table></figure><h2 id="7-SEO-和用户体验"><a href="#7-SEO-和用户体验" class="headerlink" title="7. SEO 和用户体验"></a>7. <strong>SEO 和用户体验</strong></h2><h3 id="🔍-搜索引擎优化-SEO"><a href="#🔍-搜索引擎优化-SEO" class="headerlink" title="🔍 搜索引擎优化 (SEO)"></a>🔍 搜索引擎优化 (SEO)</h3><h4 id="Meta-标签优化"><a href="#Meta-标签优化" class="headerlink" title="Meta 标签优化"></a><strong>Meta 标签优化</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题 - 网站名称<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面描述，120-160字符&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词1,关键词2,关键词3&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Open Graph (社交分享) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面标题&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面描述&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;分享图片URL&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面URL&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Twitter Card --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:card&quot;</span> <span class="attr">content</span>=<span class="string">&quot;summary_large_image&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面标题&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="语义化-HTML"><a href="#语义化-HTML" class="headerlink" title="语义化 HTML"></a><strong>语义化 HTML</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2025-08-13&quot;</span>&gt;</span>2025年8月13日<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>章节标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章作者信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a><strong>结构化数据</strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://schema.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Article&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;headline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章标题&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Person&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;作者姓名&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;datePublished&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-08-13&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章描述&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="👥-用户体验-UX-设计原则"><a href="#👥-用户体验-UX-设计原则" class="headerlink" title="👥 用户体验 (UX) 设计原则"></a>👥 用户体验 (UX) 设计原则</h3><h4 id="可用性原则"><a href="#可用性原则" class="headerlink" title="可用性原则"></a><strong>可用性原则</strong></h4><ol><li><strong>一致性</strong>：相似功能使用相似设计</li><li><strong>可预测性</strong>：用户能预期操作结果</li><li><strong>容错性</strong>：减少错误，方便纠错</li><li><strong>效率性</strong>：快速完成任务</li></ol><h4 id="可访问性-Accessibility"><a href="#可访问性-Accessibility" class="headerlink" title="可访问性 (Accessibility)"></a><strong>可访问性 (Accessibility)</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语义化标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;主导航&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图片替代文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;chart.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;2025年销售数据图表&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 表单标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键盘导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span>可键盘访问的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="性能体验"><a href="#性能体验" class="headerlink" title="性能体验"></a><strong>性能体验</strong></h4><ul><li><strong>首屏加载时间</strong> &lt; 3秒</li><li><strong>页面完全加载</strong> &lt; 5秒</li><li><strong>交互响应时间</strong> &lt; 100ms</li><li><strong>Core Web Vitals</strong> 指标优化</li></ul><h2 id="8-前端框架生态"><a href="#8-前端框架生态" class="headerlink" title="8. 前端框架生态"></a>8. <strong>前端框架生态</strong></h2><h3 id="⚛️-React-生态"><a href="#⚛️-React-生态" class="headerlink" title="⚛️ React 生态"></a>⚛️ React 生态</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 组件示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BlogPost</span>(<span class="params">&#123; title, content, author &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [likes, setLikes] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者：&#123;author&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setLikes(likes + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        点赞 (&#123;likes&#125;)</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>React 生态工具</strong>：</p><ul><li><strong>Create React App</strong>：脚手架工具</li><li><strong>Next.js</strong>：全栈框架</li><li><strong>React Router</strong>：路由管理</li><li><strong>Redux&#x2F;Zustand</strong>：状态管理</li></ul><h3 id="💚-Vue-生态"><a href="#💚-Vue-生态" class="headerlink" title="💚 Vue 生态"></a>💚 Vue 生态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Vue 组件示例 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;article&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;作者：&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; content &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;likes++&quot;&gt;</span><br><span class="line">      点赞 (&#123;&#123; likes &#125;&#125;)</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;title&#x27;, &#x27;content&#x27;, &#x27;author&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      likes: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Vue 生态工具</strong>：</p><ul><li><strong>Vue CLI&#x2F;Vite</strong>：脚手架工具</li><li><strong>Nuxt.js</strong>：全栈框架</li><li><strong>Vue Router</strong>：路由管理</li><li><strong>Vuex&#x2F;Pinia</strong>：状态管理</li></ul><h3 id="🅰️-Angular-生态"><a href="#🅰️-Angular-生态" class="headerlink" title="🅰️ Angular 生态"></a>🅰️ Angular 生态</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 组件示例</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;blog-post&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;article&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;作者：&#123;&#123;author&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;button (click)=&quot;increaseLikes()&quot;&gt;</span></span><br><span class="line"><span class="string">        点赞 (&#123;&#123;likes&#125;&#125;)</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/article&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BlogPostComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">author</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  likes = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">increaseLikes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">likes</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-后端基础知识"><a href="#9-后端基础知识" class="headerlink" title="9. 后端基础知识"></a>9. <strong>后端基础知识</strong></h2><h3 id="🖥️-服务器端语言"><a href="#🖥️-服务器端语言" class="headerlink" title="🖥️ 服务器端语言"></a>🖥️ 服务器端语言</h3><ul><li><strong>Node.js</strong>：JavaScript 运行时</li><li><strong>Python</strong>：Django, Flask 框架</li><li><strong>Java</strong>：Spring Boot 框架</li><li><strong>PHP</strong>：Laravel, Symfony 框架</li><li><strong>C#</strong>：ASP.NET Core 框架</li></ul><h3 id="🗄️-数据库类型"><a href="#🗄️-数据库类型" class="headerlink" title="🗄️ 数据库类型"></a>🗄️ 数据库类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL 数据库示例 (MySQL)</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> posts (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">  title <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  content TEXT,</span><br><span class="line">  author <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> posts <span class="keyword">WHERE</span> author <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoSQL 数据库示例 (MongoDB)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;...&quot;</span>),</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;文章标题&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content&quot;</span>: <span class="string">&quot;文章内容&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tags&quot;</span>: [<span class="string">&quot;技术&quot;</span>, <span class="string">&quot;教程&quot;</span>],</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="title class_">ISODate</span>(<span class="string">&quot;2025-08-13T...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔌-API-设计"><a href="#🔌-API-设计" class="headerlink" title="🔌 API 设计"></a>🔌 API 设计</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RESTful API 示例</span></span><br><span class="line"><span class="variable constant_">GET</span>    /api/posts        <span class="comment">// 获取文章列表</span></span><br><span class="line"><span class="variable constant_">GET</span>    /api/posts/:id    <span class="comment">// 获取单篇文章</span></span><br><span class="line"><span class="variable constant_">POST</span>   /api/posts        <span class="comment">// 创建文章</span></span><br><span class="line"><span class="variable constant_">PUT</span>    /api/posts/:id    <span class="comment">// 更新文章</span></span><br><span class="line"><span class="variable constant_">DELETE</span> /api/posts/:id    <span class="comment">// 删除文章</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL API 示例</span></span><br><span class="line">query &#123;</span><br><span class="line">  posts &#123;</span><br><span class="line">    id</span><br><span class="line">    title</span><br><span class="line">    author &#123;</span><br><span class="line">      name</span><br><span class="line">      email</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-开发工具和环境"><a href="#10-开发工具和环境" class="headerlink" title="10. 开发工具和环境"></a>10. <strong>开发工具和环境</strong></h2><h3 id="🛠️-代码编辑器"><a href="#🛠️-代码编辑器" class="headerlink" title="🛠️ 代码编辑器"></a>🛠️ 代码编辑器</h3><ul><li><strong>VS Code</strong>：功能强大，插件丰富</li><li><strong>WebStorm</strong>：JetBrains 出品</li><li><strong>Sublime Text</strong>：轻量快速</li><li><strong>Atom</strong>：GitHub 开源编辑器</li></ul><h3 id="📦-包管理器"><a href="#📦-包管理器" class="headerlink" title="📦 包管理器"></a>📦 包管理器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm (Node Package Manager)</span></span><br><span class="line">npm install package-name</span><br><span class="line">npm install -g package-name  <span class="comment"># 全局安装</span></span><br><span class="line">npm run build               <span class="comment"># 运行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn (Facebook 开发)</span></span><br><span class="line">yarn add package-name</span><br><span class="line">yarn global add package-name</span><br><span class="line">yarn build</span><br><span class="line"></span><br><span class="line"><span class="comment"># pnpm (性能优化版本)</span></span><br><span class="line">pnpm add package-name</span><br><span class="line">pnpm add -g package-name</span><br><span class="line">pnpm build</span><br></pre></td></tr></table></figure><h3 id="🔧-构建工具"><a href="#🔧-构建工具" class="headerlink" title="🔧 构建工具"></a>🔧 构建工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack 配置示例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vite 配置示例</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: <span class="string">&#x27;terser&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="11-版本控制和协作"><a href="#11-版本控制和协作" class="headerlink" title="11. 版本控制和协作"></a>11. <strong>版本控制和协作</strong></h2><h3 id="📝-Git-基础命令"><a href="#📝-Git-基础命令" class="headerlink" title="📝 Git 基础命令"></a>📝 Git 基础命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础操作</span></span><br><span class="line">git init                    <span class="comment"># 初始化仓库</span></span><br><span class="line">git add .                   <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span>    <span class="comment"># 提交更改</span></span><br><span class="line">git push origin main        <span class="comment"># 推送到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分支操作</span></span><br><span class="line">git branch feature-branch   <span class="comment"># 创建分支</span></span><br><span class="line">git checkout feature-branch <span class="comment"># 切换分支</span></span><br><span class="line">git merge feature-branch    <span class="comment"># 合并分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">git status                  <span class="comment"># 查看工作区状态</span></span><br><span class="line">git <span class="built_in">log</span> --oneline          <span class="comment"># 查看提交历史</span></span><br><span class="line">git diff                   <span class="comment"># 查看差异</span></span><br></pre></td></tr></table></figure><h3 id="🤝-协作工作流"><a href="#🤝-协作工作流" class="headerlink" title="🤝 协作工作流"></a>🤝 协作工作流</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主分支 (main/master)</span><br><span class="line">├── 开发分支 (develop)</span><br><span class="line">│   ├── 功能分支 (feature/login)</span><br><span class="line">│   ├── 功能分支 (feature/payment)</span><br><span class="line">│   └── 修复分支 (hotfix/bug-001)</span><br><span class="line">└── 发布分支 (release/v1.2.0)</span><br></pre></td></tr></table></figure><h3 id="📋-提交规范"><a href="#📋-提交规范" class="headerlink" title="📋 提交规范"></a>📋 提交规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交消息格式</span></span><br><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型说明</span></span><br><span class="line">feat:     新功能</span><br><span class="line">fix:      修复bug</span><br><span class="line">docs:     文档更新</span><br><span class="line">style:    代码格式调整</span><br><span class="line">refactor: 代码重构</span><br><span class="line"><span class="built_in">test</span>:     测试相关</span><br><span class="line">chore:    构建/工具链更新</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">feat(auth): 添加用户登录功能</span><br><span class="line">fix(ui): 修复响应式布局问题</span><br><span class="line">docs(readme): 更新安装说明</span><br></pre></td></tr></table></figure><h2 id="12-学习路径和资源推荐"><a href="#12-学习路径和资源推荐" class="headerlink" title="12. 学习路径和资源推荐"></a>12. <strong>学习路径和资源推荐</strong></h2><h3 id="📈-初学者路径"><a href="#📈-初学者路径" class="headerlink" title="📈 初学者路径"></a>📈 初学者路径</h3><ol><li><p><strong>第一阶段</strong>：HTML + CSS 基础</p><ul><li>学会基本标签和样式</li><li>完成静态页面制作</li><li>掌握响应式设计</li></ul></li><li><p><strong>第二阶段</strong>：JavaScript 基础</p><ul><li>语法和数据类型</li><li>DOM 操作</li><li>事件处理</li></ul></li><li><p><strong>第三阶段</strong>：工具和框架</p><ul><li>Git 版本控制</li><li>包管理器使用</li><li>选择一个框架深入学习</li></ul></li><li><p><strong>第四阶段</strong>：项目实践</p><ul><li>个人作品集</li><li>小型应用开发</li><li>开源项目贡献</li></ul></li></ol><h3 id="📚-学习资源"><a href="#📚-学习资源" class="headerlink" title="📚 学习资源"></a>📚 学习资源</h3><ul><li><p><strong>在线教程</strong>：</p><ul><li>MDN Web Docs</li><li>freeCodeCamp</li><li>菜鸟教程</li><li>慕课网</li></ul></li><li><p><strong>视频课程</strong>：</p><ul><li>Bilibili</li><li>腾讯课堂</li><li>网易云课堂</li><li>YouTube</li></ul></li><li><p><strong>实践平台</strong>：</p><ul><li>CodePen</li><li>JSFiddle</li><li>Repl.it</li><li>GitHub</li></ul></li></ul><h3 id="🎯-进阶方向"><a href="#🎯-进阶方向" class="headerlink" title="🎯 进阶方向"></a>🎯 进阶方向</h3><ul><li><strong>前端工程化</strong>：构建工具、自动化部署</li><li><strong>性能优化</strong>：加载优化、渲染优化</li><li><strong>跨端开发</strong>：React Native、Flutter</li><li><strong>全栈开发</strong>：Node.js、数据库</li><li><strong>DevOps</strong>：CI&#x2F;CD、容器化</li></ul><h2 id="13-常见问题和解决方案"><a href="#13-常见问题和解决方案" class="headerlink" title="13. 常见问题和解决方案"></a>13. <strong>常见问题和解决方案</strong></h2><h3 id="❓-样式问题"><a href="#❓-样式问题" class="headerlink" title="❓ 样式问题"></a>❓ 样式问题</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 常见的 CSS 重置 */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 垂直居中 */</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐛-JavaScript-调试"><a href="#🐛-JavaScript-调试" class="headerlink" title="🐛 JavaScript 调试"></a>🐛 JavaScript 调试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台调试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变量值:&#x27;</span>, variable);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误信息:&#x27;</span>, error);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(arrayData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断点调试</span></span><br><span class="line"><span class="keyword">debugger</span>;  <span class="comment">// 在此处暂停执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能出错的代码</span></span><br><span class="line">  <span class="title function_">riskyOperation</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;捕获到错误:&#x27;</span>, error);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 总是执行的代码</span></span><br><span class="line">  <span class="title function_">cleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔧-性能问题"><a href="#🔧-性能问题" class="headerlink" title="🔧 性能问题"></a>🔧 性能问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">executedFunction</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">later</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> inThrottle;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!inThrottle) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      inThrottle = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> inThrottle = <span class="literal">false</span>, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(searchFunction, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">const</span> throttledScroll = <span class="title function_">throttle</span>(scrollHandler, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="14-未来发展趋势"><a href="#14-未来发展趋势" class="headerlink" title="14. 未来发展趋势"></a>14. <strong>未来发展趋势</strong></h2><h3 id="🚀-新兴技术"><a href="#🚀-新兴技术" class="headerlink" title="🚀 新兴技术"></a>🚀 新兴技术</h3><ul><li><strong>WebAssembly</strong>：高性能 Web 应用</li><li><strong>PWA</strong>：渐进式 Web 应用</li><li><strong>JAMstack</strong>：现代 Web 架构</li><li><strong>Serverless</strong>：无服务器计算</li><li><strong>边缘计算</strong>：CDN 边缘处理</li></ul><h3 id="🎨-设计趋势"><a href="#🎨-设计趋势" class="headerlink" title="🎨 设计趋势"></a>🎨 设计趋势</h3><ul><li><strong>暗色模式</strong>：护眼且时尚</li><li><strong>微交互</strong>：细致的用户反馈</li><li><strong>3D 和动画</strong>：沉浸式体验</li><li><strong>极简设计</strong>：专注内容本身</li></ul><h3 id="🛠️-开发趋势"><a href="#🛠️-开发趋势" class="headerlink" title="🛠️ 开发趋势"></a>🛠️ 开发趋势</h3><ul><li><strong>TypeScript</strong>：类型安全的 JavaScript</li><li><strong>组件化开发</strong>：可复用的 UI 组件</li><li><strong>微前端</strong>：大型应用的模块化</li><li><strong>低代码&#x2F;无代码</strong>：可视化开发平台</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网页构建是一个不断发展的领域，从最基础的 HTML、CSS、JavaScript 到现代的框架和工具链，每一层都有其存在的价值和意义。</p><h3 id="🎯-关键要点"><a href="#🎯-关键要点" class="headerlink" title="🎯 关键要点"></a>🎯 关键要点</h3><ol><li><strong>基础要扎实</strong>：HTML、CSS、JavaScript 是根基</li><li><strong>实践要充分</strong>：动手做项目比看教程更重要</li><li><strong>学习要持续</strong>：技术更新快，需要保持学习习惯</li><li><strong>视野要开阔</strong>：不仅要会写代码，还要了解设计、产品、用户体验</li></ol><h3 id="🌟-给初学者的建议"><a href="#🌟-给初学者的建议" class="headerlink" title="🌟 给初学者的建议"></a>🌟 给初学者的建议</h3><ul><li><strong>不要急于求成</strong>：每个阶段都要打好基础</li><li><strong>多做项目</strong>：从模仿开始，逐步创新</li><li><strong>参与社区</strong>：GitHub、Stack Overflow、技术论坛</li><li><strong>保持好奇心</strong>：关注新技术，但不要盲目追新</li></ul><p>希望这份详细的指南能帮助你更好地理解网页构建的全貌，在前端开发的道路上走得更稳更远！</p><hr><p><em>最后更新：2025年8月13日</em><br><em>如有疑问，欢迎交流讨论！</em></p>]]></content>
    
    
    <summary type="html">从专业角度系统讲解网页构建的基础知识，适合初学者全面了解前端开发体系</summary>
    
    
    
    <category term="学习记录" scheme="http://summer-flower.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="前端" scheme="http://summer-flower.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java 注解</title>
    <link href="http://summer-flower.com/2025/08/12/Java%20%E6%B3%A8%E8%A7%A3/"/>
    <id>http://summer-flower.com/2025/08/12/Java%20%E6%B3%A8%E8%A7%A3/</id>
    <published>2025-08-12T08:18:13.000Z</published>
    <updated>2025-08-12T08:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📝-Java-注解完全指南"><a href="#📝-Java-注解完全指南" class="headerlink" title="📝 Java 注解完全指南"></a>📝 Java 注解完全指南</h1><blockquote><p>yys-project中延伸学习Java注解，上传一下</p></blockquote><h2 id="1-什么是Java注解？"><a href="#1-什么是Java注解？" class="headerlink" title="1. 什么是Java注解？"></a>1. 什么是Java注解？</h2><p>Java注解（Annotation）是Java 5引入的一种元数据机制，它为代码提供了一种描述性的信息，而不直接影响代码的执行逻辑。可以把注解理解为”给代码贴标签”，这些标签可以被编译器、开发工具或运行时环境读取和处理。</p><h3 id="注解的本质"><a href="#注解的本质" class="headerlink" title="注解的本质"></a>注解的本质</h3><ul><li>注解本质上是一种特殊的接口</li><li>继承自<code>java.lang.annotation.Annotation</code>接口</li><li>在编译后会生成相应的字节码信息</li></ul><h2 id="2-Java注解-vs-C-的对比"><a href="#2-Java注解-vs-C-的对比" class="headerlink" title="2. Java注解 vs C++的对比"></a>2. Java注解 vs C++的对比</h2><table><thead><tr><th>特性</th><th>Java注解</th><th>C++宏&#x2F;预处理指令</th><th>C++属性(C++11+)</th></tr></thead><tbody><tr><td><strong>语法</strong></td><td><code>@注解名</code></td><td><code>#define</code>, <code>#pragma</code></td><td><code>[[属性名]]</code></td></tr><tr><td><strong>处理时机</strong></td><td>编译时&#x2F;运行时</td><td>预处理时</td><td>编译时</td></tr><tr><td><strong>类型安全</strong></td><td>强类型</td><td>弱类型</td><td>强类型</td></tr><tr><td><strong>反射支持</strong></td><td>完全支持</td><td>不支持</td><td>有限支持</td></tr><tr><td><strong>功能范围</strong></td><td>元数据、验证、代码生成</td><td>文本替换、条件编译</td><td>优化提示、属性标记</td></tr></tbody></table><h3 id="举例对比："><a href="#举例对比：" class="headerlink" title="举例对比："></a>举例对比：</h3><p><strong>Java注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;example&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++属性：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="keyword">override</span>]]</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> std::string <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;example&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++宏：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OVERRIDE virtual</span></span><br><span class="line"><span class="function">OVERRIDE std::string <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;example&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-注解的工作原理"><a href="#3-注解的工作原理" class="headerlink" title="3. 注解的工作原理"></a>3. 注解的工作原理</h2><h3 id="3-1-编译时处理"><a href="#3-1-编译时处理" class="headerlink" title="3.1 编译时处理"></a>3.1 编译时处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源代码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后的字节码中会包含注解信息</span></span><br><span class="line"><span class="comment">// 可以通过反射API在运行时访问</span></span><br></pre></td></tr></table></figure><h3 id="3-2-三个处理阶段"><a href="#3-2-三个处理阶段" class="headerlink" title="3.2 三个处理阶段"></a>3.2 三个处理阶段</h3><ol><li><strong>源码阶段</strong>：注解存在于.java文件中</li><li><strong>编译阶段</strong>：注解被编译器处理，可能生成额外代码</li><li><strong>运行阶段</strong>：通过反射API读取注解信息</li></ol><h3 id="3-3-注解处理器（Annotation-Processor）"><a href="#3-3-注解处理器（Annotation-Processor）" class="headerlink" title="3.3 注解处理器（Annotation Processor）"></a>3.3 注解处理器（Annotation Processor）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义注解处理器示例</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&quot;com.example.MyAnnotation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, </span></span><br><span class="line"><span class="params">                          RoundEnvironment roundEnv)</span> &#123;</span><br><span class="line">        <span class="comment">// 在编译时处理注解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-注解的分类"><a href="#4-注解的分类" class="headerlink" title="4. 注解的分类"></a>4. 注解的分类</h2><h3 id="4-1-按生命周期分类"><a href="#4-1-按生命周期分类" class="headerlink" title="4.1 按生命周期分类"></a>4.1 按生命周期分类</h3><h4 id="SOURCE（源码级）"><a href="#SOURCE（源码级）" class="headerlink" title="SOURCE（源码级）"></a>SOURCE（源码级）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SourceAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只在源码中存在，编译后丢弃</li><li>主要用于编译时检查</li><li>例如：<code>@Override</code>, <code>@SuppressWarnings</code></li></ul><h4 id="CLASS（字节码级）"><a href="#CLASS（字节码级）" class="headerlink" title="CLASS（字节码级）"></a>CLASS（字节码级）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ClassAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在字节码中保留，但运行时不可访问</li><li>默认的保留策略</li><li>用于编译时或字节码处理工具</li></ul><h4 id="RUNTIME（运行时级）"><a href="#RUNTIME（运行时级）" class="headerlink" title="RUNTIME（运行时级）"></a>RUNTIME（运行时级）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RuntimeAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行时可通过反射访问</li><li>最常用的类型</li><li>用于框架和库的运行时处理</li></ul><h3 id="4-2-按作用目标分类"><a href="#4-2-按作用目标分类" class="headerlink" title="4.2 按作用目标分类"></a>4.2 按作用目标分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// 可以用在类和方法上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的ElementType：</p><ul><li><code>TYPE</code>：类、接口、枚举</li><li><code>METHOD</code>：方法</li><li><code>FIELD</code>：字段</li><li><code>PARAMETER</code>：参数</li><li><code>CONSTRUCTOR</code>：构造器</li><li><code>PACKAGE</code>：包</li></ul><h2 id="5-常见内置注解详解"><a href="#5-常见内置注解详解" class="headerlink" title="5. 常见内置注解详解"></a>5. 常见内置注解详解</h2><h3 id="5-1-基础注解"><a href="#5-1-基础注解" class="headerlink" title="5.1 基础注解"></a>5.1 基础注解</h3><h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 确保正确重写父类方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能</strong>：</p><ul><li>编译时检查是否正确重写了父类方法</li><li>提高代码可读性</li><li>防止方法签名错误</li></ul><h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OldAPI</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated(since = &quot;1.5&quot;, forRemoval = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oldMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 已废弃的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 推荐使用的新方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能</strong>：</p><ul><li>标记已废弃的API</li><li>编译时产生警告</li><li>可以指定废弃版本和是否将被移除</li></ul><h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  <span class="comment">// 原始类型警告被抑制</span></span><br><span class="line">        list.add(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unused&quot;, &quot;deprecation&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">anotherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 抑制多种警告</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常用警告类型</strong>：</p><ul><li><code>unchecked</code>：未检查转换</li><li><code>unused</code>：未使用的变量</li><li><code>deprecation</code>：使用已废弃的API</li><li><code>rawtypes</code>：使用原始类型</li></ul><h4 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsExample</span> &#123;</span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">printAll</span><span class="params">(T... items)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (T item : items) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-函数式接口注解"><a href="#5-2-函数式接口注解" class="headerlink" title="5.2 函数式接口注解"></a>5.2 函数式接口注解</h3><h4 id="FunctionalInterface-详细解释"><a href="#FunctionalInterface-详细解释" class="headerlink" title="@FunctionalInterface 详细解释"></a>@FunctionalInterface 详细解释</h4><p><code>@FunctionalInterface</code>注解用来标记一个接口是<strong>函数式接口</strong>，这是Java 8引入Lambda表达式后的重要概念。</p><h5 id="什么是函数式接口？"><a href="#什么是函数式接口？" class="headerlink" title="什么是函数式接口？"></a>什么是函数式接口？</h5><p>函数式接口是<strong>只有一个抽象方法</strong>的接口，它可以被Lambda表达式实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 只能有一个抽象方法（核心要求）</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以有默认方法（不算抽象方法）</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以有静态方法（不算抽象方法）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个计算器接口&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Lambda表达式实现"><a href="#Lambda表达式实现" class="headerlink" title="Lambda表达式实现"></a>Lambda表达式实现</h5><p>传统方式 vs Lambda方式的对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 传统方式：使用匿名内部类</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">add</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ Lambda方式：简洁明了</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">multiply</span> <span class="operator">=</span> (a, b) -&gt; a * b;</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">subtract</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> add.calculate(<span class="number">5</span>, <span class="number">3</span>);        <span class="comment">// 结果：8</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> multiply.calculate(<span class="number">4</span>, <span class="number">6</span>);   <span class="comment">// 结果：24</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result3</span> <span class="operator">=</span> subtract.calculate(<span class="number">10</span>, <span class="number">4</span>);  <span class="comment">// 结果：6</span></span><br></pre></td></tr></table></figure><h5 id="Lambda表达式语法详解"><a href="#Lambda表达式语法详解" class="headerlink" title="Lambda表达式语法详解"></a>Lambda表达式语法详解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整语法：(参数列表) -&gt; &#123; 方法体 &#125;</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">complex</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;正在计算: &quot;</span> + a + <span class="string">&quot; + &quot;</span> + b);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化语法：参数类型可以省略（类型推断）</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">simple</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单参数可以省略括号</span></span><br><span class="line">Function&lt;Integer, Integer&gt; square = x -&gt; x * x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数必须保留空括号</span></span><br><span class="line">Supplier&lt;String&gt; greeting = () -&gt; <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单条语句可以省略大括号和return</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多条语句必须使用大括号和return</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">verbose</span> <span class="operator">=</span> (a, b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始计算&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="常见的函数式接口"><a href="#常见的函数式接口" class="headerlink" title="常见的函数式接口"></a>常见的函数式接口</h5><p>Java提供了许多内置的函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Supplier&lt;T&gt; - 供应商：无参数，返回T类型</span></span><br><span class="line">Supplier&lt;String&gt; stringSupplier = () -&gt; <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Supplier&lt;Integer&gt; randomNum = () -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Consumer&lt;T&gt; - 消费者：接受T类型参数，无返回值</span></span><br><span class="line">Consumer&lt;String&gt; printer = str -&gt; System.out.println(str);</span><br><span class="line">Consumer&lt;Integer&gt; logger = num -&gt; System.out.println(<span class="string">&quot;数字：&quot;</span> + num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Function&lt;T, R&gt; - 函数：接受T类型，返回R类型</span></span><br><span class="line">Function&lt;String, Integer&gt; stringLength = str -&gt; str.length();</span><br><span class="line">Function&lt;Integer, String&gt; intToString = num -&gt; <span class="string">&quot;数字：&quot;</span> + num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Predicate&lt;T&gt; - 断言：接受T类型，返回boolean</span></span><br><span class="line">Predicate&lt;String&gt; isEmpty = str -&gt; str.isEmpty();</span><br><span class="line">Predicate&lt;Integer&gt; isEven = num -&gt; num % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. BiFunction&lt;T, U, R&gt; - 双参数函数：接受T和U，返回R</span></span><br><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; add = (a, b) -&gt; a + b;</span><br><span class="line">BiFunction&lt;String, String, String&gt; concat = (s1, s2) -&gt; s1 + s2;</span><br></pre></td></tr></table></figure><h5 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义不同的计算方式</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">multiply</span> <span class="operator">=</span> (a, b) -&gt; a * b;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">max</span> <span class="operator">=</span> (a, b) -&gt; Math.max(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用计算器</span></span><br><span class="line">        performCalculation(<span class="number">10</span>, <span class="number">5</span>, add);      <span class="comment">// 输出：结果：15</span></span><br><span class="line">        performCalculation(<span class="number">10</span>, <span class="number">5</span>, multiply); <span class="comment">// 输出：结果：50</span></span><br><span class="line">        performCalculation(<span class="number">10</span>, <span class="number">5</span>, max);      <span class="comment">// 输出：结果：10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 集合操作中使用Lambda</span></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 过滤偶数</span></span><br><span class="line">        List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">            .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 平方运算</span></span><br><span class="line">        List&lt;Integer&gt; squares = numbers.stream()</span><br><span class="line">            .map(n -&gt; n * n)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">            .reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 高阶函数：接受函数作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">performCalculation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Calculator calc)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calc.calculate(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果：&quot;</span> + result);</span><br><span class="line">        calc.log(); <span class="comment">// 调用默认方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="FunctionalInterface注解的作用"><a href="#FunctionalInterface注解的作用" class="headerlink" title="@FunctionalInterface注解的作用"></a>@FunctionalInterface注解的作用</h5><ol><li><strong>编译时检查</strong>：确保接口只有一个抽象方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvalidInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>; <span class="comment">// 编译错误！函数式接口只能有一个抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>文档说明</strong>：明确表示这是一个函数式接口</li><li><strong>IDE支持</strong>：开发工具可以提供更好的Lambda支持</li></ol><h5 id="与传统接口的区别"><a href="#与传统接口的区别" class="headerlink" title="与传统接口的区别"></a>与传统接口的区别</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统接口 - 可能有多个抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TraditionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口 - 只有一个抽象方法</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">singleMethod</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以有默认方法和静态方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法引用（Method-Reference）"><a href="#方法引用（Method-Reference）" class="headerlink" title="方法引用（Method Reference）"></a>方法引用（Method Reference）</h5><p>Lambda表达式的进一步简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lambda表达式</span></span><br><span class="line">Function&lt;String, Integer&gt; lengthLambda = str -&gt; str.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法引用（更简洁）</span></span><br><span class="line">Function&lt;String, Integer&gt; lengthMethodRef = String::length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法引用示例</span></span><br><span class="line">Consumer&lt;String&gt; printLambda = str -&gt; System.out.println(str);</span><br><span class="line">Consumer&lt;String&gt; printMethodRef = System.out::println;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器引用</span></span><br><span class="line">Supplier&lt;ArrayList&lt;String&gt;&gt; listSupplier = ArrayList::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<code>@FunctionalInterface</code>让Java支持函数式编程，使代码更简洁、更具表达力。Lambda表达式本质上是匿名函数的简写，让我们可以将行为作为参数传递，这是现代Java编程的重要特性！</p><h2 id="6-框架中的常用注解"><a href="#6-框架中的常用注解" class="headerlink" title="6. 框架中的常用注解"></a>6. 框架中的常用注解</h2><h3 id="什么是Spring框架？"><a href="#什么是Spring框架？" class="headerlink" title="什么是Spring框架？"></a>什么是Spring框架？</h3><p><strong>Spring</strong>是Java企业级开发中最流行的应用框架，它提供了：</p><ul><li><strong>依赖注入（DI）</strong>：自动管理对象间的依赖关系</li><li><strong>面向切面编程（AOP）</strong>：统一处理横切关注点（如日志、事务）</li><li><strong>事务管理</strong>：简化数据库事务处理</li><li><strong>Web开发支持</strong>：MVC架构支持</li></ul><p><strong>Spring Boot</strong>是Spring的进化版，它：</p><ul><li><strong>自动配置</strong>：根据依赖自动配置Spring应用</li><li><strong>内嵌服务器</strong>：无需外部Tomcat，直接运行</li><li><strong>简化配置</strong>：减少XML配置，基于注解开发</li><li><strong>微服务友好</strong>：易于构建独立的微服务应用</li></ul><h3 id="6-1-Spring核心注解详解"><a href="#6-1-Spring核心注解详解" class="headerlink" title="6.1 Spring核心注解详解"></a>6.1 Spring核心注解详解</h3><h4 id="组件注解系列"><a href="#组件注解系列" class="headerlink" title="组件注解系列"></a>组件注解系列</h4><h5 id="Component-通用组件注解"><a href="#Component-通用组件注解" class="headerlink" title="@Component - 通用组件注解"></a>@Component - 通用组件注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>: Spring的基础组件注解</span></span><br><span class="line"><span class="comment"> * 功能：告诉Spring这是一个需要管理的Bean（对象）</span></span><br><span class="line"><span class="comment"> * 作用：Spring会自动创建这个类的实例，并放入容器中管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">(String to, String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件到: &quot;</span> + to);</span><br><span class="line">        System.out.println(<span class="string">&quot;内容: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以指定Bean的名称</span></span><br><span class="line"><span class="meta">@Component(&quot;customEmailService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEmailService</span> &#123;</span><br><span class="line">    <span class="comment">// Spring容器中这个Bean的名称是&quot;customEmailService&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service-业务逻辑层注解"><a href="#Service-业务逻辑层注解" class="headerlink" title="@Service - 业务逻辑层注解"></a>@Service - 业务逻辑层注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span>: 标记业务逻辑层组件</span></span><br><span class="line"><span class="comment"> * 功能：本质上等同于<span class="doctag">@Component</span>，但语义更明确</span></span><br><span class="line"><span class="comment"> * 用途：处理业务逻辑、调用数据访问层、实现业务规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 业务方法：创建用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑：验证用户名是否重复</span></span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建用户对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        user.setCreatedAt(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存到数据库</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 业务方法：用户登录验证</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> user != <span class="literal">null</span> &amp;&amp; user.getPassword().equals(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Repository-数据访问层注解"><a href="#Repository-数据访问层注解" class="headerlink" title="@Repository - 数据访问层注解"></a>@Repository - 数据访问层注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Repository</span>: 标记数据访问层组件</span></span><br><span class="line"><span class="comment"> * 功能：</span></span><br><span class="line"><span class="comment"> * 1. 等同于<span class="doctag">@Component</span>，但语义更明确</span></span><br><span class="line"><span class="comment"> * 2. 自动将数据访问异常转换为Spring的DataAccessException</span></span><br><span class="line"><span class="comment"> * 用途：处理数据库操作、文件操作等数据访问逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据访问方法：根据ID查找用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;id&#125;, </span><br><span class="line">            (rs, rowNum) -&gt; &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setId(rs.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setEmail(rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据访问方法：保存用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 新建用户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users (username, email, created_at) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line">            <span class="type">KeyHolder</span> <span class="variable">keyHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneratedKeyHolder</span>();</span><br><span class="line">            jdbcTemplate.update(connection -&gt; &#123;</span><br><span class="line">                <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">                ps.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">                ps.setString(<span class="number">2</span>, user.getEmail());</span><br><span class="line">                ps.setTimestamp(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">Timestamp</span>(user.getCreatedAt().getTime()));</span><br><span class="line">                <span class="keyword">return</span> ps;</span><br><span class="line">            &#125;, keyHolder);</span><br><span class="line">            user.setId(keyHolder.getKey().longValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 更新用户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE users SET username = ?, email = ? WHERE id = ?&quot;</span>;</span><br><span class="line">            jdbcTemplate.update(sql, user.getUsername(), user.getEmail(), user.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">existsByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT COUNT(*) FROM users WHERE username = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class, username);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller-Web控制器注解"><a href="#Controller-Web控制器注解" class="headerlink" title="@Controller - Web控制器注解"></a>@Controller - Web控制器注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>: 标记Web控制器组件</span></span><br><span class="line"><span class="comment"> * 功能：处理HTTP请求，返回视图（如JSP、Thymeleaf模板）</span></span><br><span class="line"><span class="comment"> * 用途：传统的MVC架构中的Controller层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/web&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理GET请求，返回用户列表页面</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">listUsers</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.getAllUsers();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user-list&quot;</span>; <span class="comment">// 返回视图名称，对应user-list.html模板</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理GET请求，显示用户详情页面</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userDetail</span><span class="params">(<span class="meta">@PathVariable</span> Long id, Model model)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user-detail&quot;</span>; <span class="comment">// 返回user-detail.html模板</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理POST请求，创建用户后重定向</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span> &#123;</span><br><span class="line">        userService.createUser(user.getUsername(), user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/web/users&quot;</span>; <span class="comment">// 重定向到用户列表页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖注入注解"><a href="#依赖注入注解" class="headerlink" title="依赖注入注解"></a>依赖注入注解</h4><h5 id="Autowired-自动装配注解"><a href="#Autowired-自动装配注解" class="headerlink" title="@Autowired - 自动装配注解"></a>@Autowired - 自动装配注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Autowired</span>: 自动依赖注入注解</span></span><br><span class="line"><span class="comment"> * 功能：Spring自动查找匹配的Bean并注入</span></span><br><span class="line"><span class="comment"> * 原理：按类型（Type）匹配，如果有多个同类型Bean则按名称匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 字段注入（最常用，但不推荐用于测试）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 构造器注入（推荐方式，便于测试和确保依赖不为null）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmailService emailService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InventoryService inventoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(EmailService emailService, InventoryService inventoryService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emailService = emailService;</span><br><span class="line">        <span class="built_in">this</span>.inventoryService = inventoryService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. Setter注入（可选依赖）</span></span><br><span class="line">    <span class="keyword">private</span> NotificationService notificationService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired(required = false)</span> <span class="comment">// required=false表示这个依赖是可选的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNotificationService</span><span class="params">(NotificationService notificationService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.notificationService = notificationService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(Long userId, List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用注入的依赖</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(userId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查库存</span></span><br><span class="line">        <span class="keyword">for</span> (OrderItem item : items) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inventoryService.isAvailable(item.getProductId(), item.getQuantity())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUser(user);</span><br><span class="line">        order.setItems(items);</span><br><span class="line">        order.setStatus(<span class="string">&quot;CREATED&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理支付</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">paymentSuccess</span> <span class="operator">=</span> paymentService.processPayment(order.getTotalAmount());</span><br><span class="line">        <span class="keyword">if</span> (paymentSuccess) &#123;</span><br><span class="line">            order.setStatus(<span class="string">&quot;PAID&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送邮件通知</span></span><br><span class="line">            emailService.sendEmail(user.getEmail(), <span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 可选的通知服务</span></span><br><span class="line">            <span class="keyword">if</span> (notificationService != <span class="literal">null</span>) &#123;</span><br><span class="line">                notificationService.sendPushNotification(user.getId(), <span class="string">&quot;您的订单已创建&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Qualifier-指定具体Bean"><a href="#Qualifier-指定具体Bean" class="headerlink" title="@Qualifier - 指定具体Bean"></a>@Qualifier - 指定具体Bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Qualifier</span>: 当有多个同类型Bean时，指定要注入哪一个</span></span><br><span class="line"><span class="comment"> * 场景：一个接口有多个实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">processPayment</span><span class="params">(BigDecimal amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类1</span></span><br><span class="line"><span class="meta">@Service(&quot;alipayService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayService</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processPayment</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用支付宝支付: &quot;</span> + amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类2</span></span><br><span class="line"><span class="meta">@Service(&quot;wechatPayService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPayService</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processPayment</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用微信支付: &quot;</span> + amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时指定具体的实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;alipayService&quot;)</span> <span class="comment">// 明确指定使用支付宝服务</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 或者使用构造器注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(<span class="meta">@Qualifier(&quot;wechatPayService&quot;)</span> PaymentService paymentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paymentService = paymentService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Value-属性值注入"><a href="#Value-属性值注入" class="headerlink" title="@Value - 属性值注入"></a>@Value - 属性值注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Value</span>: 注入配置文件中的属性值</span></span><br><span class="line"><span class="comment"> * 功能：从application.properties或application.yml读取配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// application.properties文件内容：</span></span><br><span class="line"><span class="comment">// app.name=我的应用</span></span><br><span class="line"><span class="comment">// app.version=1.0.0</span></span><br><span class="line"><span class="comment">// database.url=jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line"><span class="comment">// email.smtp.host=smtp.gmail.com</span></span><br><span class="line"><span class="comment">// email.smtp.port=587</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入简单属性值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appVersion;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入数字类型</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;email.smtp.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> smtpPort;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提供默认值（如果配置文件中没有该属性）</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.debug:false&#125;&quot;)</span> <span class="comment">// 默认值为false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> debugMode;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.max-users:1000&#125;&quot;)</span> <span class="comment">// 默认值为1000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxUsers;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入系统属性</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;java.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String javaVersion;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入环境变量</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;HOME&#125;&quot;)</span> <span class="comment">// Unix/Linux系统的HOME环境变量</span></span><br><span class="line">    <span class="keyword">private</span> String homeDirectory;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用名称: &quot;</span> + appName);</span><br><span class="line">        System.out.println(<span class="string">&quot;应用版本: &quot;</span> + appVersion);</span><br><span class="line">        System.out.println(<span class="string">&quot;SMTP端口: &quot;</span> + smtpPort);</span><br><span class="line">        System.out.println(<span class="string">&quot;调试模式: &quot;</span> + debugMode);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大用户数: &quot;</span> + maxUsers);</span><br><span class="line">        System.out.println(<span class="string">&quot;Java版本: &quot;</span> + javaVersion);</span><br><span class="line">        System.out.println(<span class="string">&quot;主目录: &quot;</span> + homeDirectory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-Spring-Boot注解详解"><a href="#6-2-Spring-Boot注解详解" class="headerlink" title="6.2 Spring Boot注解详解"></a>6.2 Spring Boot注解详解</h3><h5 id="SpringBootApplication-启动类注解"><a href="#SpringBootApplication-启动类注解" class="headerlink" title="@SpringBootApplication - 启动类注解"></a>@SpringBootApplication - 启动类注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>: Spring Boot应用的核心注解</span></span><br><span class="line"><span class="comment"> * 功能：这是一个组合注解，等价于以下三个注解的组合：</span></span><br><span class="line"><span class="comment"> * 1. <span class="doctag">@Configuration</span>: 标记这是一个配置类</span></span><br><span class="line"><span class="comment"> * 2. <span class="doctag">@EnableAutoConfiguration</span>: 启用Spring Boot的自动配置</span></span><br><span class="line"><span class="comment"> * 3. <span class="doctag">@ComponentScan</span>: 启用组件扫描</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动Spring Boot应用</span></span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这一行代码会：</span></span><br><span class="line"><span class="comment">         * 1. 创建Spring应用上下文</span></span><br><span class="line"><span class="comment">         * 2. 扫描当前包及子包中的@Component、@Service等注解</span></span><br><span class="line"><span class="comment">         * 3. 根据classpath中的依赖自动配置Bean</span></span><br><span class="line"><span class="comment">         * 4. 启动内嵌的Web服务器（如Tomcat）</span></span><br><span class="line"><span class="comment">         * 5. 部署应用到服务器上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要自定义配置，可以分别使用：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example.service&quot;, &quot;com.example.repository&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomApplication</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="REST-API注解系列"><a href="#REST-API注解系列" class="headerlink" title="REST API注解系列"></a>REST API注解系列</h5><h5 id="RestController-REST控制器注解"><a href="#RestController-REST控制器注解" class="headerlink" title="@RestController - REST控制器注解"></a>@RestController - REST控制器注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestController</span>: REST API控制器注解</span></span><br><span class="line"><span class="comment"> * 功能：等价于 <span class="doctag">@Controller</span> + <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment"> * 特点：方法返回的对象会自动转换为JSON格式返回给客户端</span></span><br><span class="line"><span class="comment"> * 用途：构建RESTful Web服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span> <span class="comment">// 基础路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /api/v1/users - 获取所有用户</span></span><br><span class="line"><span class="comment">     * 返回JSON格式的用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getAllUsers();</span><br><span class="line">        <span class="comment">// Spring会自动将List&lt;User&gt;转换为JSON数组返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /api/v1/users/123 - 根据ID获取用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span>: 从URL路径中提取参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(id);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(user); <span class="comment">// 返回200状态码和用户数据</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build(); <span class="comment">// 返回404状态码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST /api/v1/users - 创建新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestBody</span>: 将请求体中的JSON转换为Java对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> CreateUserRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.createUser(request.getUsername(), request.getEmail());</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(user); <span class="comment">// 返回201状态码</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().build(); <span class="comment">// 返回400状态码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PUT /api/v1/users/123 - 更新用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                                         <span class="meta">@RequestBody</span> UpdateUserRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.updateUser(id, request.getUsername(), request.getEmail());</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DELETE /api/v1/users/123 - 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.deleteUser(id);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.noContent().build(); <span class="comment">// 返回204状态码</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /api/v1/users?page=0&amp;size=10&amp;sort=username - 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span>: 从URL查询参数中提取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Page&lt;User&gt;&gt; <span class="title function_">getUsers</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;id&quot;)</span> String sort)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">PageRequest</span> <span class="variable">pageRequest</span> <span class="operator">=</span> PageRequest.of(page, size, Sort.by(sort));</span><br><span class="line">        Page&lt;User&gt; users = userService.getUsers(pageRequest);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HTTP方法映射注解详解"><a href="#HTTP方法映射注解详解" class="headerlink" title="HTTP方法映射注解详解"></a>HTTP方法映射注解详解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP方法映射注解详解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/products&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GetMapping</span>: 处理GET请求</span></span><br><span class="line"><span class="comment">     * 用途：获取资源，不会修改服务器状态</span></span><br><span class="line"><span class="comment">     * 特点：幂等（多次调用结果相同）、可缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span> <span class="comment">// 等价于 @RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">getAllProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostMapping</span>: 处理POST请求</span></span><br><span class="line"><span class="comment">     * 用途：创建新资源</span></span><br><span class="line"><span class="comment">     * 特点：非幂等（多次调用可能产生不同结果）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Product&gt; <span class="title function_">createProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">created</span> <span class="operator">=</span> productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(created);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PutMapping</span>: 处理PUT请求</span></span><br><span class="line"><span class="comment">     * 用途：完整更新资源（替换整个资源）</span></span><br><span class="line"><span class="comment">     * 特点：幂等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Product&gt; <span class="title function_">updateProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                                               <span class="meta">@RequestBody</span> Product product)</span> &#123;</span><br><span class="line">        product.setId(id);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">updated</span> <span class="operator">=</span> productService.save(product);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(updated);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PatchMapping</span>: 处理PATCH请求</span></span><br><span class="line"><span class="comment">     * 用途：部分更新资源（只更新指定字段）</span></span><br><span class="line"><span class="comment">     * 特点：幂等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PatchMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Product&gt; <span class="title function_">patchProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestBody</span> Map&lt;String, Object&gt; updates)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">updated</span> <span class="operator">=</span> productService.partialUpdate(id, updates);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(updated);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DeleteMapping</span>: 处理DELETE请求</span></span><br><span class="line"><span class="comment">     * 用途：删除资源</span></span><br><span class="line"><span class="comment">     * 特点：幂等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        productService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参数绑定注解详解"><a href="#参数绑定注解详解" class="headerlink" title="参数绑定注解详解"></a>参数绑定注解详解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span>: 从URL路径中提取变量</span></span><br><span class="line"><span class="comment">     * URL示例: /api/search/users/123/orders/456</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;userId&#125;/orders/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getUserOrder</span><span class="params">(<span class="meta">@PathVariable</span> Long userId, </span></span><br><span class="line"><span class="params">                            <span class="meta">@PathVariable</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.findByUserIdAndOrderId(userId, orderId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 路径变量名称与参数名不同时</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/products/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;productId&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> productService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span>: 从URL查询参数中提取值</span></span><br><span class="line"><span class="comment">     * URL示例: /api/search/products?keyword=手机&amp;category=电子&amp;minPrice=1000&amp;maxPrice=5000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/products&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">searchProducts</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> String keyword,                    // 必需参数</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String category, // 可选参数</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span> BigDecimal minPrice, // 有默认值</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;999999&quot;)</span> BigDecimal maxPrice)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> productService.search(keyword, category, minPrice, maxPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestHeader</span>: 从HTTP请求头中提取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/secure-data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">getSecureData</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String authToken,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false)</span> String userAgent,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(defaultValue = &quot;application/json&quot;)</span> String accept)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!isValidToken(authToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;安全数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestBody</span>: 将请求体内容绑定到对象</span></span><br><span class="line"><span class="comment">     * 常用于POST/PUT请求，自动将JSON转换为Java对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> CreateUserRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// Spring自动将请求体中的JSON转换为CreateUserRequest对象</span></span><br><span class="line">        <span class="keyword">return</span> userService.createUser(request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ModelAttribute</span>: 将请求参数绑定到对象（适用于表单提交）</span></span><br><span class="line"><span class="comment">     * 适用于传统的表单提交，参数以key=value形式提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users/form&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUserForm</span><span class="params">(<span class="meta">@ModelAttribute</span> User user, Model model)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">created</span> <span class="operator">=</span> userService.save(user);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, created);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user-created&quot;</span>; <span class="comment">// 返回视图名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="REST-API完整示例"><a href="#REST-API完整示例" class="headerlink" title="REST API完整示例"></a>REST API完整示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完整的REST API示例：用户管理</span></span><br><span class="line"><span class="comment"> * 展示了标准的RESTful设计模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/users&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 启用参数验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApiController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// GET /api/v1/users - 获取用户列表（支持分页和搜索）</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Page&lt;UserDto&gt;&gt;&gt; <span class="title function_">getUsers</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;id&quot;)</span> String sort,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;asc&quot;)</span> String direction,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String search)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Sort.<span class="type">Direction</span> <span class="variable">sortDirection</span> <span class="operator">=</span> <span class="string">&quot;desc&quot;</span>.equalsIgnoreCase(direction) ? </span><br><span class="line">                                     Sort.Direction.DESC : Sort.Direction.ASC;</span><br><span class="line">        <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(page, size, Sort.by(sortDirection, sort));</span><br><span class="line">        </span><br><span class="line">        Page&lt;UserDto&gt; users = userService.findUsers(search, pageable);</span><br><span class="line">        </span><br><span class="line">        ApiResponse&lt;Page&lt;UserDto&gt;&gt; response = ApiResponse.&lt;Page&lt;UserDto&gt;&gt;builder()</span><br><span class="line">            .success(<span class="literal">true</span>)</span><br><span class="line">            .message(<span class="string">&quot;用户列表获取成功&quot;</span>)</span><br><span class="line">            .data(users)</span><br><span class="line">            .timestamp(LocalDateTime.now())</span><br><span class="line">            .build();</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// GET /api/v1/users/123 - 获取单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;UserDto&gt;&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserDto</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(id);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;用户信息获取成功&quot;</span>, user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND)</span><br><span class="line">                .body(ApiResponse.error(<span class="string">&quot;用户不存在&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// POST /api/v1/users - 创建用户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;UserDto&gt;&gt; <span class="title function_">createUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Valid</span> <span class="meta">@RequestBody</span> CreateUserRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserDto</span> <span class="variable">user</span> <span class="operator">=</span> userService.createUser(request);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED)</span><br><span class="line">                .body(ApiResponse.success(<span class="string">&quot;用户创建成功&quot;</span>, user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DuplicateUsernameException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CONFLICT)</span><br><span class="line">                .body(ApiResponse.error(<span class="string">&quot;用户名已存在&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// PUT /api/v1/users/123 - 更新用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;UserDto&gt;&gt; <span class="title function_">updateUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UpdateUserRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserDto</span> <span class="variable">user</span> <span class="operator">=</span> userService.updateUser(id, request);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;用户更新成功&quot;</span>, user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND)</span><br><span class="line">                .body(ApiResponse.error(<span class="string">&quot;用户不存在&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// DELETE /api/v1/users/123 - 删除用户</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.deleteUser(id);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;用户删除成功&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND)</span><br><span class="line">                .body(ApiResponse.error(<span class="string">&quot;用户不存在&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// POST /api/v1/users/123/avatar - 上传用户头像</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;/avatar&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; <span class="title function_">uploadAvatar</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">avatarUrl</span> <span class="operator">=</span> userService.uploadAvatar(id, file);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(ApiResponse.success(<span class="string">&quot;头像上传成功&quot;</span>, avatarUrl));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">                .body(ApiResponse.error(<span class="string">&quot;头像上传失败&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的API响应格式</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.&lt;T&gt;builder()</span><br><span class="line">            .success(<span class="literal">true</span>)</span><br><span class="line">            .message(message)</span><br><span class="line">            .data(data)</span><br><span class="line">            .timestamp(LocalDateTime.now())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.&lt;T&gt;builder()</span><br><span class="line">            .success(<span class="literal">false</span>)</span><br><span class="line">            .message(message)</span><br><span class="line">            .data(data)</span><br><span class="line">            .timestamp(LocalDateTime.now())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-JPA-Hibernate注解详解"><a href="#6-3-JPA-Hibernate注解详解" class="headerlink" title="6.3 JPA&#x2F;Hibernate注解详解"></a>6.3 JPA&#x2F;Hibernate注解详解</h3><p>**JPA（Java Persistence API）**是Java的数据持久化标准，<strong>Hibernate</strong>是JPA的最流行实现。这些注解用于将Java对象映射到数据库表。</p><h4 id="核心实体注解"><a href="#核心实体注解" class="headerlink" title="核心实体注解"></a>核心实体注解</h4><h5 id="Entity-实体类注解"><a href="#Entity-实体类注解" class="headerlink" title="@Entity - 实体类注解"></a>@Entity - 实体类注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span>: 标记这是一个JPA实体类</span></span><br><span class="line"><span class="comment"> * 功能：告诉JPA这个类对应数据库中的一张表</span></span><br><span class="line"><span class="comment"> * 要求：</span></span><br><span class="line"><span class="comment"> * 1. 必须有一个无参构造器</span></span><br><span class="line"><span class="comment"> * 2. 必须有一个主键字段（用<span class="doctag">@Id</span>标记）</span></span><br><span class="line"><span class="comment"> * 3. 字段不能是final的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span> <span class="comment">// 可选：指定数据库表名，不指定则使用类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 标记主键字段</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// 主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;, nullable = false, unique = true, length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;created_at&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必须有无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.createdAt = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Table-表映射注解"><a href="#Table-表映射注解" class="headerlink" title="@Table - 表映射注解"></a>@Table - 表映射注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Table</span>: 指定实体对应的数据库表的详细信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(</span></span><br><span class="line"><span class="meta">    name = &quot;user_profiles&quot;,           // 表名</span></span><br><span class="line"><span class="meta">    catalog = &quot;myapp_db&quot;,            // 数据库名（可选）</span></span><br><span class="line"><span class="meta">    schema = &quot;public&quot;,               // 模式名（可选）</span></span><br><span class="line"><span class="meta">    uniqueConstraints = &#123;            // 唯一约束</span></span><br><span class="line"><span class="meta">        @UniqueConstraint(</span></span><br><span class="line"><span class="meta">            name = &quot;uk_user_email&quot;, </span></span><br><span class="line"><span class="meta">            columnNames = &#123;&quot;user_id&quot;, &quot;email&quot;&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">    &#125;,</span></span><br><span class="line"><span class="meta">    indexes = &#123;                      // 索引</span></span><br><span class="line"><span class="meta">        @Index(name = &quot;idx_user_email&quot;, columnList = &quot;email&quot;),</span></span><br><span class="line"><span class="meta">        @Index(name = &quot;idx_user_created&quot;, columnList = &quot;created_at&quot;)</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProfile</span> &#123;</span><br><span class="line">    <span class="comment">// 字段定义...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Id-和主键生成策略"><a href="#Id-和主键生成策略" class="headerlink" title="@Id 和主键生成策略"></a>@Id 和主键生成策略</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span>: 标记主键字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span>: 主键值生成策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 策略1: AUTO - 让JPA自动选择合适的策略</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 策略2: IDENTITY - 使用数据库的自增字段（MySQL的AUTO_INCREMENT）</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 策略3: SEQUENCE - 使用数据库序列（Oracle、PostgreSQL）</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;product_seq&quot;)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(name = &quot;product_seq&quot;, sequenceName = &quot;product_sequence&quot;, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 策略4: TABLE - 使用单独的表来生成主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.TABLE, generator = &quot;product_gen&quot;)</span></span><br><span class="line">    <span class="meta">@TableGenerator(name = &quot;product_gen&quot;, table = &quot;id_generator&quot;, </span></span><br><span class="line"><span class="meta">                   pkColumnName = &quot;gen_name&quot;, valueColumnName = &quot;gen_value&quot;,</span></span><br><span class="line"><span class="meta">                   pkColumnValue = &quot;product_id&quot;, allocationSize = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复合主键：使用@IdClass或@EmbeddedId</span></span><br><span class="line">    <span class="comment">// 方式1: @IdClass</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字段定义...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合主键类</span></span><br><span class="line"><span class="meta">@IdClass(UserProductId.class)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProduct</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键类必须实现Serializable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProductId</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必须重写equals和hashCode</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Column-字段映射注解"><a href="#Column-字段映射注解" class="headerlink" title="@Column - 字段映射注解"></a>@Column - 字段映射注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>: 指定字段映射到数据库列的详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本用法</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;user_name&quot;)</span>  <span class="comment">// 指定数据库列名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 详细配置</span></span><br><span class="line">    <span class="meta">@Column(</span></span><br><span class="line"><span class="meta">        name = &quot;email_address&quot;,      // 列名</span></span><br><span class="line"><span class="meta">        nullable = false,            // 不能为null（相当于NOT NULL约束）</span></span><br><span class="line"><span class="meta">        unique = true,              // 唯一约束</span></span><br><span class="line"><span class="meta">        length = 255,               // 字符串长度（varchar(255)）</span></span><br><span class="line"><span class="meta">        columnDefinition = &quot;TEXT&quot;   // 自定义列定义</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数字类型配置</span></span><br><span class="line">    <span class="meta">@Column(</span></span><br><span class="line"><span class="meta">        name = &quot;salary&quot;,</span></span><br><span class="line"><span class="meta">        precision = 10,  // 总位数</span></span><br><span class="line"><span class="meta">        scale = 2        // 小数位数（decimal(10,2)）</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal salary;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不需要映射到数据库的字段</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String tempPassword; <span class="comment">// 这个字段不会保存到数据库</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 时间类型</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;birth_date&quot;)</span></span><br><span class="line">    <span class="meta">@Temporal(TemporalType.DATE)</span>      <span class="comment">// 只保存日期部分</span></span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;created_at&quot;)</span></span><br><span class="line">    <span class="meta">@Temporal(TemporalType.TIMESTAMP)</span> <span class="comment">// 保存日期和时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;login_time&quot;)</span></span><br><span class="line">    <span class="meta">@Temporal(TemporalType.TIME)</span>      <span class="comment">// 只保存时间部分</span></span><br><span class="line">    <span class="keyword">private</span> Date loginTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举类型</span></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span>      <span class="comment">// 保存枚举的字符串值</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;        <span class="comment">// 如：ACTIVE, INACTIVE, BANNED</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Enumerated(EnumType.ORDINAL)</span>     <span class="comment">// 保存枚举的序号值</span></span><br><span class="line">    <span class="keyword">private</span> UserRole role;            <span class="comment">// 如：0, 1, 2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 大对象类型</span></span><br><span class="line">    <span class="meta">@Lob</span>  <span class="comment">// Large Object：用于存储大文本或二进制数据</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;profile_photo&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] photo;             <span class="comment">// 存储图片</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Lob</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;description&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;       <span class="comment">// 存储长文本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    ACTIVE, INACTIVE, BANNED, SUSPENDED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserRole</span> &#123;</span><br><span class="line">    USER, ADMIN, MODERATOR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联关系注解"><a href="#关联关系注解" class="headerlink" title="关联关系注解"></a>关联关系注解</h4><h5 id="OneToOne-一对一关系"><a href="#OneToOne-一对一关系" class="headerlink" title="@OneToOne - 一对一关系"></a>@OneToOne - 一对一关系</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对一关系：一个用户对应一个用户详情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主表（拥有外键的一方）</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@OneToOne</span>: 一对一关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JoinColumn</span>: 指定外键列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;profile_id&quot;, referencedColumnName = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserProfile profile;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProfile</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String bio;</span><br><span class="line">    <span class="keyword">private</span> String avatarUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双向关联：从UserProfile也能访问User</span></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;profile&quot;)</span> <span class="comment">// mappedBy指向User类中的profile字段</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUserWithProfile</span><span class="params">(String username, String firstName, String lastName)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建用户详情</span></span><br><span class="line">        <span class="type">UserProfile</span> <span class="variable">profile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserProfile</span>();</span><br><span class="line">        profile.setFirstName(firstName);</span><br><span class="line">        profile.setLastName(lastName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setProfile(profile);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置双向关联</span></span><br><span class="line">        profile.setUser(user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由于设置了cascade = CascadeType.ALL，保存user时会自动保存profile</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="OneToMany-一对多关系"><a href="#OneToMany-一对多关系" class="headerlink" title="@OneToMany - 一对多关系"></a>@OneToMany - 一对多关系</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对多关系：一个用户可以有多个订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;一&quot;的一方：User</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@OneToMany</span>: 一对多关系</span></span><br><span class="line"><span class="comment">     * mappedBy: 指向Order类中的user字段（表示外键在Order表中）</span></span><br><span class="line"><span class="comment">     * cascade: 级联操作（保存用户时自动处理订单）</span></span><br><span class="line"><span class="comment">     * fetch: 加载策略（LAZY表示需要时才加载订单列表）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利方法：添加订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orders.add(order);</span><br><span class="line">        order.setUser(<span class="built_in">this</span>); <span class="comment">// 设置双向关联</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利方法：移除订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orders.remove(order);</span><br><span class="line">        order.setUser(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;多&quot;的一方：Order</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> BigDecimal totalAmount;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ManyToOne</span>: 多对一关系（从Order的角度看，多个订单对应一个用户）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JoinColumn</span>: 指定外键列名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;user_id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(Long userId, BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(userId)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setTotalAmount(amount);</span><br><span class="line">        order.setOrderTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 建立关联关系</span></span><br><span class="line">        user.addOrder(order);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户的所有订单</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">getUserOrders</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(userId)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由于使用了LAZY加载，这里会触发数据库查询</span></span><br><span class="line">        <span class="keyword">return</span> user.getOrders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ManyToMany-多对多关系"><a href="#ManyToMany-多对多关系" class="headerlink" title="@ManyToMany - 多对多关系"></a>@ManyToMany - 多对多关系</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多对多关系：用户和角色的关系（一个用户可以有多个角色，一个角色可以分配给多个用户）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主控方：User</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ManyToMany</span>: 多对多关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JoinTable</span>: 指定中间表的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToMany(cascade = &#123;CascadeType.PERSIST, CascadeType.MERGE&#125;, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinTable(</span></span><br><span class="line"><span class="meta">        name = &quot;user_roles&quot;,                    // 中间表名</span></span><br><span class="line"><span class="meta">        joinColumns = @JoinColumn(name = &quot;user_id&quot;),     // 当前实体的外键列</span></span><br><span class="line"><span class="meta">        inverseJoinColumns = @JoinColumn(name = &quot;role_id&quot;) // 关联实体的外键列</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利方法：添加角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        roles.add(role);</span><br><span class="line">        role.getUsers().add(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利方法：移除角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        roles.remove(role);</span><br><span class="line">        role.getUsers().remove(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被控方：Role</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// ADMIN, USER, MODERATOR等</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mappedBy: 指向User类中的roles字段，表示这是关系的被控方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;roles&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带额外信息的多对多关系：用户和课程的关系（包含注册时间、成绩等额外信息）</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;UserCourse&gt; userCourses = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;course&quot;, cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;UserCourse&gt; userCourses = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间实体：包含额外信息</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user_courses&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCourse</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@EmbeddedId</span></span><br><span class="line">    <span class="keyword">private</span> UserCourseId id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@MapsId(&quot;userId&quot;)</span> <span class="comment">// 映射到复合主键的userId部分</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@MapsId(&quot;courseId&quot;)</span> <span class="comment">// 映射到复合主键的courseId部分</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;course_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 额外信息</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime enrollmentDate;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal grade;</span><br><span class="line">    <span class="keyword">private</span> String status; <span class="comment">// ENROLLED, COMPLETED, DROPPED</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合主键</span></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCourseId</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Long courseId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必须重写equals和hashCode</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="级联操作和获取策略"><a href="#级联操作和获取策略" class="headerlink" title="级联操作和获取策略"></a>级联操作和获取策略</h4><h5 id="级联操作（Cascade）"><a href="#级联操作（Cascade）" class="headerlink" title="级联操作（Cascade）"></a>级联操作（Cascade）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 级联操作类型：</span></span><br><span class="line"><span class="comment">     * CascadeType.PERSIST: 保存用户时，自动保存关联的订单</span></span><br><span class="line"><span class="comment">     * CascadeType.MERGE: 更新用户时，自动更新关联的订单</span></span><br><span class="line"><span class="comment">     * CascadeType.REMOVE: 删除用户时，自动删除关联的订单</span></span><br><span class="line"><span class="comment">     * CascadeType.REFRESH: 刷新用户时，自动刷新关联的订单</span></span><br><span class="line"><span class="comment">     * CascadeType.DETACH: 分离用户时，自动分离关联的订单</span></span><br><span class="line"><span class="comment">     * CascadeType.ALL: 包含所有上述操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除用户时不会删除订单（业务需要保留订单记录）</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;user&quot;, cascade = &#123;CascadeType.PERSIST, CascadeType.MERGE&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除用户时会删除用户详情（因为详情没有独立存在的意义）</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> UserProfile profile;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不会删除角色（角色是独立的实体，可能被其他用户使用）</span></span><br><span class="line">    <span class="meta">@ManyToMany(cascade = &#123;CascadeType.PERSIST, CascadeType.MERGE&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取策略（Fetch）"><a href="#获取策略（Fetch）" class="headerlink" title="获取策略（Fetch）"></a>获取策略（Fetch）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取策略：</span></span><br><span class="line"><span class="comment">     * FetchType.LAZY（懒加载）: 需要时才从数据库加载</span></span><br><span class="line"><span class="comment">     * FetchType.EAGER（急加载）: 立即从数据库加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 懒加载：获取用户时不立即加载订单列表，只有访问orders时才查询数据库</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;user&quot;, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 急加载：获取用户时立即加载用户详情</span></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="keyword">private</span> UserProfile profile;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认的获取策略：</span></span><br><span class="line">    <span class="comment">// @OneToOne, @ManyToOne: 默认是EAGER</span></span><br><span class="line">    <span class="comment">// @OneToMany, @ManyToMany: 默认是LAZY</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决N+1查询问题的方法</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用JOIN FETCH避免N+1问题</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u JOIN FETCH u.orders WHERE u.id = :id&quot;)</span></span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByIdWithOrders</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用@EntityGraph</span></span><br><span class="line">    <span class="meta">@EntityGraph(attributePaths = &#123;&quot;orders&quot;, &quot;profile&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u WHERE u.id = :id&quot;)</span></span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByIdWithOrdersAndProfile</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的JPA实体示例"><a href="#完整的JPA实体示例" class="headerlink" title="完整的JPA实体示例"></a>完整的JPA实体示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完整的JPA实体示例：电商系统的订单实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;orders&quot;)</span></span><br><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span> <span class="comment">// 启用审计功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;order_number&quot;, nullable = false, unique = true, length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String orderNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;total_amount&quot;, nullable = false, precision = 10, scale = 2)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal totalAmount;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;status&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> OrderStatus status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;user_id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;order&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Address shippingAddress;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 审计字段</span></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;created_at&quot;, nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;updated_at&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;created_by&quot;, updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;updated_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updatedBy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生命周期回调方法</span></span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (orderNumber == <span class="literal">null</span>) &#123;</span><br><span class="line">            orderNumber = generateOrderNumber();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="literal">null</span>) &#123;</span><br><span class="line">            status = OrderStatus.PENDING;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 更新前的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateOrderNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ORD&quot;</span> + System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrderItem</span><span class="params">(OrderItem item)</span> &#123;</span><br><span class="line">        orderItems.add(item);</span><br><span class="line">        item.setOrder(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeOrderItem</span><span class="params">(OrderItem item)</span> &#123;</span><br><span class="line">        orderItems.remove(item);</span><br><span class="line">        item.setOrder(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌入式值对象</span></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="meta">@Column(name = &quot;street&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;city&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;state&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;zip_code&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String zipCode;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column(name = &quot;country&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;</span><br><span class="line">    PENDING(<span class="string">&quot;待处理&quot;</span>),</span><br><span class="line">    CONFIRMED(<span class="string">&quot;已确认&quot;</span>),</span><br><span class="line">    SHIPPED(<span class="string">&quot;已发货&quot;</span>),</span><br><span class="line">    DELIVERED(<span class="string">&quot;已送达&quot;</span>),</span><br><span class="line">    CANCELLED(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line">    </span><br><span class="line">    OrderStatus(String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-Bean-Validation（数据验证）注解详解"><a href="#6-4-Bean-Validation（数据验证）注解详解" class="headerlink" title="6.4 Bean Validation（数据验证）注解详解"></a>6.4 Bean Validation（数据验证）注解详解</h3><p><strong>Bean Validation</strong>是Java的数据验证标准，用于验证Java对象的字段值是否符合预期。Spring Boot默认集成了Hibernate Validator（Bean Validation的实现）。</p><h4 id="基础验证注解"><a href="#基础验证注解" class="headerlink" title="基础验证注解"></a>基础验证注解</h4><h5 id="空值检查注解"><a href="#空值检查注解" class="headerlink" title="空值检查注解"></a>空值检查注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据验证注解示例：用户注册表单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegistrationDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NotNull</span>: 值不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NotEmpty</span>: 值不能为null且长度大于0（用于字符串、集合、数组）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NotBlank</span>: 值不能为null、空字符串或只包含空白字符（只用于字符串）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空白&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, message = &quot;用户名长度必须在3-20个字符之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 6, max = 50, message = &quot;密码长度必须在6-50个字符之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;确认密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String confirmPassword;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空白&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证示例</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 启用方法级别的验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserRegistrationDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">// @Valid 会自动触发验证，如果验证失败会抛出MethodArgumentNotValidException</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证通过后的业务逻辑</span></span><br><span class="line">        userService.registerUser(dto);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法参数验证</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/check-username&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Boolean&gt; <span class="title function_">checkUsername</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> <span class="meta">@NotBlank</span> <span class="meta">@Size(min = 3, max = 20)</span> String username)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">available</span> <span class="operator">=</span> userService.isUsernameAvailable(username);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(available);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数值范围验证注解"><a href="#数值范围验证注解" class="headerlink" title="数值范围验证注解"></a>数值范围验证注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;商品名称不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(max = 100, message = &quot;商品名称不能超过100个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值验证注解：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Min</span>: 最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Max</span>: 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DecimalMin</span>: 最小小数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DecimalMax</span>: 最大小数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Positive</span>: 正数（大于0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PositiveOrZero</span>: 正数或0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Negative</span>: 负数（小于0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@NegativeOrZero</span>: 负数或0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;价格不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMin(value = &quot;0.01&quot;, message = &quot;价格必须大于0.01&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;999999.99&quot;, message = &quot;价格不能超过999999.99&quot;)</span></span><br><span class="line">    <span class="meta">@Digits(integer = 6, fraction = 2, message = &quot;价格格式不正确，最多6位整数和2位小数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;库存数量不能为负数&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 10000, message = &quot;库存数量不能超过10000&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer stockQuantity;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Positive(message = &quot;重量必须为正数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PositiveOrZero(message = &quot;折扣不能为负数&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;1.0&quot;, message = &quot;折扣不能超过1.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal discount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串格式验证注解"><a href="#字符串格式验证注解" class="headerlink" title="字符串格式验证注解"></a>字符串格式验证注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContactDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串格式验证注解：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: 邮箱格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Pattern</span>: 正则表达式匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Size</span>: 字符串长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 50, message = &quot;姓名长度必须在2-50个字符之间&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[\\u4e00-\\u9fa5a-zA-Z\\s]+$&quot;, message = &quot;姓名只能包含中文、英文字母和空格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中国手机号验证</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1[3-9]\\d&#123;9&#125;$&quot;, message = &quot;手机号格式不正确&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 身份证号验证</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$&quot;, </span></span><br><span class="line"><span class="meta">             message = &quot;身份证号格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL验证</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^https?://.+&quot;, message = &quot;网址格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 邮政编码验证</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^\\d&#123;6&#125;$&quot;, message = &quot;邮政编码必须是6位数字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String zipCode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="时间日期验证注解"><a href="#时间日期验证注解" class="headerlink" title="时间日期验证注解"></a>时间日期验证注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;活动名称不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间验证注解：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Past</span>: 过去的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PastOrPresent</span>: 过去或现在的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Future</span>: 未来的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@FutureOrPresent</span>: 未来或现在的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;生日不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Past(message = &quot;生日必须是过去的日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;开始时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@FutureOrPresent(message = &quot;开始时间不能早于当前时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime startTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;结束时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Future(message = &quot;结束时间必须是未来的时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime endTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PastOrPresent(message = &quot;创建时间不能是未来时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高级验证功能"><a href="#高级验证功能" class="headerlink" title="高级验证功能"></a>高级验证功能</h4><h5 id="自定义验证注解"><a href="#自定义验证注解" class="headerlink" title="自定义验证注解"></a>自定义验证注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义验证注解：密码强度验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = PasswordValidator.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidPassword &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;密码强度不够：至少8位，包含大小写字母、数字和特殊字符&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证器实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ValidPassword, String&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_PATTERN</span> <span class="operator">=</span> </span><br><span class="line">        <span class="string">&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]&#123;8,&#125;$&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Pattern pattern;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ValidPassword constraintAnnotation)</span> &#123;</span><br><span class="line">        pattern = Pattern.compile(PASSWORD_PATTERN);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String password, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(password);</span><br><span class="line">        <span class="keyword">if</span> (!matcher.matches()) &#123;</span><br><span class="line">            <span class="comment">// 自定义错误消息</span></span><br><span class="line">            context.disableDefaultConstraintViolation();</span><br><span class="line">            </span><br><span class="line">            List&lt;String&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (password.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                errors.add(<span class="string">&quot;密码长度至少8位&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!password.matches(<span class="string">&quot;.*[a-z].*&quot;</span>)) &#123;</span><br><span class="line">                errors.add(<span class="string">&quot;必须包含小写字母&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!password.matches(<span class="string">&quot;.*[A-Z].*&quot;</span>)) &#123;</span><br><span class="line">                errors.add(<span class="string">&quot;必须包含大写字母&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!password.matches(<span class="string">&quot;.*\\d.*&quot;</span>)) &#123;</span><br><span class="line">                errors.add(<span class="string">&quot;必须包含数字&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!password.matches(<span class="string">&quot;.*[@$!%*?&amp;].*&quot;</span>)) &#123;</span><br><span class="line">                errors.add(<span class="string">&quot;必须包含特殊字符(@$!%*?&amp;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;密码要求：&quot;</span> + String.join(<span class="string">&quot;、&quot;</span>, errors);</span><br><span class="line">            context.buildConstraintViolationWithTemplate(errorMessage)</span><br><span class="line">                   .addConstraintViolation();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义验证注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangePasswordDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;当前密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String currentPassword;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ValidPassword</span> <span class="comment">// 使用自定义验证注解</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;新密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String newPassword;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;确认密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String confirmPassword;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类级别验证（跨字段验证）"><a href="#类级别验证（跨字段验证）" class="headerlink" title="类级别验证（跨字段验证）"></a>类级别验证（跨字段验证）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类级别验证注解：确保两个字段相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = FieldMatchValidator.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FieldMatch &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;字段不匹配&quot;</span>;</span><br><span class="line">    String <span class="title function_">first</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">second</span><span class="params">()</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证器实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldMatchValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;FieldMatch, Object&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String firstFieldName;</span><br><span class="line">    <span class="keyword">private</span> String secondFieldName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(FieldMatch constraintAnnotation)</span> &#123;</span><br><span class="line">        firstFieldName = constraintAnnotation.first();</span><br><span class="line">        secondFieldName = constraintAnnotation.second();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Object value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">firstObj</span> <span class="operator">=</span> getFieldValue(value, firstFieldName);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">secondObj</span> <span class="operator">=</span> getFieldValue(value, secondFieldName);</span><br><span class="line">            </span><br><span class="line">            <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> Objects.equals(firstObj, secondObj);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                context.disableDefaultConstraintViolation();</span><br><span class="line">                context.buildConstraintViolationWithTemplate(</span><br><span class="line">                    String.format(<span class="string">&quot;%s和%s必须相同&quot;</span>, firstFieldName, secondFieldName))</span><br><span class="line">                       .addPropertyNode(secondFieldName)</span><br><span class="line">                       .addConstraintViolation();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> valid;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object object, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类级别验证</span></span><br><span class="line"><span class="meta">@FieldMatch(first = &quot;password&quot;, second = &quot;confirmPassword&quot;, message = &quot;密码和确认密码必须相同&quot;)</span></span><br><span class="line"><span class="meta">@FieldMatch(first = &quot;email&quot;, second = &quot;confirmEmail&quot;, message = &quot;邮箱和确认邮箱必须相同&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegistrationDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, message = &quot;用户名长度必须在3-20个字符之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ValidPassword</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;确认密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String confirmPassword;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;确认邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String confirmEmail;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证组（Validation-Groups）"><a href="#验证组（Validation-Groups）" class="headerlink" title="验证组（Validation Groups）"></a>验证组（Validation Groups）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证组：在不同场景下应用不同的验证规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义验证组接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CreateGroup</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UpdateGroup</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ID只在更新时需要</span></span><br><span class="line">    <span class="meta">@NotNull(groups = UpdateGroup.class, message = &quot;更新时ID不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Null(groups = CreateGroup.class, message = &quot;创建时ID必须为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用户名在创建和更新时都需要验证</span></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;CreateGroup.class, UpdateGroup.class&#125;, message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, groups = &#123;CreateGroup.class, UpdateGroup.class&#125;, </span></span><br><span class="line"><span class="meta">          message = &quot;用户名长度必须在3-20个字符之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 密码只在创建时需要</span></span><br><span class="line">    <span class="meta">@NotBlank(groups = CreateGroup.class, message = &quot;创建时密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ValidPassword(groups = CreateGroup.class)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 邮箱在创建和更新时都需要验证</span></span><br><span class="line">    <span class="meta">@Email(groups = &#123;CreateGroup.class, UpdateGroup.class&#125;, message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;CreateGroup.class, UpdateGroup.class&#125;, message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器、getter、setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制器中使用验证组</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@Validated(CreateGroup.class)</span> <span class="meta">@RequestBody</span> UserDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 只验证CreateGroup组的注解</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.createUser(dto);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                                         <span class="meta">@Validated(UpdateGroup.class)</span> <span class="meta">@RequestBody</span> UserDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 只验证UpdateGroup组的注解</span></span><br><span class="line">        dto.setId(id);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.updateUser(dto);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理：统一处理验证错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理<span class="doctag">@Valid</span>验证失败的异常（请求体验证）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ValidationErrorResponse&gt; <span class="title function_">handleValidationException</span><span class="params">(</span></span><br><span class="line"><span class="params">            MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ValidationErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidationErrorResponse</span>();</span><br><span class="line">        errorResponse.setMessage(<span class="string">&quot;请求参数验证失败&quot;</span>);</span><br><span class="line">        errorResponse.setTimestamp(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集所有验证错误</span></span><br><span class="line">        Map&lt;String, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        ex.getBindingResult().getFieldErrors().forEach(error -&gt; &#123;</span><br><span class="line">            errors.put(error.getField(), error.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集类级别验证错误</span></span><br><span class="line">        ex.getBindingResult().getGlobalErrors().forEach(error -&gt; &#123;</span><br><span class="line">            errors.put(error.getObjectName(), error.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        errorResponse.setErrors(errors);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理<span class="doctag">@Validated</span>验证失败的异常（方法参数验证）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ValidationErrorResponse&gt; <span class="title function_">handleConstraintViolationException</span><span class="params">(</span></span><br><span class="line"><span class="params">            ConstraintViolationException ex)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ValidationErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidationErrorResponse</span>();</span><br><span class="line">        errorResponse.setMessage(<span class="string">&quot;参数验证失败&quot;</span>);</span><br><span class="line">        errorResponse.setTimestamp(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        ex.getConstraintViolations().forEach(violation -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">propertyPath</span> <span class="operator">=</span> violation.getPropertyPath().toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> violation.getMessage();</span><br><span class="line">            errors.put(propertyPath, message);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        errorResponse.setErrors(errors);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证错误响应类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationErrorResponse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; errors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-测试注解详解（JUnit-5-Spring-Boot-Test）"><a href="#6-5-测试注解详解（JUnit-5-Spring-Boot-Test）" class="headerlink" title="6.5 测试注解详解（JUnit 5 + Spring Boot Test）"></a>6.5 测试注解详解（JUnit 5 + Spring Boot Test）</h3><p><strong>JUnit 5</strong>是Java的标准测试框架，<strong>Spring Boot Test</strong>提供了Spring应用的测试支持。</p><h4 id="JUnit-5-核心注解"><a href="#JUnit-5-核心注解" class="headerlink" title="JUnit 5 核心注解"></a>JUnit 5 核心注解</h4><h5 id="基础测试注解"><a href="#基础测试注解" class="headerlink" title="基础测试注解"></a>基础测试注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JUnit 5 基础测试示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@BeforeAll</span>: 在所有测试方法之前执行一次（必须是static方法）</span></span><br><span class="line"><span class="comment">     * 用途：初始化昂贵的资源，如数据库连接池、文件读取等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUpClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化测试类资源&quot;</span>);</span><br><span class="line">        <span class="comment">// 例如：初始化数据库连接池</span></span><br><span class="line">        <span class="comment">// DatabasePool.initialize();</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterAll</span>: 在所有测试方法之后执行一次（必须是static方法）</span></span><br><span class="line"><span class="comment">     * 用途：清理昂贵的资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;清理测试类资源&quot;</span>);</span><br><span class="line">        <span class="comment">// 例如：关闭数据库连接池</span></span><br><span class="line">        <span class="comment">// DatabasePool.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@BeforeEach</span>: 在每个测试方法之前执行</span></span><br><span class="line"><span class="comment">     * 用途：为每个测试创建干净的环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        calculator = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;为测试方法准备Calculator实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterEach</span>: 在每个测试方法之后执行</span></span><br><span class="line"><span class="comment">     * 用途：清理每个测试产生的副作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        calculator = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;清理Calculator实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Test</span>: 标记这是一个测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DisplayName</span>: 为测试提供可读的名称（在测试报告中显示）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试两个正数相加&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddPositiveNumbers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given（准备）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expected</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When（执行）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">actual</span> <span class="operator">=</span> calculator.add(a, b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then（验证）</span></span><br><span class="line">        assertEquals(expected, actual, <span class="string">&quot;5 + 3 应该等于 8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试除法操作&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDivision</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">2.0</span>, calculator.divide(<span class="number">10</span>, <span class="number">5</span>), <span class="number">0.001</span>, <span class="string">&quot;10 / 5 应该等于 2.0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Test</span>注解的异常测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试除零异常&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDivisionByZero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 验证是否抛出预期的异常</span></span><br><span class="line">        <span class="type">ArithmeticException</span> <span class="variable">exception</span> <span class="operator">=</span> assertThrows(</span><br><span class="line">            ArithmeticException.class, </span><br><span class="line">            () -&gt; calculator.divide(<span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="string">&quot;除零应该抛出ArithmeticException&quot;</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证异常消息</span></span><br><span class="line">        assertEquals(<span class="string">&quot;/ by zero&quot;</span>, exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Disabled</span>: 禁用测试（类似于JUnit 4的<span class="doctag">@Ignore</span>）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled(&quot;暂时禁用，等待修复bug #123&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testComplexCalculation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个测试不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参数化测试注解"><a href="#参数化测试注解" class="headerlink" title="参数化测试注解"></a>参数化测试注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数化测试：使用不同的参数运行同一个测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParameterizedTestExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ParameterizedTest</span>: 参数化测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ValueSource</span>: 提供简单类型的参数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试字符串长度验证&quot;)</span></span><br><span class="line">    <span class="meta">@ValueSource(strings = &#123;&quot;&quot;, &quot;   &quot;, &quot;test&quot;, &quot;hello world&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testStringLength</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input.trim().isEmpty()) &#123;</span><br><span class="line">            assertTrue(input.trim().length() == <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            assertTrue(input.length() &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试数字是否为偶数&quot;)</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123;2, 4, 6, 8, 10&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testEvenNumbers</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        assertTrue(number % <span class="number">2</span> == <span class="number">0</span>, number + <span class="string">&quot; 应该是偶数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CsvSource</span>: 提供CSV格式的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试加法运算&quot;)</span></span><br><span class="line">    <span class="meta">@CsvSource(&#123;</span></span><br><span class="line"><span class="meta">        &quot;1, 2, 3&quot;,</span></span><br><span class="line"><span class="meta">        &quot;5, 7, 12&quot;, </span></span><br><span class="line"><span class="meta">        &quot;-2, 3, 1&quot;,</span></span><br><span class="line"><span class="meta">        &quot;0, 0, 0&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddition</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> expected)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        assertEquals(expected, calculator.add(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CsvFileSource</span>: 从CSV文件读取参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;从文件测试用户数据&quot;)</span></span><br><span class="line">    <span class="meta">@CsvFileSource(resources = &quot;/test-users.csv&quot;, numLinesToSkip = 1)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUserValidation</span><span class="params">(String username, String email, <span class="type">boolean</span> expectedValid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, email);</span><br><span class="line">        assertEquals(expectedValid, UserValidator.isValid(user));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MethodSource</span>: 使用方法提供参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试密码强度&quot;)</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;providePasswordTestCases&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testPasswordStrength</span><span class="params">(String password, <span class="type">boolean</span> expectedStrong)</span> &#123;</span><br><span class="line">        assertEquals(expectedStrong, PasswordValidator.isStrong(password));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提供测试参数的静态方法</span></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title function_">providePasswordTestCases</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">            Arguments.of(<span class="string">&quot;123456&quot;</span>, <span class="literal">false</span>),</span><br><span class="line">            Arguments.of(<span class="string">&quot;Password123!&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">            Arguments.of(<span class="string">&quot;weakpass&quot;</span>, <span class="literal">false</span>),</span><br><span class="line">            Arguments.of(<span class="string">&quot;Strong@Pass123&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@EnumSource</span>: 使用枚举值作为参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试用户状态&quot;)</span></span><br><span class="line">    <span class="meta">@EnumSource(UserStatus.class)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUserStatus</span><span class="params">(UserStatus status)</span> &#123;</span><br><span class="line">        assertNotNull(status);</span><br><span class="line">        assertNotNull(status.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ArgumentsSource</span>: 使用自定义参数提供者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试自定义参数&quot;)</span></span><br><span class="line">    <span class="meta">@ArgumentsSource(CustomArgumentsProvider.class)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithCustomProvider</span><span class="params">(String input, <span class="type">int</span> expectedLength)</span> &#123;</span><br><span class="line">        assertEquals(expectedLength, input.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义参数提供者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomArgumentsProvider</span> <span class="keyword">implements</span> <span class="title class_">ArgumentsProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Stream&lt;? <span class="keyword">extends</span> <span class="title class_">Arguments</span>&gt; provideArguments(ExtensionContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">            Arguments.of(<span class="string">&quot;hello&quot;</span>, <span class="number">5</span>),</span><br><span class="line">            Arguments.of(<span class="string">&quot;world&quot;</span>, <span class="number">5</span>),</span><br><span class="line">            Arguments.of(<span class="string">&quot;test&quot;</span>, <span class="number">4</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Boot-测试注解"><a href="#Spring-Boot-测试注解" class="headerlink" title="Spring Boot 测试注解"></a>Spring Boot 测试注解</h4><h5 id="完整应用上下文测试"><a href="#完整应用上下文测试" class="headerlink" title="完整应用上下文测试"></a>完整应用上下文测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootTest</span>: 加载完整的Spring应用上下文</span></span><br><span class="line"><span class="comment"> * 用途：集成测试，测试整个应用的交互</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest(</span></span><br><span class="line"><span class="meta">    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, // 随机端口启动Web服务器</span></span><br><span class="line"><span class="meta">    properties = &#123;&quot;spring.profiles.active=test&quot;&#125; // 激活test配置文件</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@TestPropertySource(locations = &quot;classpath:application-test.properties&quot;)</span> <span class="comment">// 额外的测试配置</span></span><br><span class="line"><span class="meta">@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)</span> <span class="comment">// 每个测试后重建上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceIntegrationTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate restTemplate; <span class="comment">// 用于HTTP请求测试</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port; <span class="comment">// 获取随机分配的端口号</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;集成测试：创建用户的完整流程&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateUserIntegration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;testuser&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;test@example.com&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.createUser(username, email);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertNotNull(user.getId());</span><br><span class="line">        assertEquals(username, user.getUsername());</span><br><span class="line">        assertEquals(email, user.getEmail());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证数据确实保存到数据库</span></span><br><span class="line">        Optional&lt;User&gt; savedUser = userRepository.findById(user.getId());</span><br><span class="line">        assertTrue(savedUser.isPresent());</span><br><span class="line">        assertEquals(username, savedUser.get().getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;HTTP接口集成测试&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUserApiEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">CreateUserRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateUserRequest</span>(<span class="string">&quot;apiuser&quot;</span>, <span class="string">&quot;api@example.com&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        ResponseEntity&lt;User&gt; response = restTemplate.postForEntity(</span><br><span class="line">            <span class="string">&quot;http://localhost:&quot;</span> + port + <span class="string">&quot;/api/users&quot;</span>,</span><br><span class="line">            request,</span><br><span class="line">            User.class</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertEquals(HttpStatus.CREATED, response.getStatusCode());</span><br><span class="line">        assertNotNull(response.getBody());</span><br><span class="line">        assertEquals(<span class="string">&quot;apiuser&quot;</span>, response.getBody().getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Web层测试"><a href="#Web层测试" class="headerlink" title="Web层测试"></a>Web层测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@WebMvcTest</span>: 只加载Web层组件（Controller、Filter、WebMvcConfigurer等）</span></span><br><span class="line"><span class="comment"> * 优点：启动速度快，只测试Web层逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebMvcTest(UserController.class)</span> <span class="comment">// 只加载UserController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserControllerTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc; <span class="comment">// 模拟HTTP请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService; <span class="comment">// 模拟Service层</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper; <span class="comment">// JSON序列化工具</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试获取用户API - 成功案例&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetUser_Success</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">mockUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;testuser&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>);</span><br><span class="line">        mockUser.setId(userId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">when</span>(userService.findById(userId)).thenReturn(mockUser);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/api/users/&#123;id&#125;&quot;</span>, userId)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).value(userId))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.username&quot;</span>).value(<span class="string">&quot;testuser&quot;</span>))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.email&quot;</span>).value(<span class="string">&quot;test@example.com&quot;</span>))</span><br><span class="line">                .andDo(print()); <span class="comment">// 打印请求和响应详情</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证Service方法被调用</span></span><br><span class="line">        verify(userService, times(<span class="number">1</span>)).findById(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试获取用户API - 用户不存在&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetUser_NotFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="number">999L</span>;</span><br><span class="line">        <span class="keyword">when</span>(userService.findById(userId)).thenThrow(<span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/api/users/&#123;id&#125;&quot;</span>, userId)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isNotFound());</span><br><span class="line">        </span><br><span class="line">        verify(userService, times(<span class="number">1</span>)).findById(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试创建用户API - 成功案例&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateUser_Success</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">CreateUserRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateUserRequest</span>(<span class="string">&quot;newuser&quot;</span>, <span class="string">&quot;new@example.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">createdUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;newuser&quot;</span>, <span class="string">&quot;new@example.com&quot;</span>);</span><br><span class="line">        createdUser.setId(<span class="number">1L</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">when</span>(userService.createUser(anyString(), anyString())).thenReturn(createdUser);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        mockMvc.perform(post(<span class="string">&quot;/api/users&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(request)))</span><br><span class="line">                .andExpect(status().isCreated())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.id&quot;</span>).exists())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.username&quot;</span>).value(<span class="string">&quot;newuser&quot;</span>))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.email&quot;</span>).value(<span class="string">&quot;new@example.com&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        verify(userService, times(<span class="number">1</span>)).createUser(<span class="string">&quot;newuser&quot;</span>, <span class="string">&quot;new@example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试创建用户API - 验证失败&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateUser_ValidationError</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Given: 无效的请求数据</span></span><br><span class="line">        <span class="type">CreateUserRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateUserRequest</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;invalid-email&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        mockMvc.perform(post(<span class="string">&quot;/api/users&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(request)))</span><br><span class="line">                .andExpect(status().isBadRequest())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.errors&quot;</span>).exists())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.errors.username&quot;</span>).exists())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.errors.email&quot;</span>).exists());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证Service方法没有被调用</span></span><br><span class="line">        verify(userService, never()).createUser(anyString(), anyString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据层测试"><a href="#数据层测试" class="headerlink" title="数据层测试"></a>数据层测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DataJpaTest</span>: 只加载JPA相关组件</span></span><br><span class="line"><span class="comment"> * 特点：使用内存数据库，事务自动回滚</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserRepositoryTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestEntityManager entityManager; <span class="comment">// 用于测试的EntityManager</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试根据用户名查找用户&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFindByUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;testuser&quot;</span>, <span class="string">&quot;test@example.com&quot;</span>);</span><br><span class="line">        entityManager.persistAndFlush(user); <span class="comment">// 立即保存到数据库</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        Optional&lt;User&gt; found = userRepository.findByUsername(<span class="string">&quot;testuser&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertTrue(found.isPresent());</span><br><span class="line">        assertEquals(<span class="string">&quot;testuser&quot;</span>, found.get().getUsername());</span><br><span class="line">        assertEquals(<span class="string">&quot;test@example.com&quot;</span>, found.get().getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试根据邮箱查找用户&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFindByEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user1@example.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user2&quot;</span>, <span class="string">&quot;user2@example.com&quot;</span>);</span><br><span class="line">        entityManager.persist(user1);</span><br><span class="line">        entityManager.persist(user2);</span><br><span class="line">        entityManager.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        Optional&lt;User&gt; found = userRepository.findByEmail(<span class="string">&quot;user1@example.com&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertTrue(found.isPresent());</span><br><span class="line">        assertEquals(<span class="string">&quot;user1&quot;</span>, found.get().getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试用户名是否存在&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testExistsByUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;existinguser&quot;</span>, <span class="string">&quot;existing@example.com&quot;</span>);</span><br><span class="line">        entityManager.persistAndFlush(user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        assertTrue(userRepository.existsByUsername(<span class="string">&quot;existinguser&quot;</span>));</span><br><span class="line">        assertFalse(userRepository.existsByUsername(<span class="string">&quot;nonexistentuser&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试自定义查询方法&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testFindActiveUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">activeUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;activeuser&quot;</span>, <span class="string">&quot;active@example.com&quot;</span>);</span><br><span class="line">        activeUser.setStatus(UserStatus.ACTIVE);</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">inactiveUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;inactiveuser&quot;</span>, <span class="string">&quot;inactive@example.com&quot;</span>);</span><br><span class="line">        inactiveUser.setStatus(UserStatus.INACTIVE);</span><br><span class="line">        </span><br><span class="line">        entityManager.persist(activeUser);</span><br><span class="line">        entityManager.persist(inactiveUser);</span><br><span class="line">        entityManager.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        List&lt;User&gt; activeUsers = userRepository.findByStatus(UserStatus.ACTIVE);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertEquals(<span class="number">1</span>, activeUsers.size());</span><br><span class="line">        assertEquals(<span class="string">&quot;activeuser&quot;</span>, activeUsers.get(<span class="number">0</span>).getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务层测试（使用Mock）"><a href="#服务层测试（使用Mock）" class="headerlink" title="服务层测试（使用Mock）"></a>服务层测试（使用Mock）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 纯单元测试：不加载Spring上下文，使用Mock对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span> <span class="comment">// JUnit 5 + Mockito</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository; <span class="comment">// Mock的Repository</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService; <span class="comment">// Mock的邮件服务</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder; <span class="comment">// Mock的密码编码器</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService; <span class="comment">// 被测试的服务（自动注入Mock对象）</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试创建用户 - 成功案例&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateUser_Success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;newuser&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;new@example.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rawPassword</span> <span class="operator">=</span> <span class="string">&quot;password123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> <span class="string">&quot;encoded_password&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">savedUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, email);</span><br><span class="line">        savedUser.setId(<span class="number">1L</span>);</span><br><span class="line">        savedUser.setPassword(encodedPassword);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Mock行为设置</span></span><br><span class="line">        <span class="keyword">when</span>(userRepository.existsByUsername(username)).thenReturn(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">when</span>(userRepository.existsByEmail(email)).thenReturn(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">when</span>(passwordEncoder.encode(rawPassword)).thenReturn(encodedPassword);</span><br><span class="line">        <span class="keyword">when</span>(userRepository.save(any(User.class))).thenReturn(savedUser);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userService.createUser(username, email, rawPassword);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertNotNull(result);</span><br><span class="line">        assertEquals(<span class="number">1L</span>, result.getId());</span><br><span class="line">        assertEquals(username, result.getUsername());</span><br><span class="line">        assertEquals(email, result.getEmail());</span><br><span class="line">        assertEquals(encodedPassword, result.getPassword());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证Mock对象的调用</span></span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).existsByUsername(username);</span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).existsByEmail(email);</span><br><span class="line">        verify(passwordEncoder, times(<span class="number">1</span>)).encode(rawPassword);</span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).save(any(User.class));</span><br><span class="line">        verify(emailService, times(<span class="number">1</span>)).sendWelcomeEmail(email, username);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试创建用户 - 用户名已存在&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateUser_UsernameExists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;existinguser&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;new@example.com&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">when</span>(userRepository.existsByUsername(username)).thenReturn(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When &amp; Then</span></span><br><span class="line">        <span class="type">DuplicateUsernameException</span> <span class="variable">exception</span> <span class="operator">=</span> assertThrows(</span><br><span class="line">            DuplicateUsernameException.class,</span><br><span class="line">            () -&gt; userService.createUser(username, email, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        assertEquals(<span class="string">&quot;用户名已存在: &quot;</span> + username, exception.getMessage());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证后续方法没有被调用</span></span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).existsByUsername(username);</span><br><span class="line">        verify(userRepository, never()).existsByEmail(anyString());</span><br><span class="line">        verify(userRepository, never()).save(any(User.class));</span><br><span class="line">        verify(emailService, never()).sendWelcomeEmail(anyString(), anyString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试用户登录 - 成功案例&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAuthenticate_Success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;testuser&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rawPassword</span> <span class="operator">=</span> <span class="string">&quot;password123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> <span class="string">&quot;encoded_password&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="string">&quot;test@example.com&quot;</span>);</span><br><span class="line">        user.setPassword(encodedPassword);</span><br><span class="line">        user.setStatus(UserStatus.ACTIVE);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">when</span>(userRepository.findByUsername(username)).thenReturn(Optional.of(user));</span><br><span class="line">        <span class="keyword">when</span>(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.authenticate(username, rawPassword);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertTrue(result);</span><br><span class="line">        </span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).findByUsername(username);</span><br><span class="line">        verify(passwordEncoder, times(<span class="number">1</span>)).matches(rawPassword, encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试用户登录 - 密码错误&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAuthenticate_WrongPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Given</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;testuser&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rawPassword</span> <span class="operator">=</span> <span class="string">&quot;wrongpassword&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> <span class="string">&quot;encoded_password&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="string">&quot;test@example.com&quot;</span>);</span><br><span class="line">        user.setPassword(encodedPassword);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">when</span>(userRepository.findByUsername(username)).thenReturn(Optional.of(user));</span><br><span class="line">        <span class="keyword">when</span>(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// When</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.authenticate(username, rawPassword);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Then</span></span><br><span class="line">        assertFalse(result);</span><br><span class="line">        </span><br><span class="line">        verify(userRepository, times(<span class="number">1</span>)).findByUsername(username);</span><br><span class="line">        verify(passwordEncoder, times(<span class="number">1</span>)).matches(rawPassword, encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-自定义注解"><a href="#7-自定义注解" class="headerlink" title="7. 自定义注解"></a>7. 自定义注解</h2><h3 id="7-1-创建自定义注解"><a href="#7-1-创建自定义注解" class="headerlink" title="7.1 创建自定义注解"></a>7.1 创建自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogExecutionTime &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enabled</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LogExecutionTime(&quot;用户查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@LogExecutionTime(value = &quot;数据处理&quot;, enabled = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-注解处理器实现"><a href="#7-2-注解处理器实现" class="headerlink" title="7.2 注解处理器实现"></a>7.2 注解处理器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogExecutionTimeAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogExecutionTimeAspect.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(logExecutionTime)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logExecutionTime</span><span class="params">(ProceedingJoinPoint joinPoint, </span></span><br><span class="line"><span class="params">                                  LogExecutionTime logExecutionTime)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!logExecutionTime.enabled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> logExecutionTime.value().isEmpty() ? </span><br><span class="line">                          joinPoint.getSignature().getName() : </span><br><span class="line">                          logExecutionTime.value();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            logger.info(<span class="string">&quot;操作 [&#123;&#125;] 执行时间: &#123;&#125;ms&quot;</span>, operation, endTime - startTime);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;操作 [&#123;&#125;] 执行失败&quot;</span>, operation, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-通过反射处理注解"><a href="#7-3-通过反射处理注解" class="headerlink" title="7.3 通过反射处理注解"></a>7.3 通过反射处理注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processAnnotations</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理类级别注解</span></span><br><span class="line">        <span class="keyword">if</span> (clazz.isAnnotationPresent(Component.class)) &#123;</span><br><span class="line">            <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> clazz.getAnnotation(Component.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;组件名称: &quot;</span> + component.value());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理方法级别注解</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(LogExecutionTime.class)) &#123;</span><br><span class="line">                <span class="type">LogExecutionTime</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(LogExecutionTime.class);</span><br><span class="line">                System.out.println(<span class="string">&quot;方法 &quot;</span> + method.getName() + </span><br><span class="line">                                 <span class="string">&quot; 需要记录执行时间: &quot;</span> + annotation.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理字段级别注解</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Autowired.class)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;字段 &quot;</span> + field.getName() + <span class="string">&quot; 需要自动注入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-注解的最佳实践"><a href="#8-注解的最佳实践" class="headerlink" title="8. 注解的最佳实践"></a>8. 注解的最佳实践</h2><h3 id="8-1-设计原则"><a href="#8-1-设计原则" class="headerlink" title="8.1 设计原则"></a>8.1 设计原则</h3><ol><li><strong>单一职责</strong>：每个注解只做一件事</li><li><strong>命名清晰</strong>：注解名称应该清楚表达其用途</li><li><strong>参数合理</strong>：提供合理的默认值，减少使用复杂度</li><li><strong>文档完善</strong>：为注解和参数提供详细文档</li></ol><h3 id="8-2-使用建议"><a href="#8-2-使用建议" class="headerlink" title="8.2 使用建议"></a>8.2 使用建议</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 不好的设计 - 职责不清</span></span><br><span class="line"><span class="meta">@AllInOne(log = true, validate = true, cache = true, retry = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 好的设计 - 职责分离</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="meta">@Validate</span></span><br><span class="line"><span class="meta">@Cacheable</span></span><br><span class="line"><span class="meta">@Retry(times = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-性能考虑"><a href="#8-3-性能考虑" class="headerlink" title="8.3 性能考虑"></a>8.3 性能考虑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射操作应该缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Method&gt;&gt; methodCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Method&gt; <span class="title function_">getAnnotatedMethods</span><span class="params">(Class&lt;?&gt; clazz, Class&lt;? extends Annotation&gt; annotation)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodCache.computeIfAbsent(clazz, k -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(k.getDeclaredMethods())</span><br><span class="line">                        .filter(m -&gt; m.isAnnotationPresent(annotation))</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-常见错误和解决方案"><a href="#9-常见错误和解决方案" class="headerlink" title="9. 常见错误和解决方案"></a>9. 常见错误和解决方案</h2><h3 id="9-1-注解丢失问题"><a href="#9-1-注解丢失问题" class="headerlink" title="9.1 注解丢失问题"></a>9.1 注解丢失问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题：运行时无法获取注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">// @Retention(RetentionPolicy.RUNTIME)  // 忘记添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决：正确设置保留策略</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-继承问题"><a href="#9-2-继承问题" class="headerlink" title="9.2 继承问题"></a>9.2 继承问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题：子类无法继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span>  <span class="comment">// 添加此注解使得注解可以被继承</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-重复注解"><a href="#9-3-重复注解" class="headerlink" title="9.3 重复注解"></a>9.3 重复注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8+ 支持重复注解</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Schedule &#123;</span><br><span class="line">    String <span class="title function_">time</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Schedules &#123;</span><br><span class="line">    Schedule[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Schedule(time = &quot;morning&quot;)</span></span><br><span class="line"><span class="meta">@Schedule(time = &quot;evening&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="10-学习建议"><a href="#10-学习建议" class="headerlink" title="10. 学习建议"></a>10. 学习建议</h2><h3 id="10-1-循序渐进"><a href="#10-1-循序渐进" class="headerlink" title="10.1 循序渐进"></a>10.1 循序渐进</h3><ol><li><strong>理解基础</strong>：先掌握内置注解的使用</li><li><strong>框架应用</strong>：学习Spring等框架中注解的使用</li><li><strong>自定义注解</strong>：尝试创建自己的注解</li><li><strong>深入原理</strong>：了解注解处理器和反射机制</li></ol><h3 id="10-2-实践项目"><a href="#10-2-实践项目" class="headerlink" title="10.2 实践项目"></a>10.2 实践项目</h3><ul><li>创建一个简单的Web项目，使用Spring Boot注解</li><li>实现一个日志记录的自定义注解</li><li>编写一个数据验证的注解系统</li></ul><h3 id="10-3-进阶学习"><a href="#10-3-进阶学习" class="headerlink" title="10.3 进阶学习"></a>10.3 进阶学习</h3><ul><li>学习APT（Annotation Processing Tool）</li><li>了解编译时代码生成</li><li>研究主流框架的注解实现原理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java注解是一个强大的元编程工具，它让代码更加简洁、可读性更强。相比C++的宏系统，Java注解提供了更安全、更强大的元数据机制。掌握注解的使用不仅能让你更好地使用现有框架，还能帮你设计出更优雅的API。</p><p>注解是对代码的描述，而不是代码本身。正确理解和使用注解，将大大提升Java编程水平。</p><hr><p><em>感谢阅读！如果这篇文章对你有帮助，欢迎点赞和分享。</em></p>]]></content>
    
    
    <summary type="html">yys-project中延伸学习Java注解，上传一下</summary>
    
    
    
    <category term="技术学习" scheme="http://summer-flower.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JAVA" scheme="http://summer-flower.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>云原生结课project</title>
    <link href="http://summer-flower.com/2025/08/12/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%BB%93%E8%AF%BEproject/"/>
    <id>http://summer-flower.com/2025/08/12/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%BB%93%E8%AF%BEproject/</id>
    <published>2025-08-12T07:52:32.000Z</published>
    <updated>2025-08-12T07:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📝-云原生结课project"><a href="#📝-云原生结课project" class="headerlink" title="📝 云原生结课project"></a>📝 云原生结课project</h1><blockquote><p>顺手上传暑课项目</p></blockquote><h2 id="1-项目组员信息"><a href="#1-项目组员信息" class="headerlink" title="1. 项目组员信息"></a>1. 项目组员信息</h2><table><thead><tr><th>姓名</th><th>学号</th><th>个人贡献</th></tr></thead><tbody><tr><td>黄睿智</td><td>231220075</td><td>part3 + 文档编写</td></tr><tr><td>白子敬</td><td>231220077</td><td>part1</td></tr><tr><td>陈翔宇</td><td>231220088</td><td>part2</td></tr></tbody></table><hr><h2 id="2-限流功能相关的关键代码和说明"><a href="#2-限流功能相关的关键代码和说明" class="headerlink" title="2. 限流功能相关的关键代码和说明"></a>2. 限流功能相关的关键代码和说明</h2><h3 id="2-1-限流系统架构概述"><a href="#2-1-限流系统架构概述" class="headerlink" title="2.1 限流系统架构概述"></a>2.1 限流系统架构概述</h3><p>本项目采用基于 <strong>Bucket4j + Redis</strong> 的分布式限流方案，实现了多层次的流量控制机制：</p><ul><li><strong>应用层限流</strong>：使用 Bucket4j 令牌桶算法</li><li><strong>连接层限流</strong>：Spring Boot Tomcat 连接池限制</li><li><strong>网络层限流</strong>：Kubernetes 网络策略和端口转发限制</li></ul><h3 id="2-2-核心限流组件"><a href="#2-2-核心限流组件" class="headerlink" title="2.2 核心限流组件"></a>2.2 核心限流组件</h3><h4 id="限流配置类-RateLimitConfig-java"><a href="#限流配置类-RateLimitConfig-java" class="headerlink" title="限流配置类 (RateLimitConfig.java)"></a>限流配置类 (RateLimitConfig.java)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;REDIS_HOST:$&#123;spring.redis.host:localhost&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;REDIS_PORT:$&#123;spring.redis.port:6379&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> redisPort;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> RedisConnectionFactory <span class="title function_">redisConnectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接从环境变量读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;REDIS_HOST&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span> || host.trim().isEmpty()) &#123;</span><br><span class="line">            host = redisHost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">portStr</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;REDIS_PORT&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> redisPort;</span><br><span class="line">        <span class="keyword">if</span> (portStr != <span class="literal">null</span> &amp;&amp; !portStr.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.parseInt(portStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="comment">// 使用默认端口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Spring Data Redis connecting to: &quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        </span><br><span class="line">        <span class="type">RedisStandaloneConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisStandaloneConfiguration</span>();</span><br><span class="line">        config.setHostName(host);</span><br><span class="line">        config.setPort(port);</span><br><span class="line">        </span><br><span class="line">        <span class="type">JedisConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisConnectionFactory</span>(config);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JedisPool <span class="title function_">jedisPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接从环境变量读取，如果为空则使用配置文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;REDIS_HOST&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span> || host.trim().isEmpty()) &#123;</span><br><span class="line">            host = redisHost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">portStr</span> <span class="operator">=</span> System.getenv(<span class="string">&quot;REDIS_PORT&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> redisPort;</span><br><span class="line">        <span class="keyword">if</span> (portStr != <span class="literal">null</span> &amp;&amp; !portStr.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.parseInt(portStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="comment">// 使用默认端口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Jedis Pool connecting to: &quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        </span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        config.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        config.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        config.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">        config.setTestOnReturn(<span class="literal">true</span>);</span><br><span class="line">        config.setTestWhileIdle(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config, host, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="限流服务类-RateLimiterService-java"><a href="#限流服务类-RateLimiterService-java" class="headerlink" title="限流服务类 (RateLimiterService.java)"></a>限流服务类 (RateLimiterService.java)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProxyManager&lt;<span class="type">byte</span>[]&gt; buckets;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] KEY = <span class="string">&quot;global-rate-limit-key&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RateLimiterService</span><span class="params">(ProxyManager&lt;<span class="type">byte</span>[]&gt; buckets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buckets = buckets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bucket <span class="title function_">resolveBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buckets.builder().build(KEY, getConfigSupplier());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Supplier&lt;BucketConfiguration&gt; <span class="title function_">getConfigSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; BucketConfiguration.builder()</span><br><span class="line">                .addLimit(Bandwidth.classic(</span><br><span class="line">                    <span class="number">100</span>, </span><br><span class="line">                    Refill.greedy(<span class="number">100</span>, Duration.ofSeconds(<span class="number">1</span>)))</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="限流拦截器-RateLimitInterceptor-java"><a href="#限流拦截器-RateLimitInterceptor-java" class="headerlink" title="限流拦截器 (RateLimitInterceptor.java)"></a>限流拦截器 (RateLimitInterceptor.java)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RateLimiterService rateLimiterService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                            HttpServletResponse response, </span></span><br><span class="line"><span class="params">                            Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Bucket</span> <span class="variable">bucket</span> <span class="operator">=</span> rateLimiterService.resolveBucket();</span><br><span class="line">        <span class="keyword">if</span> (bucket.tryConsume(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Too many requests&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Web-配置类-WebMvcConfig-java"><a href="#Web-配置类-WebMvcConfig-java" class="headerlink" title="Web 配置类 (WebMvcConfig.java)"></a>Web 配置类 (WebMvcConfig.java)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RateLimitInterceptor rateLimitInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册限流拦截器并指定拦截路径</span></span><br><span class="line">        registry.addInterceptor(rateLimitInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello&quot;</span>)  <span class="comment">// 只拦截/hello路径</span></span><br><span class="line">                .order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-应用配置"><a href="#2-3-应用配置" class="headerlink" title="2.3 应用配置"></a>2.3 应用配置</h3><h4 id="application-properties-限流相关配置"><a href="#application-properties-限流相关配置" class="headerlink" title="application.properties 限流相关配置"></a>application.properties 限流相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">prometheus-test-demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 统一使用8998端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8998</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Redis 配置 - 直接使用环境变量</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">$&#123;REDIS_HOST:localhost&#125;</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">$&#123;REDIS_PORT:6379&#125;</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">2000ms</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 强制使用 Jedis 客户端</span></span><br><span class="line"><span class="attr">spring.redis.jedis.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Actuator 配置</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">health,info,prometheus,metrics</span></span><br><span class="line"><span class="attr">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 限流相关配置</span></span><br><span class="line"><span class="attr">rate.limit.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">rate.limit.global.key</span>=<span class="string">global-rate-limit-key</span></span><br><span class="line"><span class="attr">rate.limit.capacity</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">rate.limit.refill.tokens</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">rate.limit.refill.period</span>=<span class="string">1s</span></span><br></pre></td></tr></table></figure><h3 id="2-4-限流工作流程"><a href="#2-4-限流工作流程" class="headerlink" title="2.4 限流工作流程"></a>2.4 限流工作流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户请求 → Spring MVC → RateLimitInterceptor → RateLimiterService</span><br><span class="line">                                ↓</span><br><span class="line">                          检查 Redis 令牌桶</span><br><span class="line">                                ↓</span><br><span class="line">                    有令牌？─── YES ──→ 继续处理 → HelloController</span><br><span class="line">                        │</span><br><span class="line">                        NO</span><br><span class="line">                        ↓</span><br><span class="line">                  返回 HTTP 429 错误</span><br></pre></td></tr></table></figure><h3 id="2-5-限流算法说明"><a href="#2-5-限流算法说明" class="headerlink" title="2.5 限流算法说明"></a>2.5 限流算法说明</h3><p><strong>令牌桶算法 (Token Bucket Algorithm)：</strong></p><ol><li><strong>初始化</strong>：创建容量为100的令牌桶</li><li><strong>令牌补充</strong>：每秒向桶中添加100个令牌</li><li><strong>请求处理</strong>：每个请求尝试消费1个令牌</li><li><strong>限流判断</strong>：<ul><li>有令牌：允许请求，消费令牌</li><li>无令牌：拒绝请求，返回429状态码</li></ul></li></ol><hr><h2 id="3-Dockerfile及K8s-编排文件"><a href="#3-Dockerfile及K8s-编排文件" class="headerlink" title="3. Dockerfile及K8s 编排文件"></a>3. Dockerfile及K8s 编排文件</h2><h3 id="3-1-Dockerfile"><a href="#3-1-Dockerfile" class="headerlink" title="3.1 Dockerfile"></a>3.1 Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：构建阶段 - 统一使用Java 11</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.9</span>.<span class="number">6</span>-eclipse-temurin-<span class="number">17</span> AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/mymaven</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Maven 配置文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /root/.m2</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> settings.xml /root/.m2/settings.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制pom.xml和源代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src ./src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建项目</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn -B  clean package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：运行阶段</span></span><br><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17</span>-jre-centos7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从构建阶段复制构建结果</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /usr/src/mymaven/target/prometheus-test-demo-0.0.1-SNAPSHOT.jar ./prometheus-test-demo-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令 - 使用Java 11兼容的JVM参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;set -e &amp;&amp; java -XX:+PrintFlagsFinal \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           -XX:+HeapDumpOnOutOfMemoryError \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           -XX:HeapDumpPath=/heapdump/heapdump.hprof \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           -XX:+UseContainerSupport \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           -XX:MaxRAMPercentage=75.0 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           -Djava.security.egd=file:/dev/./urandom \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">                                           <span class="variable">$JAVA_OPTS</span> -jar prometheus-test-demo-0.0.1-SNAPSHOT.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>Dockerfile 设计说明：</strong></p><ul><li>构建项目时删去原demo的 -DskipTests 参数，直接运行测试样例，因此在 Jenkinsfile 中不再执行test。</li><li>下图为测试运行结果</li><li><img src="/../photos/posts/yys/image.png" alt="alt text"><img src="/../photos/posts/yys/image-1.png" alt="alt text"></li></ul><h3 id="3-2-Kubernetes-部署文件-prometheus-test-demo-yaml"><a href="#3-2-Kubernetes-部署文件-prometheus-test-demo-yaml" class="headerlink" title="3.2 Kubernetes 部署文件 (prometheus-test-demo.yaml)"></a>3.2 Kubernetes 部署文件 (prometheus-test-demo.yaml)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;8998&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scheme:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wait-for-redis</span></span><br><span class="line">        <span class="string">../photos/posts/yys/image:</span> <span class="string">busybox:1.36</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          until nc -z redis-service 6379; do</span></span><br><span class="line"><span class="string">            echo &quot;Waiting for Redis to be ready...&quot;</span></span><br><span class="line"><span class="string">            sleep 2</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string">          echo &quot;Redis is ready!&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../photos/posts/yys/image:</span> <span class="number">172.22</span><span class="number">.83</span><span class="number">.19</span><span class="string">:30003/nju08/prometheus-test-demo:&#123;VERSION&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8998</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_HOST</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;redis-service&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PORT</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;6379&quot;</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span>    </span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span>        </span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;512Mi&quot;</span>    </span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span>        </span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/actuator/health</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8998</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">120</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/actuator/health</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8998</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">90</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="string">../photos/posts/yys/image:</span> <span class="string">redis:7-alpine</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;50m&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">redis-server</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--appendonly</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-service</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">management-port</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8998</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8998</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>K8s 配置说明：</strong></p><ul><li>使用 InitContainer 确保 Redis 先启动</li><li>配置了资源限制防止资源耗尽</li><li>设置了健康检查确保服务可用</li></ul><h3 id="3-3-ServiceMonitor-配置-prometheus-test-serviceMonitor-yaml"><a href="#3-3-ServiceMonitor-配置-prometheus-test-serviceMonitor-yaml" class="headerlink" title="3.3 ServiceMonitor 配置 (prometheus-test-serviceMonitor.yaml)"></a>3.3 ServiceMonitor 配置 (prometheus-test-serviceMonitor.yaml)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">MONITOR_NAMESPACE</span>&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">tcp</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="4-Jenkins-持续集成、持续部署、持续测试配置文件与说明"><a href="#4-Jenkins-持续集成、持续部署、持续测试配置文件与说明" class="headerlink" title="4. Jenkins 持续集成、持续部署、持续测试配置文件与说明"></a>4. Jenkins 持续集成、持续部署、持续测试配置文件与说明</h2><h3 id="4-1-Jenkinsfile-完整配置"><a href="#4-1-Jenkinsfile-完整配置" class="headerlink" title="4.1 Jenkinsfile 完整配置"></a>4.1 Jenkinsfile 完整配置</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 环境变量管理</span></span><br><span class="line">    environment &#123;</span><br><span class="line">        HARBOR_REGISTRY = <span class="string">&#x27;172.22.83.19:30003&#x27;</span></span><br><span class="line">        IMAGE_NAME = <span class="string">&#x27;nju08/prometheus-test-demo&#x27;</span></span><br><span class="line">        GIT_REPO = <span class="string">&#x27;https://gitee.com/grissom_sh/prometheus-test-demo.git&#x27;</span></span><br><span class="line">        NAMESPACE = <span class="string">&#x27;nju08&#x27;</span></span><br><span class="line">        MONITOR_NAMESPACE = <span class="string">&#x27;nju08&#x27;</span></span><br><span class="line">        HARBOR_USER = <span class="string">&#x27;nju08&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;HARBOR_PASS&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Harbor login password&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Clone Code&#x27;</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                label <span class="string">&#x27;master&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;1.Git Clone Code&quot;</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        git <span class="attr">url:</span> <span class="string">&quot;$&#123;env.GIT_REPO&#125;&quot;</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        error <span class="string">&quot;Git clone failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;Image Build&#x27;</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                label <span class="string">&#x27;master&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;2.Image Build Stage (包含 Maven 构建)&quot;</span></span><br><span class="line">                timeout(<span class="attr">time:</span> <span class="number">30</span>, <span class="attr">unit:</span> <span class="string">&#x27;MINUTES&#x27;</span>) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        retry(<span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 使用 Dockerfile 多阶段构建，包含 Maven 构建和镜像构建</span></span><br><span class="line">                                sh <span class="string">&quot;docker build --cache-from $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:latest -t $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:$&#123;BUILD_NUMBER&#125; -t $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:latest .&quot;</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                echo <span class="string">&quot;Docker build attempt failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                                <span class="keyword">throw</span> e</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Push&#x27;</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                label <span class="string">&#x27;master&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;3.Push Docker Image Stage&quot;</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sh <span class="string">&quot;echo &#x27;$&#123;HARBOR_PASS&#125;&#x27; | docker login --username=$&#123;HARBOR_USER&#125; --password-stdin $&#123;env.HARBOR_REGISTRY&#125;&quot;</span></span><br><span class="line">                        sh <span class="string">&quot;docker push $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:$&#123;BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">                        sh <span class="string">&quot;docker push $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:latest&quot;</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        error <span class="string">&quot;Docker push failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;Deploy to Kubernetes&#x27;</span>) &#123;</span><br><span class="line">            agent &#123;</span><br><span class="line">                label <span class="string">&#x27;slave&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                container(<span class="string">&#x27;jnlp-kubectl&#x27;</span>) &#123;</span><br><span class="line">                    script &#123;</span><br><span class="line">                        stage(<span class="string">&#x27;Clone YAML&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;4. Git Clone YAML To Slave&quot;</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 使用 checkout scm 获取当前流水线的源代码</span></span><br><span class="line">                                checkout scm</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                error <span class="string">&quot;Git clone on slave failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        stage(<span class="string">&#x27;Config YAML&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;5. Change YAML File Stage&quot;</span></span><br><span class="line">                            sh <span class="string">&#x27;sed -i &quot;s/&#123;VERSION&#125;/$&#123;BUILD_NUMBER&#125;/g&quot; ./jenkins/scripts/prometheus-test-demo.yaml&#x27;</span></span><br><span class="line">                            sh <span class="string">&#x27;sed -i &quot;s/&#123;NAMESPACE&#125;/$&#123;NAMESPACE&#125;/g&quot; ./jenkins/scripts/prometheus-test-demo.yaml&#x27;</span></span><br><span class="line">                            sh <span class="string">&#x27;sed -i &quot;s/&#123;MONITOR_NAMESPACE&#125;/$&#123;MONITOR_NAMESPACE&#125;/g&quot; ./jenkins/scripts/prometheus-test-serviceMonitor.yaml&#x27;</span></span><br><span class="line">                            sh <span class="string">&#x27;sed -i &quot;s/&#123;NAMESPACE&#125;/$&#123;NAMESPACE&#125;/g&quot; ./jenkins/scripts/prometheus-test-serviceMonitor.yaml&#x27;</span></span><br><span class="line"></span><br><span class="line">                            sh <span class="string">&#x27;cat ./jenkins/scripts/prometheus-test-demo.yaml&#x27;</span></span><br><span class="line">                            sh <span class="string">&#x27;cat ./jenkins/scripts/prometheus-test-serviceMonitor.yaml&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        stage(<span class="string">&#x27;Deploy prometheus-test-demo&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;6. Deploy To K8s Stage&quot;</span></span><br><span class="line">                            sh <span class="string">&#x27;kubectl apply -f ./jenkins/scripts/prometheus-test-demo.yaml&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        stage(<span class="string">&#x27;Wait for Redis&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;6.5. Wait for Redis to be ready&quot;</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                sh <span class="string">&quot;kubectl wait --for=condition=ready pod -l app=redis -n $&#123;NAMESPACE&#125; --timeout=120s&quot;</span></span><br><span class="line">                                echo <span class="string">&quot;Redis is ready!&quot;</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                echo <span class="string">&quot;Redis readiness check failed, but continuing: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        stage(<span class="string">&#x27;Deploy prometheus-test-demo ServiceMonitor&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;7. Deploy ServiceMonitor To K8s Stage&quot;</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                sh <span class="string">&#x27;kubectl apply -f ./jenkins/scripts/prometheus-test-serviceMonitor.yaml&#x27;</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                error <span class="string">&quot;ServiceMonitor deployment failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        stage(<span class="string">&#x27;Health Check&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;8. Health Check Stage&quot;</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                sh <span class="string">&quot;kubectl wait --for=condition=ready pod -l app=prometheus-test-demo -n $&#123;NAMESPACE&#125; --timeout=300s&quot;</span></span><br><span class="line">                                echo <span class="string">&quot;Application is healthy and ready!&quot;</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                error <span class="string">&quot;Health check failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通知机制和清理</span></span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo <span class="string">&#x27;🎉 Pipeline succeeded! Application deployed successfully.&#x27;</span></span><br><span class="line">            script &#123;</span><br><span class="line">                echo <span class="string">&quot;✅ Deployment Summary:&quot;</span></span><br><span class="line">                echo <span class="string">&quot;   - Image: $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:$&#123;BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;   - Namespace: $&#123;NAMESPACE&#125;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;   - Monitor Namespace: $&#123;MONITOR_NAMESPACE&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo <span class="string">&#x27;❌ Pipeline failed! Please check the logs for details.&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo <span class="string">&#x27;🔄 Pipeline execution completed.&#x27;</span></span><br><span class="line">            <span class="comment">// 清理本地镜像以节省磁盘空间</span></span><br><span class="line">            script &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sh <span class="string">&quot;docker rmi $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:$&#123;BUILD_NUMBER&#125; || true&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;docker rmi $&#123;env.HARBOR_REGISTRY&#125;/$&#123;env.IMAGE_NAME&#125;:latest || true&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;docker system prune -f || true&quot;</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    echo <span class="string">&quot;Image cleanup failed: $&#123;e.getMessage()&#125;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Jenkins-流水线说明"><a href="#4-2-Jenkins-流水线说明" class="headerlink" title="4.2 Jenkins 流水线说明"></a>4.2 Jenkins 流水线说明</h3><p><strong>流水线各阶段详解：</strong></p><ol><li><p><strong>Checkout 阶段</strong>：</p><ul><li>拉取源代码</li><li>生成构建版本号</li></ul></li><li><p><strong>Build 阶段</strong>：</p><ul><li>Maven 编译和测试</li><li>生成构建产物</li></ul></li><li><p><strong>Docker Build &amp; Push 阶段</strong>：</p><ul><li>构建容器镜像</li><li>推送到镜像仓库</li></ul></li><li><p><strong>Deploy to Kubernetes 阶段</strong>：</p><ul><li>配置 K8s 部署文件</li><li>部署应用和依赖服务</li><li>健康检查</li></ul></li></ol><h3 id="4-3-CI-CD-流程验证截图位置"><a href="#4-3-CI-CD-流程验证截图位置" class="headerlink" title="4.3 CI&#x2F;CD 流程验证截图位置"></a>4.3 CI&#x2F;CD 流程验证截图位置</h3><p><strong>镜像构建截图：</strong><br><img src="/../photos/posts/yys/image-4.png" alt="alt text"></p><p><strong>构建成功截图：</strong><br><img src="/../photos/posts/yys/image-2.png" alt="alt text"></p><p><strong>部署成功截图：</strong><br><img src="/../photos/posts/yys/image-3.png" alt="alt text"></p><hr><h2 id="5-监控指标采集的配置及说明；Grafana-监控大屏截图"><a href="#5-监控指标采集的配置及说明；Grafana-监控大屏截图" class="headerlink" title="5. 监控指标采集的配置及说明；Grafana 监控大屏截图"></a>5. 监控指标采集的配置及说明；Grafana 监控大屏截图</h2><h3 id="5-1-Prometheus-监控配置"><a href="#5-1-Prometheus-监控配置" class="headerlink" title="5.1 Prometheus 监控配置"></a>5.1 Prometheus 监控配置</h3><h4 id="5-1-1-应用监控注解配置"><a href="#5-1-1-应用监控注解配置" class="headerlink" title="5.1.1 应用监控注解配置"></a>5.1.1 应用监控注解配置</h4><p>应用 Pod 配置了 Prometheus 自动发现注解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">prometheus.io/path:</span> <span class="string">/actuator/prometheus</span>    <span class="comment"># 指标采集路径</span></span><br><span class="line">  <span class="attr">prometheus.io/port:</span> <span class="string">&quot;8998&quot;</span>                  <span class="comment"># 监控端口</span></span><br><span class="line">  <span class="attr">prometheus.io/scheme:</span> <span class="string">http</span>                  <span class="comment"># 协议</span></span><br><span class="line">  <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span>               <span class="comment"># 启用自动发现</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-ServiceMonitor-配置"><a href="#5-1-2-ServiceMonitor-配置" class="headerlink" title="5.1.2 ServiceMonitor 配置"></a>5.1.2 ServiceMonitor 配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> &#123;<span class="string">MONITOR_NAMESPACE</span>&#125;</span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">tcp</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus-test-demo</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="string">NAMESPACE</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-关键监控指标"><a href="#5-2-关键监控指标" class="headerlink" title="5.2 关键监控指标"></a>5.2 关键监控指标</h3><h4 id="5-2-1-应用性能指标"><a href="#5-2-1-应用性能指标" class="headerlink" title="5.2.1 应用性能指标"></a>5.2.1 应用性能指标</h4><ul><li><p><strong>HTTP 请求指标</strong>：</p><ul><li><code>http_server_requests_seconds_count</code> - 请求总数</li><li><code>http_server_requests_seconds_sum</code> - 请求总耗时</li><li><code>http_server_requests_seconds_max</code> - 最大响应时间</li></ul></li><li><p><strong>JVM 指标</strong>：</p><ul><li><code>jvm_memory_used_bytes</code> - JVM 内存使用</li><li><code>jvm_gc_pause_seconds</code> - GC 暂停时间</li><li><code>jvm_threads_live_threads</code> - 活跃线程数</li></ul></li></ul><h4 id="5-2-2-限流相关指标"><a href="#5-2-2-限流相关指标" class="headerlink" title="5.2.2 限流相关指标"></a>5.2.2 限流相关指标</h4><ul><li><p><strong>Bucket4j 指标</strong>（如果配置了 Micrometer 集成）：</p><ul><li><code>bucket4j_consumed_tokens_total</code> - 消费的令牌总数</li><li><code>bucket4j_rejected_requests_total</code> - 被拒绝的请求数</li><li><code>bucket4j_available_tokens</code> - 可用令牌数</li></ul></li><li><p><strong>Tomcat 连接池指标</strong>：</p><ul><li><code>tomcat_sessions_active_current</code> - 活跃会话数</li><li><code>tomcat_threads_busy_threads</code> - 繁忙线程数</li><li><code>tomcat_threads_config_max_threads</code> - 最大线程数</li></ul></li><li><p><strong>指标监测</strong>：</p><ul><li>端口转发之后 <code>curl http://localhost:8998/actuator/prometheus</code>，得到详细数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"># HELP application_ready_time_seconds Time taken for the application to be ready to service requests</span><br><span class="line"># TYPE application_ready_time_seconds gauge</span><br><span class="line">application_ready_time_seconds&#123;main_application_class=&quot;com.hello.hello.HelloApplication&quot;&#125; 47.994</span><br><span class="line"># HELP application_started_time_seconds Time taken to start the application</span><br><span class="line"># TYPE application_started_time_seconds gauge</span><br><span class="line">application_started_time_seconds&#123;main_application_class=&quot;com.hello.hello.HelloApplication&quot;&#125; 47.787</span><br><span class="line"># HELP disk_free_bytes Usable space for path</span><br><span class="line"># TYPE disk_free_bytes gauge</span><br><span class="line">disk_free_bytes&#123;path=&quot;/app/.&quot;&#125; 4.1373339648E10</span><br><span class="line"># HELP disk_total_bytes Total space for path</span><br><span class="line"># TYPE disk_total_bytes gauge</span><br><span class="line">disk_total_bytes&#123;path=&quot;/app/.&quot;&#125; 5.36608768E10</span><br><span class="line"># HELP executor_active_threads The approximate number of threads that are actively executing tasks</span><br><span class="line"># TYPE executor_active_threads gauge</span><br><span class="line">executor_active_threads&#123;name=&quot;applicationTaskExecutor&quot;&#125; 0.0</span><br><span class="line"># HELP executor_completed_tasks_total The approximate total number of tasks that have completed execution</span><br><span class="line"># TYPE executor_completed_tasks_total counter</span><br><span class="line">executor_completed_tasks_total&#123;name=&quot;applicationTaskExecutor&quot;&#125; 0.0</span><br><span class="line"># HELP executor_pool_core_threads The core number of threads for the pool</span><br><span class="line"># TYPE executor_pool_core_threads gauge</span><br><span class="line">executor_pool_core_threads&#123;name=&quot;applicationTaskExecutor&quot;&#125; 8.0</span><br><span class="line"># HELP executor_pool_max_threads The maximum allowed number of threads in the pool</span><br><span class="line"># TYPE executor_pool_max_threads gauge</span><br><span class="line">executor_pool_max_threads&#123;name=&quot;applicationTaskExecutor&quot;&#125; 2.147483647E9</span><br><span class="line"># HELP executor_pool_size_threads The current number of threads in the pool</span><br><span class="line"># TYPE executor_pool_size_threads gauge</span><br><span class="line">executor_pool_size_threads&#123;name=&quot;applicationTaskExecutor&quot;&#125; 0.0</span><br><span class="line"># HELP executor_queue_remaining_tasks The number of additional elements that this queue can ideally accept without blocking</span><br><span class="line"># TYPE executor_queue_remaining_tasks gauge</span><br><span class="line">executor_queue_remaining_tasks&#123;name=&quot;applicationTaskExecutor&quot;&#125; 2.147483647E9</span><br><span class="line"># HELP executor_queued_tasks The approximate number of tasks that are queued for execution</span><br><span class="line"># TYPE executor_queued_tasks gauge</span><br><span class="line">executor_queued_tasks&#123;name=&quot;applicationTaskExecutor&quot;&#125; 0.0</span><br><span class="line"># HELP http_server_requests_active_seconds  </span><br><span class="line"># TYPE http_server_requests_active_seconds summary</span><br><span class="line">http_server_requests_active_seconds_count&#123;exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;UNKNOWN&quot;&#125; 1</span><br><span class="line">http_server_requests_active_seconds_sum&#123;exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;UNKNOWN&quot;&#125; 0.194124977</span><br><span class="line"># HELP http_server_requests_active_seconds_max  </span><br><span class="line"># TYPE http_server_requests_active_seconds_max gauge</span><br><span class="line">http_server_requests_active_seconds_max&#123;exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;UNKNOWN&quot;&#125; 0.262306658</span><br><span class="line"># HELP http_server_requests_seconds  </span><br><span class="line"># TYPE http_server_requests_seconds summary</span><br><span class="line">http_server_requests_seconds_count&#123;error=&quot;IOException&quot;,exception=&quot;IOException&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 77</span><br><span class="line">http_server_requests_seconds_sum&#123;error=&quot;IOException&quot;,exception=&quot;IOException&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 588.946979862</span><br><span class="line">http_server_requests_seconds_count&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/health&quot;&#125; 1314</span><br><span class="line">http_server_requests_seconds_sum&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/health&quot;&#125; 8.224338786</span><br><span class="line">http_server_requests_seconds_count&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 4708</span><br><span class="line">http_server_requests_seconds_sum&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 15666.990410086</span><br><span class="line"># HELP http_server_requests_seconds_max  </span><br><span class="line"># TYPE http_server_requests_seconds_max gauge</span><br><span class="line">http_server_requests_seconds_max&#123;error=&quot;IOException&quot;,exception=&quot;IOException&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/health&quot;&#125; 0.003561359</span><br><span class="line">http_server_requests_seconds_max&#123;error=&quot;none&quot;,exception=&quot;none&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hello&quot;&#125; 0.0</span><br><span class="line"># HELP jvm_info JVM version info</span><br><span class="line"># TYPE jvm_info gauge</span><br><span class="line">jvm_info&#123;runtime=&quot;OpenJDK Runtime Environment&quot;,vendor=&quot;Eclipse Adoptium&quot;,version=&quot;17.0.11+9&quot;&#125; 1</span><br><span class="line"># HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool</span><br><span class="line"># TYPE jvm_buffer_count_buffers gauge</span><br><span class="line">jvm_buffer_count_buffers&#123;id=&quot;direct&quot;&#125; 12.0</span><br><span class="line">jvm_buffer_count_buffers&#123;id=&quot;mapped&quot;&#125; 0.0</span><br><span class="line">jvm_buffer_count_buffers&#123;id=&quot;mapped - &#x27;non-volatile memory&#x27;&quot;&#125; 0.0</span><br><span class="line"># HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool</span><br><span class="line"># TYPE jvm_buffer_memory_used_bytes gauge</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;id=&quot;direct&quot;&#125; 100352.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;id=&quot;mapped&quot;&#125; 0.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;id=&quot;mapped - &#x27;non-volatile memory&#x27;&quot;&#125; 0.0</span><br><span class="line"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool</span><br><span class="line"># TYPE jvm_buffer_total_capacity_bytes gauge</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;id=&quot;direct&quot;&#125; 100352.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;id=&quot;mapped&quot;&#125; 0.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;id=&quot;mapped - &#x27;non-volatile memory&#x27;&quot;&#125; 0.0</span><br><span class="line"># HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_loaded_classes gauge</span><br><span class="line">jvm_classes_loaded_classes 10568.0</span><br><span class="line"># HELP jvm_classes_unloaded_classes_total The number of classes unloaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_unloaded_classes_total counter</span><br><span class="line">jvm_classes_unloaded_classes_total 80.0</span><br><span class="line"># HELP jvm_compilation_time_ms_total The approximate accumulated elapsed time spent in compilation</span><br><span class="line"># TYPE jvm_compilation_time_ms_total counter</span><br><span class="line">jvm_compilation_time_ms_total&#123;compiler=&quot;HotSpot 64-Bit Tiered Compilers&quot;&#125; 218885.0</span><br><span class="line"># HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation</span><br><span class="line"># TYPE jvm_gc_live_data_size_bytes gauge</span><br><span class="line">jvm_gc_live_data_size_bytes 8.5416936E7</span><br><span class="line"># HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool</span><br><span class="line"># TYPE jvm_gc_max_data_size_bytes gauge</span><br><span class="line">jvm_gc_max_data_size_bytes 2.68435456E8</span><br><span class="line"># HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next</span><br><span class="line"># TYPE jvm_gc_memory_allocated_bytes_total counter</span><br><span class="line">jvm_gc_memory_allocated_bytes_total 4.95829704E8</span><br><span class="line"># HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC</span><br><span class="line"># TYPE jvm_gc_memory_promoted_bytes_total counter</span><br><span class="line">jvm_gc_memory_promoted_bytes_total 7.1289304E7</span><br><span class="line"># HELP jvm_gc_overhead An approximation of the percent of CPU time used by GC activities over the last lookback period or since monitoring began, whichever is shorter, in the range [0..1]</span><br><span class="line"># TYPE jvm_gc_overhead gauge</span><br><span class="line">jvm_gc_overhead 0.0</span><br><span class="line"># HELP jvm_gc_pause_seconds Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds summary</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of major GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;MarkSweepCompact&quot;&#125; 3</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of major GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;MarkSweepCompact&quot;&#125; 0.976</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;Copy&quot;&#125; 16</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;Copy&quot;&#125; 1.047</span><br><span class="line"># HELP jvm_gc_pause_seconds_max Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds_max gauge</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of major GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;MarkSweepCompact&quot;&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,cause=&quot;Allocation Failure&quot;,gc=&quot;Copy&quot;&#125; 0.0</span><br><span class="line"># HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use</span><br><span class="line"># TYPE jvm_memory_committed_bytes gauge</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;heap&quot;,id=&quot;Eden Space&quot;&#125; 5.7081856E7</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;heap&quot;,id=&quot;Survivor Space&quot;&#125; 7077888.0</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;heap&quot;,id=&quot;Tenured Gen&quot;&#125; 1.42364672E8</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-nmethods&#x27;&quot;&#125; 2555904.0</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-profiled nmethods&#x27;&quot;&#125; 5636096.0</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;profiled nmethods&#x27;&quot;&#125; 1.572864E7</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;&#125; 6815744.0</span><br><span class="line">jvm_memory_committed_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;&#125; 5.1707904E7</span><br><span class="line"># HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management</span><br><span class="line"># TYPE jvm_memory_max_bytes gauge</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;heap&quot;,id=&quot;Eden Space&quot;&#125; 1.0747904E8</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;heap&quot;,id=&quot;Survivor Space&quot;&#125; 1.3369344E7</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;heap&quot;,id=&quot;Tenured Gen&quot;&#125; 2.68435456E8</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-nmethods&#x27;&quot;&#125; 5828608.0</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-profiled nmethods&#x27;&quot;&#125; 1.22916864E8</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;profiled nmethods&#x27;&quot;&#125; 1.22912768E8</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;&#125; 1.073741824E9</span><br><span class="line">jvm_memory_max_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;&#125; -1.0</span><br><span class="line"># HELP jvm_memory_usage_after_gc The percentage of long-lived heap pool used after the last GC event, in the range [0..1]</span><br><span class="line"># TYPE jvm_memory_usage_after_gc gauge</span><br><span class="line">jvm_memory_usage_after_gc&#123;area=&quot;heap&quot;,pool=&quot;long-lived&quot;&#125; 0.3310730457305908</span><br><span class="line"># HELP jvm_memory_used_bytes The amount of used memory</span><br><span class="line"># TYPE jvm_memory_used_bytes gauge</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;heap&quot;,id=&quot;Eden Space&quot;&#125; 3.3653184E7</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;heap&quot;,id=&quot;Survivor Space&quot;&#125; 854168.0</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;heap&quot;,id=&quot;Tenured Gen&quot;&#125; 8.8871744E7</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-nmethods&#x27;&quot;&#125; 1349248.0</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;non-profiled nmethods&#x27;&quot;&#125; 5586048.0</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;nonheap&quot;,id=&quot;CodeHeap &#x27;profiled nmethods&#x27;&quot;&#125; 1.5632E7</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;&#125; 6518344.0</span><br><span class="line">jvm_memory_used_bytes&#123;area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;&#125; 5.1187048E7</span><br><span class="line"># HELP jvm_threads_daemon_threads The current number of live daemon threads</span><br><span class="line"># TYPE jvm_threads_daemon_threads gauge</span><br><span class="line">jvm_threads_daemon_threads 20.0</span><br><span class="line"># HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads</span><br><span class="line"># TYPE jvm_threads_live_threads gauge</span><br><span class="line">jvm_threads_live_threads 24.0</span><br><span class="line"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset</span><br><span class="line"># TYPE jvm_threads_peak_threads gauge</span><br><span class="line">jvm_threads_peak_threads 214.0</span><br><span class="line"># HELP jvm_threads_started_threads_total The total number of application threads started in the JVM</span><br><span class="line"># TYPE jvm_threads_started_threads_total counter</span><br><span class="line">jvm_threads_started_threads_total 249.0</span><br><span class="line"># HELP jvm_threads_states_threads The current number of threads</span><br><span class="line"># TYPE jvm_threads_states_threads gauge</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;blocked&quot;&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;new&quot;&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;runnable&quot;&#125; 7.0</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;terminated&quot;&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;timed-waiting&quot;&#125; 6.0</span><br><span class="line">jvm_threads_states_threads&#123;state=&quot;waiting&quot;&#125; 11.0</span><br><span class="line"># HELP logback_events_total Number of log events that were enabled by the effective log level</span><br><span class="line"># TYPE logback_events_total counter</span><br><span class="line">logback_events_total&#123;level=&quot;debug&quot;&#125; 0.0</span><br><span class="line">logback_events_total&#123;level=&quot;error&quot;&#125; 0.0</span><br><span class="line">logback_events_total&#123;level=&quot;info&quot;&#125; 5.0</span><br><span class="line">logback_events_total&#123;level=&quot;trace&quot;&#125; 0.0</span><br><span class="line">logback_events_total&#123;level=&quot;warn&quot;&#125; 0.0</span><br><span class="line"># HELP process_cpu_time_ns_total The &quot;cpu time&quot; used by the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_time_ns_total counter</span><br><span class="line">process_cpu_time_ns_total 1.0813E11</span><br><span class="line"># HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_usage gauge</span><br><span class="line">process_cpu_usage 0.09197856413746172</span><br><span class="line"># HELP process_files_max_files The maximum file descriptor count</span><br><span class="line"># TYPE process_files_max_files gauge</span><br><span class="line">process_files_max_files 1048576.0</span><br><span class="line"># HELP process_files_open_files The open file descriptor count</span><br><span class="line"># TYPE process_files_open_files gauge</span><br><span class="line">process_files_open_files 15.0</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds 1.752976768479E9</span><br><span class="line"># HELP process_uptime_seconds The uptime of the Java virtual machine</span><br><span class="line"># TYPE process_uptime_seconds gauge</span><br><span class="line">process_uptime_seconds 9948.976</span><br><span class="line"># HELP system_cpu_count The number of processors available to the Java virtual machine</span><br><span class="line"># TYPE system_cpu_count gauge</span><br><span class="line">system_cpu_count 1.0</span><br><span class="line"># HELP system_cpu_usage The &quot;recent cpu usage&quot; of the system the application is running in</span><br><span class="line"># TYPE system_cpu_usage gauge</span><br><span class="line">system_cpu_usage 0.09208738261313372</span><br><span class="line"># HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time</span><br><span class="line"># TYPE system_load_average_1m gauge</span><br><span class="line">system_load_average_1m 0.08</span><br><span class="line"># HELP tomcat_sessions_active_current_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_current_sessions gauge</span><br><span class="line">tomcat_sessions_active_current_sessions 0.0</span><br><span class="line"># HELP tomcat_sessions_active_max_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_max_sessions gauge</span><br><span class="line">tomcat_sessions_active_max_sessions 0.0</span><br><span class="line"># HELP tomcat_sessions_alive_max_seconds  </span><br><span class="line"># TYPE tomcat_sessions_alive_max_seconds gauge</span><br><span class="line">tomcat_sessions_alive_max_seconds 0.0</span><br><span class="line"># HELP tomcat_sessions_created_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_created_sessions_total counter</span><br><span class="line">tomcat_sessions_created_sessions_total 0.0</span><br><span class="line"># HELP tomcat_sessions_expired_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_expired_sessions_total counter</span><br><span class="line">tomcat_sessions_expired_sessions_total 0.0</span><br><span class="line"># HELP tomcat_sessions_rejected_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_rejected_sessions_total counter</span><br><span class="line">tomcat_sessions_rejected_sessions_total 0.0</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-Grafana-监控大屏配置"><a href="#5-3-Grafana-监控大屏配置" class="headerlink" title="5.3 Grafana 监控大屏配置"></a>5.3 Grafana 监控大屏配置</h3><h4 id="5-3-1-监控大屏概览"><a href="#5-3-1-监控大屏概览" class="headerlink" title="5.3.1 监控大屏概览"></a>5.3.1 监控大屏概览</h4><p>本项目成功配置了多个 Grafana 监控大屏，涵盖了应用性能、网络流量和资源使用等关键指标：</p><ol><li><strong>SpringBoot APM Dashboard</strong> - 应用性能监控</li><li><strong>Kubernetes &#x2F; Compute Resources &#x2F; Namespace</strong> - 集群资源监控  </li><li><strong>网络流量监控面板</strong> - Pod 间通信监控</li></ol><h4 id="5-3-2-SpringBoot-APM-Dashboard-配置"><a href="#5-3-2-SpringBoot-APM-Dashboard-配置" class="headerlink" title="5.3.2 SpringBoot APM Dashboard 配置"></a>5.3.2 SpringBoot APM Dashboard 配置</h4><p><strong>面板配置说明：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dashboard&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringBoot APM Dashboard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;panels&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Basic Statistics&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;expr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_uptime_seconds&#123;instance=~\&quot;.*prometheus-test-demo.*\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;legendFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Uptime&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;expr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jvm_memory_used_bytes&#123;area=\&quot;heap\&quot;&#125;/jvm_memory_max_bytes&#123;area=\&quot;heap\&quot;&#125;*100&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;legendFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Heap Used %&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>关键监控指标：</strong></p><ul><li><strong>运行时间</strong>: 1.5 天稳定运行</li><li><strong>堆内存使用</strong>: 9.4% (健康水平)</li><li><strong>非堆内存使用</strong>: 5.2% (正常状态)</li><li><strong>CPU 使用率</strong>: 平均 0.577% (系统空闲)</li><li><strong>负载均衡</strong>: 0.436 (轻负载)</li></ul><p><img src="/../photos/posts/yys/image-8.png" alt="alt text"></p><h4 id="5-3-3-Kubernetes-资源监控配置"><a href="#5-3-3-Kubernetes-资源监控配置" class="headerlink" title="5.3.3 Kubernetes 资源监控配置"></a>5.3.3 Kubernetes 资源监控配置</h4><p><strong>集群资源监控面板配置：</strong></p><p><strong>CPU 使用率监控：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CPU 使用率 (基于请求)</span><br><span class="line">rate(container_cpu_usage_seconds_total&#123;namespace=&quot;nju08&quot;&#125;[5m]) * 100</span><br><span class="line"></span><br><span class="line"># CPU 使用率 (基于限制)  </span><br><span class="line">rate(container_cpu_usage_seconds_total&#123;namespace=&quot;nju08&quot;&#125;[5m]) / </span><br><span class="line">on(pod) kube_pod_container_resource_limits&#123;resource=&quot;cpu&quot;&#125; * 100</span><br></pre></td></tr></table></figure><p><strong>内存使用率监控：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 内存使用率 (基于请求)</span><br><span class="line">container_memory_usage_bytes&#123;namespace=&quot;nju08&quot;&#125; / </span><br><span class="line">container_spec_memory_limit_bytes * 100</span><br><span class="line"></span><br><span class="line"># 内存使用率 (基于限制)</span><br><span class="line">container_memory_usage_bytes&#123;namespace=&quot;nju08&quot;&#125; / </span><br><span class="line">on(pod) kube_pod_container_resource_limits&#123;resource=&quot;memory&quot;&#125; * 100</span><br></pre></td></tr></table></figure><p><strong>监控数据分析：</strong></p><ul><li><strong>CPU 使用率 (基于请求)</strong></li><li><strong>CPU 使用率 (基于限制)</strong> </li><li><strong>内存使用率 (基于请求)</strong> </li><li><strong>内存使用率 (基于限制)</strong></li></ul><p><img src="/../photos/posts/yys/image-7.png" alt="alt text"></p><h4 id="5-3-4-网络流量监控配置"><a href="#5-3-4-网络流量监控配置" class="headerlink" title="5.3.4 网络流量监控配置"></a>5.3.4 网络流量监控配置</h4><p><strong>网络监控面板配置：</strong></p><p><strong>接收&#x2F;发送字节数监控：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 网络接收速率</span><br><span class="line">rate(container_network_receive_bytes_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br><span class="line"></span><br><span class="line"># 网络发送速率  </span><br><span class="line">rate(container_network_transmit_bytes_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br></pre></td></tr></table></figure><p><strong>网络包监控：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 接收包速率</span><br><span class="line">rate(container_network_receive_packets_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br><span class="line"></span><br><span class="line"># 发送包速率</span><br><span class="line">rate(container_network_transmit_packets_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br><span class="line"></span><br><span class="line"># 丢包率</span><br><span class="line">rate(container_network_receive_packets_dropped_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br><span class="line">rate(container_network_transmit_packets_dropped_total&#123;namespace=&quot;nju08&quot;&#125;[5m])</span><br></pre></td></tr></table></figure><p><strong>网络流量分析：</strong></p><ul><li><strong>峰值网络吞吐量</strong>: ~200 kB&#x2F;s (发送&#x2F;接收)</li><li><strong>峰值包速率</strong>: ~2 kp&#x2F;s (接收&#x2F;发送)</li><li><strong>网络活动时间</strong>: 05:30 左右出现流量峰值</li><li><strong>丢包情况</strong>: 基本无丢包，网络稳定</li></ul><p><img src="/../photos/posts/yys/image-6.png" alt="alt text"></p><h4 id="5-3-5-压测时的监控表现"><a href="#5-3-5-压测时的监控表现" class="headerlink" title="5.3.5 压测时的监控表现"></a>5.3.5 压测时的监控表现</h4><p><strong>压测期间关键指标变化：</strong></p><ol><li><p><strong>CPU 使用率飙升</strong>：</p><ul><li>压测前: ~0.003 (0.3%)</li><li>压测时: ~0.37 (37%)</li><li>增长倍数: 约 123 倍</li></ul></li><li><p><strong>网络流量激增</strong>：</p><ul><li>正常时: 几乎无流量 (0-10 kB&#x2F;s)</li><li>压测时: 峰值 200 kB&#x2F;s</li><li>包速率: 峰值 2000 packets&#x2F;s</li></ul></li><li><p><strong>内存使用稳定</strong>：</p><ul><li>内存使用率保持在合理范围</li><li>未出现内存泄漏现象</li></ul></li></ol><h4 id="5-3-6-限流效果在监控中的体现"><a href="#5-3-6-限流效果在监控中的体现" class="headerlink" title="5.3.6 限流效果在监控中的体现"></a>5.3.6 限流效果在监控中的体现</h4><p><strong>限流监控配置：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># HTTP 请求速率</span><br><span class="line">rate(http_server_requests_seconds_count&#123;uri=&quot;/hello&quot;&#125;[1m]) * 60</span><br><span class="line"></span><br><span class="line"># 错误率 (限流触发)</span><br><span class="line">rate(http_server_requests_seconds_count&#123;exception=&quot;IOException&quot;&#125;[1m]) /</span><br><span class="line">rate(http_server_requests_seconds_count&#123;uri=&quot;/hello&quot;&#125;[1m]) * 100</span><br><span class="line"></span><br><span class="line"># 连接数监控</span><br><span class="line">tomcat_threads_busy_threads / tomcat_threads_config_max_threads * 100</span><br></pre></td></tr></table></figure><p><strong>限流效果观察：</strong></p><ul><li>✅ <strong>流量控制有效</strong>: 网络流量在达到峰值后快速回落</li><li>✅ <strong>CPU 保护机制</strong>: CPU 使用率未超过危险阈值</li><li>✅ <strong>连接层限流</strong>: 通过网络包丢弃实现早期限流</li></ul><hr><h2 id="6-压测"><a href="#6-压测" class="headerlink" title="6. 压测"></a>6. 压测</h2><h3 id="6-1-压测工具"><a href="#6-1-压测工具" class="headerlink" title="6.1 压测工具"></a>6.1 压测工具</h3><h4 id="6-1-1-基础压测脚本"><a href="#6-1-1-基础压测脚本" class="headerlink" title="6.1.1 基础压测脚本"></a>6.1.1 基础压测脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">URL=<span class="string">&quot;http://localhost:8998/hello&quot;</span></span><br><span class="line">CONCURRENT=10</span><br><span class="line">REQUESTS=100</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Starting load test...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;URL: <span class="variable">$URL</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Concurrent requests: <span class="variable">$CONCURRENT</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Total requests: <span class="variable">$REQUESTS</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$REQUESTS</span>); <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">        response=$(curl -s -w <span class="string">&quot;%&#123;http_code&#125;,%&#123;time_total&#125;&quot;</span> -o /dev/null <span class="variable">$URL</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Request <span class="variable">$i</span>: <span class="variable">$response</span>&quot;</span></span><br><span class="line">    ) &amp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 控制并发数</span></span><br><span class="line">    <span class="keyword">if</span> (( <span class="variable">$i</span> % <span class="variable">$CONCURRENT</span> == <span class="number">0</span> )); <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">wait</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Load test completed!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="6-1-2-高频限流测试脚本"><a href="#6-1-2-高频限流测试脚本" class="headerlink" title="6.1.2 高频限流测试脚本"></a>6.1.2 高频限流测试脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色定义</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[1;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line">URL=<span class="string">&quot;http://localhost:8998/hello&quot;</span></span><br><span class="line">NAMESPACE=<span class="string">&quot;nju08&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=========================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;YYS 项目 - 超高频限流测试脚本&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=========================================&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查端口转发</span></span><br><span class="line"><span class="function"><span class="title">check_port_forward</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> ! lsof -i :8998 &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RED&#125;</span>❌ 端口转发未运行<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>请先运行: kubectl port-forward deployment/prometheus-test-demo 8998:8998 -n $NAMESPACE<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>✅ 端口转发正常运行<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多轮高频测试</span></span><br><span class="line"><span class="function"><span class="title">run_aggressive_test</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>🔥 开始超高频限流测试...<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;目标: 超过 100 requests/second 限制&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 测试配置</span></span><br><span class="line">    <span class="built_in">local</span> ROUNDS=3</span><br><span class="line">    <span class="built_in">local</span> REQUESTS_PER_ROUND=150</span><br><span class="line">    <span class="built_in">local</span> MAX_CONCURRENT=100</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> round <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$ROUNDS</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>=== 第 <span class="variable">$round</span> 轮测试 ===<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;发送 <span class="variable">$REQUESTS_PER_ROUND</span> 个请求，<span class="variable">$MAX_CONCURRENT</span> 并发&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">local</span> success_count=0</span><br><span class="line">        <span class="built_in">local</span> rate_limited_count=0</span><br><span class="line">        <span class="built_in">local</span> error_count=0</span><br><span class="line">        <span class="built_in">local</span> timeout_count=0</span><br><span class="line">        </span><br><span class="line">        start_time=$(<span class="built_in">date</span> +%s.%N)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建临时文件</span></span><br><span class="line">        temp_file=<span class="string">&quot;/tmp/aggressive_test_<span class="variable">$&#123;round&#125;</span>_$$&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 极限并发发送</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$REQUESTS_PER_ROUND</span>); <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                response=$(<span class="built_in">timeout</span> 2 curl -s -w <span class="string">&quot;%&#123;http_code&#125;&quot;</span> -o /dev/null \</span><br><span class="line">                    --connect-timeout 0.3 \</span><br><span class="line">                    --max-time 1 \</span><br><span class="line">                    --retry 0 \</span><br><span class="line">                    --no-keepalive \</span><br><span class="line">                    <span class="variable">$URL</span> 2&gt;/dev/null)</span><br><span class="line">                </span><br><span class="line">                exit_code=$?</span><br><span class="line">                timestamp=$(<span class="built_in">date</span> <span class="string">&#x27;+%H:%M:%S.%3N&#x27;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$exit_code</span> -eq 124 ]; <span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;TIMEOUT,<span class="variable">$timestamp</span>&quot;</span> &gt;&gt; <span class="variable">$temp_file</span></span><br><span class="line">                <span class="keyword">elif</span> [ <span class="variable">$exit_code</span> -ne 0 ] || [ -z <span class="string">&quot;<span class="variable">$response</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;CONNECTION_FAILED,<span class="variable">$timestamp</span>&quot;</span> &gt;&gt; <span class="variable">$temp_file</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$response</span>,<span class="variable">$timestamp</span>&quot;</span> &gt;&gt; <span class="variable">$temp_file</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            &#125; &amp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 减少等待时间，增加并发密度</span></span><br><span class="line">            <span class="keyword">if</span> (( <span class="variable">$i</span> % <span class="variable">$MAX_CONCURRENT</span> == <span class="number">0</span> )); <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">wait</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">wait</span></span><br><span class="line">        </span><br><span class="line">        end_time=$(<span class="built_in">date</span> +%s.%N)</span><br><span class="line">        duration=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$end_time</span> - <span class="variable">$start_time</span>&quot;</span> | bc 2&gt;/dev/null || <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        rate=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; <span class="variable">$REQUESTS_PER_ROUND</span> / <span class="variable">$duration</span>&quot;</span> | bc 2&gt;/dev/null || <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;  持续时间: <span class="variable">$&#123;duration&#125;</span>秒&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;  实际速率: <span class="variable">$&#123;rate&#125;</span> requests/second&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 统计结果</span></span><br><span class="line">        <span class="keyword">while</span> IFS=<span class="string">&#x27;,&#x27;</span> <span class="built_in">read</span> -r status_or_error timestamp; <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$status_or_error</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">                <span class="string">&quot;200&quot;</span>) ((success_count++)) ;;</span><br><span class="line">                <span class="string">&quot;429&quot;</span>|<span class="string">&quot;503&quot;</span>) </span><br><span class="line">                    ((rate_limited_count++))</span><br><span class="line">                    <span class="built_in">echo</span> -e <span class="string">&quot;  <span class="variable">$&#123;YELLOW&#125;</span>🚫 限流: <span class="variable">$timestamp</span> - HTTP $status_or_error<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">                    ;;</span><br><span class="line">                <span class="string">&quot;TIMEOUT&quot;</span>) </span><br><span class="line">                    ((timeout_count++))</span><br><span class="line">                    <span class="built_in">echo</span> -e <span class="string">&quot;  <span class="variable">$&#123;RED&#125;</span>⏰ 超时: $timestamp<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">                    ;;</span><br><span class="line">                <span class="string">&quot;CONNECTION_FAILED&quot;</span>|*)</span><br><span class="line">                    ((error_count++))</span><br><span class="line">                    <span class="built_in">echo</span> -e <span class="string">&quot;  <span class="variable">$&#123;RED&#125;</span>❌ 失败: $timestamp<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">                    ;;</span><br><span class="line">            <span class="keyword">esac</span></span><br><span class="line">        <span class="keyword">done</span> &lt; <span class="variable">$temp_file</span> 2&gt;/dev/null</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">rm</span> -f <span class="variable">$temp_file</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;  结果: ✅<span class="variable">$success_count</span> 🚫<span class="variable">$rate_limited_count</span> ⏰<span class="variable">$timeout_count</span> ❌<span class="variable">$error_count</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$rate_limited_count</span> -gt 0 ] || [ <span class="variable">$timeout_count</span> -gt 5 ] || [ <span class="variable">$error_count</span> -gt 5 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;  <span class="variable">$&#123;GREEN&#125;</span>🎯 第 <span class="variable">$round</span> 轮检测到限流效果!<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;  <span class="variable">$&#123;YELLOW&#125;</span>⚠️  第 <span class="variable">$round</span> 轮未检测到限流<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 轮次间短暂休息</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$round</span> -lt <span class="variable">$ROUNDS</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续轰炸测试</span></span><br><span class="line"><span class="function"><span class="title">run_continuous_bombardment</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>💥 连续轰炸测试 (30秒内持续发送请求)<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">local</span> duration=30</span><br><span class="line">    <span class="built_in">local</span> concurrent=50</span><br><span class="line">    <span class="built_in">local</span> total_requests=0</span><br><span class="line">    <span class="built_in">local</span> success_count=0</span><br><span class="line">    <span class="built_in">local</span> limited_count=0</span><br><span class="line">    </span><br><span class="line">    start_time=$(<span class="built_in">date</span> +%s)</span><br><span class="line">    end_target=$((start_time + duration))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;开始时间: <span class="subst">$(date)</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;目标持续: <span class="variable">$&#123;duration&#125;</span>秒&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;并发数: <span class="variable">$concurrent</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> [ $(<span class="built_in">date</span> +%s) -lt <span class="variable">$end_target</span> ]; <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 每次发送一批请求</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$concurrent</span>); <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                response=$(curl -s -w <span class="string">&quot;%&#123;http_code&#125;&quot;</span> -o /dev/null \</span><br><span class="line">                    --connect-timeout 0.2 \</span><br><span class="line">                    --max-time 0.5 \</span><br><span class="line">                    <span class="variable">$URL</span> 2&gt;/dev/null)</span><br><span class="line">                </span><br><span class="line">                ((total_requests++))</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$response</span>&quot;</span> = <span class="string">&quot;200&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                    ((success_count++))</span><br><span class="line">                <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$response</span>&quot;</span> = <span class="string">&quot;429&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$response</span>&quot;</span> = <span class="string">&quot;503&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                    ((limited_count++))</span><br><span class="line">                    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>🚫 限流触发! HTTP <span class="variable">$response</span> at <span class="subst">$(date &#x27;+%H:%M:%S&#x27;)</span><span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            &#125; &amp;</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 短暂等待后继续</span></span><br><span class="line">        <span class="built_in">sleep</span> 0.1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">wait</span></span><br><span class="line">    </span><br><span class="line">    actual_duration=$(($(date +%s) - start_time))</span><br><span class="line">    actual_rate=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; <span class="variable">$total_requests</span> / <span class="variable">$actual_duration</span>&quot;</span> | bc 2&gt;/dev/null || <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>💥 连续轰炸测试结果<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;实际持续时间: <span class="variable">$&#123;actual_duration&#125;</span>秒&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;总请求数: <span class="variable">$total_requests</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;平均速率: <span class="variable">$&#123;actual_rate&#125;</span> requests/second&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;成功请求: <span class="variable">$success_count</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;限流触发: <span class="variable">$limited_count</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$limited_count</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>🎯 连续轰炸成功触发限流!<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>⚠️  连续轰炸未触发限流<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Bench 测试 (如果可用)</span></span><br><span class="line"><span class="function"><span class="title">run_ab_test</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">command</span> -v ab &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>⚡ Apache Bench 高性能测试<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;测试1: 500个请求，200并发&quot;</span></span><br><span class="line">        ab -n 500 -c 200 <span class="variable">$URL</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;测试2: 2秒内尽可能多的请求，300并发&quot;</span></span><br><span class="line">        ab -t 2 -c 300 <span class="variable">$URL</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>💡 建议安装 Apache Bench 进行更高性能的测试:<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;  sudo apt-get install apache2-utils&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;  然后运行: ab -n 1000 -c 300 <span class="variable">$URL</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查限流配置</span></span><br><span class="line"><span class="function"><span class="title">check_rate_limit_config</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>⚙️ 检查当前限流配置<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查 Redis 中的令牌桶状态</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Redis 限流键:&quot;</span></span><br><span class="line">    kubectl <span class="built_in">exec</span> deployment/redis -n <span class="variable">$NAMESPACE</span> -- redis-cli keys <span class="string">&quot;*rate*&quot;</span> 2&gt;/dev/null || <span class="built_in">echo</span> <span class="string">&quot;无法访问Redis&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尝试获取桶的状态 (这个可能需要特殊的命令)</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前应用配置:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;- 限流阈值: 100 requests/second&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;- 令牌桶容量: 100&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;- 补充速率: 100 tokens/second&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;- 限流键: global-rate-limit-key&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主执行流程</span></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    check_port_forward</span><br><span class="line">    check_rate_limit_config</span><br><span class="line">    run_aggressive_test</span><br><span class="line">    run_continuous_bombardment</span><br><span class="line">    run_ab_test</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>🏁 超高频限流测试完成!<span class="variable">$&#123;NC&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行主函数</span></span><br><span class="line">main <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-压测结果"><a href="#6-2-压测结果" class="headerlink" title="6.2 压测结果"></a>6.2 压测结果</h3><p><strong>压测结果截图：</strong></p><ul><li>未触发限流：<br>  <img src="/../photos/posts/yys/image-9.png" alt="alt text"></li><li>触发限流：<br>  <img src="/../photos/posts/yys/image-10.png"><br>  <img src="/../photos/posts/yys/image-11.png" alt="alt text"></li><li>其中在限流之后转发的进程这边显示如下信息，说明超出阈值的request直接在tcp层被拒绝。</li><li><img src="/../photos/posts/yys/image-12.png" alt="alt text"></li></ul><p><strong>HTTP 000 状态码说明：</strong></p><ul><li><img src="/../photos/posts/yys/image-13.png" alt="alt text"></li><li>状态码 000 表示连接在 TCP 层被拒绝</li><li>这证明了限流系统在连接层面起到了保护作用</li><li>比 HTTP 429 更早介入，资源保护更彻底</li></ul><h2 id="7-项目总结与技术亮点"><a href="#7-项目总结与技术亮点" class="headerlink" title="7. 项目总结与技术亮点"></a>7. 项目总结与技术亮点</h2><h3 id="7-1-技术架构亮点"><a href="#7-1-技术架构亮点" class="headerlink" title="7.1 技术架构亮点"></a>7.1 技术架构亮点</h3><ol><li><p><strong>多层限流防护</strong>：</p><ul><li>应用层：Bucket4j 令牌桶算法精确控制</li><li>连接层：Tomcat 连接池快速保护</li><li>网络层：K8s 网络策略综合防护</li></ul></li><li><p><strong>分布式限流设计</strong>：</p><ul><li>基于 Redis 的分布式令牌桶</li><li>支持水平扩展和高可用</li><li>保证多实例间限流一致性</li></ul></li><li><p><strong>云原生最佳实践</strong>：</p><ul><li>容器化部署</li><li>K8s 声明式配置</li><li>微服务架构设计</li></ul></li></ol><h3 id="7-2-监控与运维亮点"><a href="#7-2-监控与运维亮点" class="headerlink" title="7.2 监控与运维亮点"></a>7.2 监控与运维亮点</h3><ol><li><p><strong>全方位监控</strong>：</p><ul><li>应用性能监控 (APM)</li><li>基础设施监控</li><li>业务指标监控</li></ul></li><li><p><strong>自动化运维</strong>：</p><ul><li>CI&#x2F;CD 流水线自动化</li><li>健康检查和自愈能力</li><li>可观测性最佳实践</li></ul></li></ol><h3 id="7-3-压测验证成果"><a href="#7-3-压测验证成果" class="headerlink" title="7.3 压测验证成果"></a>7.3 压测验证成果</h3><ol><li><p><strong>限流功能验证</strong>：</p><ul><li>成功验证 100 req&#x2F;s 限流阈值</li><li>确认多层限流机制有效性</li><li>系统保护能力得到验证</li></ul></li><li><p><strong>扩容能力验证</strong>：</p><ul><li>K8s 水平扩容功能正常</li><li>负载均衡分发有效</li><li>性能线性提升明显</li></ul></li></ol><h3 id="7-4-项目创新点"><a href="#7-4-项目创新点" class="headerlink" title="7.4 项目创新点"></a>7.4 项目创新点</h3><ol><li><p><strong>连接层限流策略</strong>：</p><ul><li>在 TCP 连接层就实现流量控制</li><li>比传统 HTTP 层限流更高效</li><li>资源保护更彻底</li></ul></li><li><p><strong>压测工具定制化</strong>：</p><ul><li>针对限流场景设计专用测试脚本</li><li>能够有效触发和验证限流机制</li><li>提供详细的测试报告和分析</li></ul></li><li><p><strong>监控体系完整性</strong>：</p><ul><li>从基础设施到应用层的全栈监控</li><li>限流专用监控面板设计</li><li>智能告警和故障预警</li></ul></li></ol><h3 id="7-5-学习收获与心得"><a href="#7-5-学习收获与心得" class="headerlink" title="7.5 学习收获与心得"></a>7.5 学习收获与心得</h3><p>通过本项目的实践，深入理解了：</p><ol><li><p><strong>云原生技术栈</strong>：</p><ul><li>Docker 容器化技术</li><li>Kubernetes 容器编排</li><li>微服务架构设计原则</li></ul></li><li><p><strong>限流算法与实现</strong>：</p><ul><li>令牌桶算法的原理和应用</li><li>分布式限流的挑战和解决方案</li><li>多层限流策略的设计思路</li></ul></li><li><p><strong>DevOps 最佳实践</strong>：</p><ul><li>CI&#x2F;CD 流水线设计</li><li>监控体系建设</li><li>自动化测试和部署</li></ul></li><li><p><strong>性能测试与调优</strong>：</p><ul><li>压测工具的选择和使用</li><li>性能瓶颈的识别和优化</li><li>系统扩容策略的验证</li></ul></li></ol><hr><h2 id="8-附录"><a href="#8-附录" class="headerlink" title="8. 附录"></a>8. 附录</h2><h3 id="8-1-项目文件结构"><a href="#8-1-项目文件结构" class="headerlink" title="8.1 项目文件结构"></a>8.1 项目文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yys/</span><br><span class="line">├── src/                                    # 源代码目录</span><br><span class="line">│   ├── main/java/com/hello/hello/</span><br><span class="line">│   │   ├── config/                        # 配置类</span><br><span class="line">│   │   │   ├── RateLimitConfig.java      # 限流配置</span><br><span class="line">│   │   │   ├── RedisConfig.java          # Redis配置</span><br><span class="line">│   │   │   └── WebMvcConfig.java         # Web配置</span><br><span class="line">│   │   ├── controller/</span><br><span class="line">│   │   │   └── HelloController.java      # 控制器</span><br><span class="line">│   │   ├── interceptor/</span><br><span class="line">│   │   │   └── RateLimitInterceptor.java # 限流拦截器</span><br><span class="line">│   │   ├── service/</span><br><span class="line">│   │   │   └── RateLimiterService.java   # 限流服务</span><br><span class="line">│   │   └── HelloApplication.java         # 启动类</span><br><span class="line">│   └── main/resources/</span><br><span class="line">│       └── application.properties        # 应用配置</span><br><span class="line">├── jenkins/scripts/                       # K8s部署文件</span><br><span class="line">│   ├── prometheus-test-demo.yaml</span><br><span class="line">│   └── prometheus-test-serviceMonitor.yaml</span><br><span class="line">├── Dockerfile                            # Docker构建文件</span><br><span class="line">├── Jenkinsfile                          # Jenkins流水线</span><br><span class="line">├── pom.xml                              # Maven配置</span><br><span class="line">└── README.md                            # 项目说明文档</span><br></pre></td></tr></table></figure><h3 id="8-2-相关技术栈版本"><a href="#8-2-相关技术栈版本" class="headerlink" title="8.2 相关技术栈版本"></a>8.2 相关技术栈版本</h3><ul><li><strong>Java</strong>: 17</li><li><strong>Spring Boot</strong>: 3.5.3</li><li><strong>Bucket4j</strong>: 8.10.1</li><li><strong>Redis</strong>: 7-alpine</li><li><strong>Kubernetes</strong>: 1.20+</li><li><strong>Docker</strong>: 20.10+</li><li><strong>Jenkins</strong>: 2.400+</li><li><strong>Prometheus</strong>: 2.40+</li><li><strong>Grafana</strong>: 9.0+</li></ul><hr><p><strong>报告完成时间</strong>: 2025年7月20日<br><strong>项目代码仓库</strong>: <a href="https://github.com/231220075/yys">https://github.com/231220075/yys</a><br><strong>分支</strong>: hpa</p><hr><p><em>感谢阅读！如果这篇文章对你有帮助，欢迎点赞和分享。</em></p>]]></content>
    
    
    <summary type="html">顺手上传暑课项目</summary>
    
    
    
    <category term="学习记录" scheme="http://summer-flower.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="学习" scheme="http://summer-flower.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>csnet 期末周复习</title>
    <link href="http://summer-flower.com/2025/08/12/csnet%20%E6%9C%9F%E6%9C%AB%E5%91%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>http://summer-flower.com/2025/08/12/csnet%20%E6%9C%9F%E6%9C%AB%E5%91%A8%E5%A4%8D%E4%B9%A0/</id>
    <published>2025-08-12T07:33:42.000Z</published>
    <updated>2025-08-12T07:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📝-csnet-期末周复习"><a href="#📝-csnet-期末周复习" class="headerlink" title="📝 csnet 期末周复习"></a>📝 csnet 期末周复习</h1><blockquote><p>期末周复习自用，站建好了上传一下</p></blockquote><h2 id="计算机网络复习"><a href="#计算机网络复习" class="headerlink" title="计算机网络复习"></a>计算机网络复习</h2><p>1.五层协议栈及其作用：</p><ul><li>物理层（Physical Layer）：负责比特流的传输，定义硬件设备的电气、机械、过程和功能规范。</li><li>数据链路层（Data Link Layer）：负责在物理链路上可靠地传输数据帧，进行差错检测与纠正。</li><li>网络层（Network Layer）：负责数据包从源到目的地的路由选择和转发，实现不同网络之间的互联。</li><li>传输层（Transport Layer）：为两台主机上的进程之间提供端到端的可靠或不可靠的数据传输服务。</li><li>应用层（Application Layer）：为用户的应用进程提供网络服务，如HTTP、FTP、SMTP等。</li></ul><p>2.ISO七层模型及其作用：</p><ul><li>物理层（Physical Layer）：负责比特流的传输，定义物理设备的电气、机械、过程和功能规范。</li><li>数据链路层（Data Link Layer）：负责在物理链路上可靠地传输数据帧，进行差错检测与纠正。</li><li>网络层（Network Layer）：负责数据包的路由选择和转发，实现不同网络之间的互联。</li><li>传输层（Transport Layer）：为主机间进程提供端到端的可靠或不可靠的数据传输服务。</li><li>会话层（Session Layer）：管理会话，建立、管理和终止进程间的会话。</li><li>表示层（Presentation Layer）：处理数据的表示、加密、解密和压缩，保证数据能被应用层正确识别。</li><li>应用层（Application Layer）：为用户的应用进程提供网络服务，如HTTP、FTP、SMTP等。</li></ul><p>3.七层与五层协议的对应关系：</p><ul><li>物理层、数据链路层、网络层、传输层、应用层：在五层协议中与OSI模型的同名层直接对应。</li><li>OSI的会话层和表示层的功能，在五层协议中被合并到应用层中。</li></ul><ol start="4"><li>交换机与路由器（路由表）的功能比较：</li></ol><ul><li>交换机（Switch）：主要工作在数据链路层（第二层），根据MAC地址转发数据帧，通过维护MAC地址表实现局域网内的数据转发。</li><li>路由器（Router）：主要工作在网络层（第三层），根据IP地址转发数据包，通过维护路由表实现不同网络之间的数据转发。</li><li>相同点：二者都实现了数据的转发和路径选择。</li><li>不同点：交换机基于MAC地址、工作在二层，作用于局域网；路由器基于IP地址、工作在三层，作用于不同网络之间。</li></ul><ol start="5"><li>TCP流量控制与窗口机制：</li></ol><p>(1) TCP接收方RecvBuffer、LastByteRead、LastByteRecv，发送方LastByteSent、LastByteAck，这些参数需满足什么关系？</p><ul><li>接收方：LastByteRead &lt; LastByteRecv ≤ RecvBuffer</li><li>发送方：LastByteAck &lt; LastByteSent</li></ul><p>(2) 发送方怎么知道rwnd大小，rwnd&#x3D;0时会发生什么，TCP如何解决？</p><ul><li>发送方通过ACK报文中的窗口字段获知rwnd。</li><li>rwnd&#x3D;0时，发送方不能再发送数据，进入零窗口状态。</li><li>发送方会周期性发送窗口探测报文（Zero Window Probe）以探测窗口是否打开。</li></ul><p>(3) 这个问题涉及到TCP的什么功能？有何作用？</p><ul><li>涉及TCP的流量控制功能。</li><li>作用：防止发送方发送过快导致接收方缓存溢出，保证数据可靠传输。</li></ul><p>(4) 有协议规定太小的报文不发，等所有报文都收到ack后再一起发小报文，这样做的目的和负面影响？</p><ul><li>目的：减少小报文数量，降低网络开销，提高带宽利用率。</li><li>负面影响：增加时延，降低实时性，应用层等待时间变长。</li></ul><ol start="6"><li>拥塞控制总结：</li></ol><p>(1) 拥塞控制的四个阶段：</p><ul><li>慢启动（Slow Start）：CWND（拥塞窗口）以指数方式增长，直到达到ssthresh（慢启动阈值）。</li><li>拥塞避免（Congestion Avoidance）：CWND以线性方式增长，每收到一个ACK，CWND增加1&#x2F;CWND。</li><li>快速重传（Fast Retransmit）：收到3个冗余ACK时，立即重传丢失的数据包。</li><li>快速恢复（Fast Recovery）：ssthresh设置为当前CWND的一半，CWND调整为ssthresh+3，进入拥塞避免。</li></ul><p>(2) 拥塞窗口CWND和ssthresh的变化：</p><ul><li>慢启动阶段CWND指数增长，达到ssthresh后进入拥塞避免。</li><li>拥塞避免阶段CWND线性增长。</li><li>丢包（超时或3个冗余ACK）时，ssthresh&#x3D;当前CWND&#x2F;2，CWND重置（超时为1，3冗余ACK为ssthresh+3）。</li></ul><p>(3) 拥塞控制事件：</p><ul><li>丢包事件（如第16&#x2F;22 RTT）：CWND骤降，ssthresh调整。</li><li>快速恢复后CWND和ssthresh的变化：CWND&#x3D;ssthresh+3，ssthresh&#x3D;原CWND&#x2F;2。</li></ul><p>(4) TCP-BIC（Binary Increase Congestion control）：</p><ul><li>拥塞窗口采用二分法快速探测带宽上限，窗口收缩后以二分搜索方式快速恢复。</li><li>优势：带宽利用率高，收敛速度快，适合高带宽高延迟网络，避免了TCP-Reno线性增长慢、带宽利用率低的问题。</li><li>机制：丢包后窗口收缩到Wmin，然后以二分法探测Wmax，窗口增长更快且更平滑。</li></ul><ol start="7"><li>距离向量（DV）算法与毒性逆转：</li></ol><p>(1) 距离向量（Distance Vector, DV）算法：</p><ul><li>每个路由器维护一张到所有目的网络的距离向量表（即到每个目的地的最短距离和下一跳）。</li><li>路由器定期将自己的距离向量表发送给相邻的路由器。</li><li>路由器收到邻居的距离向量后，利用Bellman-Ford算法更新自己的路由表。</li><li>路由器只知道与自己直接相连的邻居信息，不知道全网的拓扑结构。</li><li>典型协议：RIP（Routing Information Protocol）就是基于DV算法的。</li><li>优点：实现简单，适合小型网络。</li><li>缺点：收敛慢，容易出现“路由环路”和“计数到无穷”等问题。</li></ul><p>(2) 毒性逆转（Poison Reverse）：</p><ul><li>是DV算法中为防止路由环路和“计数到无穷”问题而采用的一种机制。</li><li>当路由器A通过路由器B到达某个目的网络时，A会向B声明该目的网络的距离为“无穷大”（通常用16表示），即“毒性”信息。</li><li>这样B就不会再把到该目的网络的路由信息传回A，避免了环路和错误信息的传播。</li><li>毒性逆转能加快错误路由的收敛速度，但不能完全消除所有环路问题。</li></ul><ol start="8"><li>IGP、EGP、BGP详解：</li></ol><p>(1) IGP（Interior Gateway Protocol，内部网关协议）：</p><ul><li>IGP是指在同一个自治系统（AS）内部使用的路由协议，主要用于AS内部各路由器之间的路由信息交换和最优路径选择。</li><li>常见的IGP协议有：<ul><li>RIP（Routing Information Protocol）：基于距离向量算法，适合小型网络，收敛慢。</li><li>OSPF（Open Shortest Path First）：基于链路状态算法，支持大规模网络，收敛快，广泛应用于企业和运营商网络。</li><li>IS-IS（Intermediate System to Intermediate System）：与OSPF类似，基于链路状态，常用于大型ISP和运营商网络。</li></ul></li><li>IGP的特点是：只在AS内部传播路由信息，不负责AS之间的路由。</li></ul><p>(2) EGP（Exterior Gateway Protocol，外部网关协议）：</p><ul><li>EGP是指用于不同自治系统（AS）之间的路由选择和信息交换的协议。</li><li>早期的EGP协议是EGP（Exterior Gateway Protocol），但已被BGP取代。</li><li>目前实际应用中，唯一广泛使用的EGP协议是BGP（边界网关协议）。</li><li>EGP的作用是实现互联网范围的路由可达性，负责AS之间的路由传播和策略控制。</li></ul><p>(3) BGP（Border Gateway Protocol，边界网关协议）：</p><ul><li>BGP是目前互联网中唯一广泛使用的EGP协议，属于路径向量路由协议。</li><li>主要用于不同AS之间的路由信息交换，是互联网的“主干”协议。</li><li>BGP通过维护AS路径（AS Path）等属性，实现路由选择和环路避免。</li><li>支持路由策略控制，可以根据运营商、业务需求等灵活选择路由。</li><li>BGP分为eBGP（外部BGP，用于AS之间）和iBGP（内部BGP，用于AS内部路由器之间同步BGP信息）。</li><li>BGP的特点：可扩展性强，支持路由聚合和策略控制，适合大规模互联网环境。</li></ul><ol start="9"><li>IGP与EGP的功能及配合：</li></ol><p>(1) IGP（Interior Gateway Protocol，内部网关协议）：</p><ul><li>用于自治系统（AS）内部的路由选择。</li><li>常见协议有RIP、OSPF、IS-IS等。</li><li>主要负责AS内部各路由器之间的路由信息交换和最优路径选择。</li></ul><p>(2) EGP（Exterior Gateway Protocol，外部网关协议）：</p><ul><li>用于不同自治系统（AS）之间的路由选择。</li><li>目前实际应用中主要是BGP（边界网关协议）。</li><li>负责AS之间的路由信息交换，实现互联网范围的路由可达性。</li></ul><p>(3) IGP与EGP的配合方式：</p><ul><li>IGP负责AS内部的路由收敛和最优路径，EGP负责AS之间的路由传播和策略控制。</li><li>路由器在AS内部通过IGP学习和维护本地路由表，在AS边界通过EGP（如BGP）与其他AS交换路由信息。</li><li>通常AS内部的路由信息通过汇总后由EGP向外通告，EGP学到的外部路由也会注入到IGP中供内部主机访问外部网络。</li></ul><ol start="10"><li>RIP与OSPF详解：</li></ol><p>(1) RIP（Routing Information Protocol，路由信息协议）：</p><ul><li>基于距离向量（Distance Vector）算法的内部网关协议（IGP）。</li><li>路由器定期向相邻路由器广播自己的路由表，度量值为“跳数”（Hop Count），最大跳数为15，16表示不可达。</li><li>每30秒周期性更新，适合小型网络，配置简单。</li><li>优点：实现简单，易于配置和管理。</li><li>缺点：收敛慢，容易产生路由环路，最大跳数限制导致不适合大型网络，带宽利用率低。</li><li>典型应用：早期企业局域网、小型网络。</li></ul><p>(2) OSPF（Open Shortest Path First，开放最短路径优先）：</p><ul><li>基于链路状态（Link State）算法的内部网关协议（IGP）。</li><li>路由器通过洪泛方式向所有路由器通告链路状态信息，所有路由器获得完整的网络拓扑。</li><li>使用Dijkstra算法计算最短路径，度量值为“成本”（Cost），可根据带宽等灵活设定。</li><li>支持分层设计（区域Area），适合大规模网络，收敛速度快。</li><li>支持认证、安全、负载均衡、VLSM等高级特性。</li><li>优点：收敛快，扩展性强，适合大型复杂网络，支持多种网络类型。</li><li>缺点：实现和配置较复杂，对硬件资源要求较高。</li><li>典型应用：企业、运营商的大型网络环境。</li></ul><ol start="11"><li>Internet分层的作用：</li></ol><ul><li>简化网络设计：将复杂的网络通信过程分为多个层次，每层只关注自身功能，降低设计和实现难度。</li><li>便于标准化和互操作：每一层有明确的接口和协议标准，不同厂商的设备和协议可以互通。</li><li>易于维护和扩展：某一层的技术升级或更换不会影响到其他层，增强了网络的灵活性和可扩展性。</li><li>促进技术创新：各层可以独立发展新技术，推动网络整体进步。</li><li>有助于故障定位和管理：分层结构便于定位和排查网络问题，提高网络管理效率。</li><li>协议分层有概念化和结构化的优点。</li><li>降低复杂度、提高灵活性。</li></ul><p><strong>沙漏结构（hourglass）的意义：</strong></p><ul><li>采用单一的网络层协议（IP），所有网络都通过IP协议互联。</li><li>允许任意网络互通：只要支持IP的网络都能交换数据包。</li><li>应用与底层网络技术解耦：应用程序不依赖于底层网络类型，能在所有网络上运行。</li><li>支持IP层上下的同时创新：IP之上（如应用层协议）和IP之下（如链路层技术）都可以独立发展新技术。</li><li>但IP协议本身难以更改（如IPv4升级到IPv6非常困难），因为整个互联网都依赖于IP协议。</li></ul><ol start="12"><li><p>常见报文格式<br>UDP：<br><img src="/../photos/posts/csnet/image.png" alt="alt text"><br>TCP：<img src="/../photos/posts/csnet/image-1.png" alt=""><br>IPv4：<img src="/../photos/posts/csnet/image-2.png" alt="alt text"><br>IPv6：<img src="/../photos/posts/csnet/image-3.png" alt="alt text"></p></li><li><p>NAT与IP-in-IP隧道详解：</p></li></ol><p>(1) NAT（Network Address Translation，网络地址转换）：</p><ul><li>NAT是一种在路由器或网关设备上实现的地址转换技术，用于在私有网络和公网之间转换IP地址。</li><li>主要类型：<ul><li>静态NAT：一一映射，私有IP和公网IP固定对应。</li><li>动态NAT：从公网IP池中动态分配公网地址给私有IP。</li><li>NAPT（端口地址转换，PAT&#x2F;端口复用）：多个私有IP通过同一个公网IP出网，靠端口号区分不同连接。</li></ul></li><li>作用：<ul><li>节省公网IP地址，实现局域网主机共享上网。</li><li>隐藏内部网络结构，提高安全性。</li><li>支持地址重用和网络结构灵活调整。</li></ul></li><li>NAT的实现只需修改IP包头的源&#x2F;目的地址和端口，不需要封装额外的IP头。</li></ul><p>(2) IP-in-IP隧道：</p><ul><li>IP-in-IP隧道是一种隧道协议，将一个IP数据包作为“数据”封装进另一个IP包中。</li><li>实现方式：<ul><li>隧道入口（封装端）收到原始IP包后，加上新的外层IP头（源&#x2F;目的地址为隧道两端公网IP），再发送到网络。</li><li>隧道出口（解封端）收到后，去掉外层IP头，还原出原始IP包并继续转发。</li></ul></li><li>作用：<ul><li>实现不同网络或协议之间的互联，如IPv6 over IPv4、VPN、移动IP等。</li><li>可穿越不支持某些协议或地址的中间网络，实现私有网络互通。</li><li>提供虚拟专用通道，增强数据传输的灵活性和安全性。</li></ul></li><li>IP-in-IP隧道本质是“IP包套IP包”，与NAT不同，NAT不需要使用IP-in-IP隧道。</li></ul><ol start="14"><li>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）是一种应用层协议，用于在电子邮件系统中传输邮件。它负责邮件的发送和转发，常用于邮件客户端与邮件服务器、邮件服务器之间的邮件传递。SMTP使用TCP端口25，保证邮件可靠送达目标服务器，但本身不负责邮件的接收和存储，接收通常由POP3或IMAP协议完成。</li></ol><hr><h3 id="例题：DNS欺骗攻击与加密认证、RSA私钥求解"><a href="#例题：DNS欺骗攻击与加密认证、RSA私钥求解" class="headerlink" title="例题：DNS欺骗攻击与加密认证、RSA私钥求解"></a>例题：DNS欺骗攻击与加密认证、RSA私钥求解</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>如下图所示，DNS，设计一个攻击，攻击者用主动攻击让 Alice 收到假的 response 。</p><ul><li><p>DNS，设计一个攻击，攻击者用主动攻击让 alice 收到假的 response 。</p></li><li><p>服务器收到（m, Ks-(H(m))）问怎么判断是 s 发的？</p></li><li><p>上面用的是私钥，问可不可以用公钥加密？</p></li><li><p>这个加密算法可不可以防止第一问里面你写的攻击方法？</p></li><li><p>最后一题 RSA 算法：Na&#x3D;55，ea&#x3D;3，Nb&#x3D;33，eb&#x3D;13，求 a、b 私钥。</p></li></ul><hr><h4 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h4><p><strong>1. DNS欺骗攻击设计</strong></p><ul><li>攻击者可以通过伪造 DNS 响应包，抢在真实 DNS 服务器之前将假的 response 发给 Alice，使其缓存错误的域名-IP 映射。</li><li>具体方法：攻击者监听 Alice 的 DNS 查询请求，猜测或获取事务ID（Transaction ID），并伪造一个带有相同事务ID的响应包，提前返回给 Alice。</li><li>这样 Alice 会将攻击者伪造的 IP 地址作为目标域名的解析结果，导致流量被劫持或重定向。</li></ul><p><strong>2. 服务器收到（m, Ks-(H(m))）如何判断是 s 发的？</strong></p><ul><li>Ks- 表示用 s 的私钥对消息摘要 H(m) 进行签名。</li><li>服务器收到后，用 s 的公钥 Ks+ 验证签名：用 Ks+ 解密 Ks-(H(m))，得到 H(m)’，再与本地计算的 H(m) 比较。</li><li>若一致，则说明消息确实由 s 发出且未被篡改。</li></ul><p><strong>3. 上面用的是私钥，能否用公钥加密？</strong></p><ul><li>不能。公钥加密用于加密消息，保证机密性；私钥加密（签名）用于认证身份和完整性。</li><li>若用公钥加密，任何人都能用公钥加密消息，无法证明消息是 s 发出的。</li><li>数字签名必须用私钥加密（签名），公钥验证。</li></ul><p><strong>4. 该加密算法能否防止第一问的攻击？</strong></p><ul><li>可以防止。</li><li>因为只有合法的 s 拥有私钥，攻击者无法伪造合法签名，服务器可通过公钥验证签名，防止伪造响应。</li><li>即使攻击者能伪造 DNS 响应，也无法生成合法签名。</li></ul><p><strong>5. RSA私钥求解</strong></p><ul><li>Na&#x3D;55，ea&#x3D;3，Nb&#x3D;33，eb&#x3D;13。</li><li>求 a、b 的私钥：</li></ul><p>（1）Na&#x3D;55，分解质因数：55&#x3D;5×11。</p><ul><li>φ(Na) &#x3D; (5-1)×(11-1) &#x3D; 4×10 &#x3D; 40。</li><li>ea&#x3D;3，求 da，使 3×da ≡ 1 (mod 40)。</li><li>3×da&#x3D;1+40k，da&#x3D;27（因为3×27&#x3D;81，81-2×40&#x3D;1）。</li><li>a的私钥为 (Na&#x3D;55, da&#x3D;27)。</li></ul><p>（2）Nb&#x3D;33，分解质因数：33&#x3D;3×11。</p><ul><li>φ(Nb) &#x3D; (3-1)×(11-1) &#x3D; 2×10 &#x3D; 20。</li><li>eb&#x3D;13，求 db，使 13×db ≡ 1 (mod 20)。</li><li>13×db&#x3D;1+20k，db&#x3D;17（因为13×17&#x3D;221，221-11×20&#x3D;1）。</li><li>b的私钥为 (Nb&#x3D;33, db&#x3D;17)。</li></ul><hr><h3 id="例题：五层协议“沙漏”结构与相关知识点"><a href="#例题：五层协议“沙漏”结构与相关知识点" class="headerlink" title="例题：五层协议“沙漏”结构与相关知识点"></a>例题：五层协议“沙漏”结构与相关知识点</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><ol><li>沙漏中间的协议是（ ）</li><li>协议分层的好处</li><li>互联网“沙漏”型的好处</li><li>TCP和UDP的区别</li><li>电子邮件使用的应用层协议</li></ol><h4 id="答案与解析"><a href="#答案与解析" class="headerlink" title="答案与解析"></a>答案与解析</h4><p><strong>1. 沙漏中间的协议是（ ）</strong></p><ul><li>答案：IP协议（Internet Protocol）。</li><li>解析：五层协议栈的“沙漏”结构中，最窄处是网络层的IP协议，所有上层协议（如TCP、UDP、ICMP等）和下层链路协议（如以太网、PPP等）都通过IP协议进行数据传递。</li></ul><p><strong>2. 协议分层的好处</strong></p><ul><li>降低复杂度：每层只关注本层功能，简化设计与实现。</li><li>易于标准化：各层接口明确，便于不同厂商设备互通。</li><li>便于维护和升级：某一层技术升级时，只要接口不变，不影响其他层。</li><li>促进互操作性：不同实现可兼容，促进网络发展。</li></ul><p><strong>3. 互联网“沙漏”型的好处</strong></p><ul><li>统一中间层（IP），简化互联：各种不同的物理网络和多样的应用协议都能通过IP互联。</li><li>促进创新：上层应用协议和下层链路技术可以独立发展，极大促进了互联网的扩展性和多样性。</li><li>降低成本：只需实现IP协议即可接入互联网，无需关心所有上层或下层细节。</li></ul><p><strong>4. TCP和UDP的区别</strong></p><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接方式</td><td>面向连接（三次握手）</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠，保证数据顺序和完整性</td><td>不可靠，可能丢包、乱序</td></tr><tr><td>流量控制</td><td>有</td><td>无</td></tr><tr><td>拥塞控制</td><td>有</td><td>无</td></tr><tr><td>速度</td><td>较慢</td><td>较快</td></tr><tr><td>适用场景</td><td>文件传输、网页、邮件等</td><td>视频、语音、DNS等</td></tr></tbody></table><p><strong>5. 电子邮件使用的应用层协议</strong></p><ul><li>SMTP（Simple Mail Transfer Protocol）：邮件发送协议。</li><li>POP3（Post Office Protocol 3）：邮件接收协议，下载到本地。</li><li>IMAP（Internet Message Access Protocol）：邮件接收协议，支持服务器端管理。</li></ul><hr><h3 id="以太网最小帧长的计算逻辑"><a href="#以太网最小帧长的计算逻辑" class="headerlink" title="以太网最小帧长的计算逻辑"></a>以太网最小帧长的计算逻辑</h3><p>以太网采用CSMA&#x2F;CD（载波监听多路访问&#x2F;冲突检测）机制。为了保证发送端在数据帧还未全部发送完时能检测到碰撞，帧的发送时间必须大于等于信号在网络中往返一次的传播时延。</p><p>（1）计算公式<br>最小帧长（bit） &#x3D; 2 × 最大物理距离 &#x2F; 信号传播速率 × 带宽</p><p>简化为：<br>最小帧长 &#x3D; 2 × 传播时延 × 带宽</p><ul><li>传播时延 &#x3D; 最大距离 &#x2F; 信号传播速率</li><li>带宽单位需统一（如bit&#x2F;s）</li></ul><p>（2）原理说明</p><ul><li>如果帧太短，发送端可能在帧发完后才检测到碰撞，无法重发，导致冲突未被发现。</li><li>规定最小帧长，确保碰撞一定能被检测到。</li></ul><p>（3）例题应用</p><ul><li>例如最大距离500m，信号传播速率250m&#x2F;μs，带宽100Mbps：<ul><li>传播时延 &#x3D; 500m &#x2F; 250m&#x2F;μs &#x3D; 2μs</li><li>最小帧长 &#x3D; 2 × 2μs × 100Mbps &#x3D; 4μs × 100Mbps &#x3D; 400bit &#x3D; 50字节</li></ul></li></ul><hr><h3 id="CRC校验计算举例"><a href="#CRC校验计算举例" class="headerlink" title="CRC校验计算举例"></a>CRC校验计算举例</h3><p>假设：</p><ul><li>数据D &#x3D; 1101011011（二进制）</li><li>生成多项式G &#x3D; 10011（二进制，4阶）</li></ul><p><strong>计算步骤：</strong></p><ol><li>在数据D后补4个0（G为4阶，多补4位）：1101011011 0000</li><li>用补0后的数据与G做二进制模2除法（异或运算）：<ul><li>11010 ÷ 10011 → 01001</li><li>10011 ÷ 10011 → 00000</li><li>10110 ÷ 10011 → 00101</li><li>…（依次进行，直到最后一位）</li></ul></li><li>最终余数为4位（假设为R），即为CRC校验码。</li><li>发送时，数据D与CRC校验码拼接一起发送。</li></ol><p><strong>结果说明：</strong></p><ul><li>接收方收到后，用相同的G对收到的数据（含CRC）做模2除法，若余数为0，则无差错。</li></ul><p><strong>简化示例：</strong></p><ul><li>D &#x3D; 1101，G &#x3D; 1011（3阶）</li><li>D补0：1101000</li><li>1101 ÷ 1011 → 0110</li><li>0110 ÷ 1011 → 0110（不足除，移下一位）</li><li>01100 ÷ 1011 → 0101</li><li>01010 ÷ 1011 → 0111</li><li>01110 ÷ 1011 → 0105</li><li>01010 ÷ 1011 → 0111</li><li>01110 ÷ 1011 → 0105</li><li>最终余数假设为101</li><li>发送数据：1101 101</li></ul><hr><h3 id="奇偶校验（Parity-Checking）原理"><a href="#奇偶校验（Parity-Checking）原理" class="headerlink" title="奇偶校验（Parity Checking）原理"></a>奇偶校验（Parity Checking）原理</h3><p>奇偶校验是一种简单的数据链路层差错检测方法，主要用于检测单比特错误。</p><p><strong>1. 单比特奇偶校验（Single Bit Parity）</strong></p><ul><li>在每组数据后面加1位校验位（parity bit）。</li><li>发送方根据数据中1的个数决定校验位取0或1，使得整个比特流中1的个数为偶数（偶校验）或奇数（奇校验）。</li><li>接收方收到数据后，重新计算1的个数，若不符则说明发生了单比特错误。</li><li>只能检测单个比特错误，无法纠正错误，也无法检测偶数个比特同时出错。</li></ul><p><strong>2. 二维奇偶校验（Two Dimensional Bit Parity）</strong></p><ul><li>将数据按行和列分别加上奇偶校验位。</li><li>每一行和每一列都增加一个校验位，形成一个校验矩阵。</li><li>能检测并定位单比特错误（可纠正），也能检测部分双比特错误。</li><li>检测能力比单比特奇偶校验更强。</li></ul><p><strong>应用说明：</strong></p><ul><li>奇偶校验实现简单，适合对可靠性要求不高的场景。</li><li>主要用于数据链路层的差错检测。</li></ul><hr><h3 id="信道划分协议详解"><a href="#信道划分协议详解" class="headerlink" title="信道划分协议详解"></a>信道划分协议详解</h3><p>信道划分协议（Channelization Protocols）是一类将共享信道资源在多个用户之间进行物理或逻辑划分，使多个用户可以同时或有序地使用信道的多路访问协议。其核心思想是将信道分割为若干互不干扰的子信道，每个用户占用不同的子信道，从而避免冲突。</p><p>常见的信道划分协议有：</p><h4 id="1-时分多路复用（TDMA-Time-Division-Multiple-Access）"><a href="#1-时分多路复用（TDMA-Time-Division-Multiple-Access）" class="headerlink" title="1. 时分多路复用（TDMA, Time Division Multiple Access）"></a>1. 时分多路复用（TDMA, Time Division Multiple Access）</h4><ul><li>将信道按时间划分为若干时隙，每个用户在分配到的时隙内独占信道发送数据。</li><li>各用户轮流占用信道，互不干扰。</li><li>适合同步环境，时钟同步要求高。</li><li>优点：无冲突，时延可控，适合实时业务。</li><li>缺点：信道利用率受限于分配，空闲时隙会浪费带宽。</li></ul><h4 id="2-频分多路复用（FDMA-Frequency-Division-Multiple-Access）"><a href="#2-频分多路复用（FDMA-Frequency-Division-Multiple-Access）" class="headerlink" title="2. 频分多路复用（FDMA, Frequency Division Multiple Access）"></a>2. 频分多路复用（FDMA, Frequency Division Multiple Access）</h4><ul><li>将信道的频带划分为若干互不重叠的频段，每个用户占用不同的频段进行通信。</li><li>各用户可同时发送，互不干扰。</li><li>典型应用：传统模拟电话、无线电广播。</li><li>优点：实现简单，互不干扰。</li><li>缺点：频谱利用率有限，频带划分固定，灵活性差。</li></ul><h4 id="3-码分多路复用（CDMA-Code-Division-Multiple-Access）"><a href="#3-码分多路复用（CDMA-Code-Division-Multiple-Access）" class="headerlink" title="3. 码分多路复用（CDMA, Code Division Multiple Access）"></a>3. 码分多路复用（CDMA, Code Division Multiple Access）</h4><ul><li>所有用户在同一时间、同一频带上发送数据，但每个用户使用不同的正交码对数据进行编码。</li><li>接收方用相同的码解码，能区分不同用户的数据。</li><li>典型应用：3G移动通信。</li><li>优点：抗干扰能力强，频谱利用率高，支持动态接入。</li><li>缺点：实现复杂，对码的正交性要求高。</li></ul><h4 id="4-其他信道划分方式"><a href="#4-其他信道划分方式" class="headerlink" title="4. 其他信道划分方式"></a>4. 其他信道划分方式</h4><ul><li>波分多路复用（WDMA）：用于光纤通信，将不同波长分配给不同用户。</li><li>空分多路复用（SDMA）：通过空间定向天线等手段区分用户。</li></ul><p><strong>总结：</strong><br>信道划分协议通过时间、频率、码等资源的分割，实现多个用户高效、无冲突地共享信道，广泛应用于有线和无线通信系统。</p><hr><h3 id="实践原则：保持各层独立"><a href="#实践原则：保持各层独立" class="headerlink" title="实践原则：保持各层独立"></a>实践原则：保持各层独立</h3><p>主机和路由器接口除了网络层地址（如IP地址）之外还有MAC地址，这样设计有以下原因：</p><ol><li>局域网为任意网络层协议而设计，MAC地址是“中性”的，不依赖于IP或特定协议。如果适配器只用IP地址而没有MAC地址，就无法支持如IPX、DECnet等其他网络层协议。</li><li>如果适配器使用网络层地址而不是MAC地址，网络层地址必须存储在适配器RAM中，每次适配器移动或断电都要重新配置，管理复杂。</li><li>另一种做法是适配器不使用任何地址，让其接收所有帧并上传，由网络层软件判断是否匹配，但这样会导致主机处理大量无关帧，效率低下。</li></ol><p>因此，为了使网络体系结构中各层次成为独立模块，不同层次需要有各自的寻址方案：</p><ul><li>应用层：主机名</li><li>网络层：IP地址</li><li>数据链路层：MAC地址</li></ul><p>这种分层寻址方案保证了各层的独立性和灵活性。</p><hr><h3 id="有线局域网与无线局域网知识总结"><a href="#有线局域网与无线局域网知识总结" class="headerlink" title="有线局域网与无线局域网知识总结"></a>有线局域网与无线局域网知识总结</h3><h4 id="一、有线局域网（Wired-LAN）"><a href="#一、有线局域网（Wired-LAN）" class="headerlink" title="一、有线局域网（Wired LAN）"></a>一、有线局域网（Wired LAN）</h4><ol><li><p><strong>定义与常见类型</strong></p><ul><li>有线局域网是指通过物理介质（如双绞线、同轴电缆、光纤等）连接的局部范围内的计算机网络。</li><li>典型代表：以太网（Ethernet）、令牌环（Token Ring）、FDDI等。</li></ul></li><li><p><strong>以太网（Ethernet）</strong></p><ul><li>最常用的有线局域网标准，采用星型或总线型拓扑结构。</li><li>采用MAC地址寻址，数据链路层协议。</li><li>介质访问控制：CSMA&#x2F;CD（载波监听多路访问&#x2F;冲突检测）。</li><li>标准最小帧长64字节，最大1518字节。</li><li>速率：10Mbps、100Mbps、1Gbps、10Gbps等。</li><li>物理介质：双绞线、光纤、同轴电缆。</li><li>交换机（Switch）是现代以太网的核心设备。</li></ul></li><li><p><strong>令牌环（Token Ring）</strong></p><ul><li>采用环形拓扑，令牌传递机制避免冲突。</li><li>只有持有令牌的节点才能发送数据。</li><li>速率常见为4Mbps、16Mbps。</li><li>现已较少使用。</li></ul></li><li><p><strong>有线局域网的优缺点</strong></p><ul><li>优点：带宽高、稳定性好、抗干扰能力强、安全性高。</li><li>缺点：布线复杂、灵活性差、扩展性有限。</li></ul></li></ol><h4 id="二、无线局域网（Wireless-LAN-WLAN）"><a href="#二、无线局域网（Wireless-LAN-WLAN）" class="headerlink" title="二、无线局域网（Wireless LAN, WLAN）"></a>二、无线局域网（Wireless LAN, WLAN）</h4><ol><li><p><strong>定义与标准</strong></p><ul><li>无线局域网通过无线电波（如2.4GHz、5GHz）实现设备间的通信，无需物理布线。</li><li>主要标准：IEEE 802.11系列（即Wi-Fi）。</li></ul></li><li><p><strong>Wi-Fi（IEEE 802.11）</strong></p><ul><li>采用星型拓扑，中心设备为无线接入点（AP, Access Point）。</li><li>终端通过无线方式与AP通信，AP再与有线网络连接。</li><li>速率：802.11b（11Mbps）、802.11g（54Mbps）、802.11n（600Mbps）、802.11ac&#x2F;ax（上千Mbps）。</li><li>频段：2.4GHz、5GHz，部分新标准支持6GHz。</li><li>介质访问控制：CSMA&#x2F;CA（载波监听多路访问&#x2F;冲突避免），采用随机退避、ACK确认等机制，避免无线环境下的冲突。</li><li>支持漫游、加密（WEP、WPA、WPA2、WPA3）等安全机制。</li></ul></li><li><p><strong>无线局域网的优缺点</strong></p><ul><li>优点：布线灵活、易于扩展、支持移动性、部署方便。</li><li>缺点：带宽有限、易受干扰、安全性相对较弱、信号覆盖有限。</li></ul></li></ol><h4 id="三、有线与无线局域网的对比"><a href="#三、有线与无线局域网的对比" class="headerlink" title="三、有线与无线局域网的对比"></a>三、有线与无线局域网的对比</h4><table><thead><tr><th>特性</th><th>有线局域网（Ethernet等）</th><th>无线局域网（Wi-Fi等）</th></tr></thead><tbody><tr><td>介质</td><td>双绞线&#x2F;光纤&#x2F;同轴电缆</td><td>无线电波</td></tr><tr><td>带宽</td><td>高（10M~10Gbps）</td><td>较低（几十M~几Gbps）</td></tr><tr><td>稳定性</td><td>高</td><td>易受干扰</td></tr><tr><td>安全性</td><td>高</td><td>需加密防护</td></tr><tr><td>灵活性</td><td>差</td><td>高</td></tr><tr><td>组网方式</td><td>星型&#x2F;总线&#x2F;环型</td><td>星型（AP为中心）</td></tr><tr><td>介质访问协议</td><td>CSMA&#x2F;CD、令牌环等</td><td>CSMA&#x2F;CA</td></tr><tr><td>典型设备</td><td>交换机、网卡、路由器</td><td>无线AP、无线网卡</td></tr></tbody></table><h4 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h4><ul><li>有线局域网：企业、数据中心、对带宽和安全要求高的场所。</li><li>无线局域网：家庭、办公区、公共场所、移动办公等。</li></ul><hr><h3 id="交换机的功能简述"><a href="#交换机的功能简述" class="headerlink" title="交换机的功能简述"></a>交换机的功能简述</h3><ul><li>交换机（Switch）是局域网中常用的数据链路层设备，主要功能是根据数据帧的目的MAC地址，在局域网内实现高效的数据转发。</li><li>维护MAC地址表：自动学习和记录各端口对应的MAC地址，实现帧的定向转发。</li><li>帧转发与过滤：只将数据帧转发到目标主机所在端口，减少广播和冲突，提高网络效率。</li><li>支持全双工通信和端口隔离，提升带宽利用率。</li><li>支持VLAN划分，实现逻辑隔离和安全管理。</li><li>可进行环路检测与生成树协议（STP）防止广播风暴。</li></ul><hr><h3 id="广播风暴详解"><a href="#广播风暴详解" class="headerlink" title="广播风暴详解"></a>广播风暴详解</h3><p><strong>1. 概念</strong></p><ul><li>广播风暴（Broadcast Storm）是指在局域网中，广播帧（如ARP请求、未知目的MAC的数据帧等）大量泛滥，导致网络带宽被严重占用，网络性能急剧下降甚至瘫痪的现象。</li></ul><p><strong>2. 产生原因</strong></p><ul><li>以太网交换机在收到目的MAC地址未知的数据帧时，会将该帧广播到所有端口。</li><li>当网络中存在环路（如多个交换机或网桥连接成环），广播帧会在环路中不断循环、复制，数量呈指数级增长。</li><li>广播风暴也可能由病毒、错误配置或大量ARP请求等异常流量引发。</li></ul><p><strong>3. 危害</strong></p><ul><li>占用大量带宽，导致正常数据无法传输。</li><li>交换机、主机CPU资源被大量无用广播帧消耗，系统响应变慢甚至崩溃。</li><li>网络延迟剧增，丢包严重，业务中断。</li></ul><p><strong>4. 典型场景</strong></p><ul><li>多台交换机或网桥连接成环，未启用生成树协议（STP）。</li><li>局域网内出现病毒或蠕虫，疯狂发送广播包。</li><li>大量主机同时发起ARP请求，或网络中存在ARP欺骗攻击。</li></ul><p><strong>5. 预防与解决方法</strong></p><ul><li>启用生成树协议（STP），自动阻断环路，保证网络拓扑无环。</li><li>合理划分VLAN，限制广播域范围。</li><li>配置广播风暴抑制（Broadcast Storm Control）功能，限制端口广播流量。</li><li>加强网络安全管理，防止恶意广播流量。</li></ul><p><strong>6. 总结</strong></p><ul><li>广播风暴是局域网设计和管理中必须重点防范的问题，合理的网络结构和管理措施是防止广播风暴的关键。</li></ul><hr><h3 id="DHCP协议简介"><a href="#DHCP协议简介" class="headerlink" title="DHCP协议简介"></a>DHCP协议简介</h3><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种应用层协议，用于在IP网络中自动为主机分配IP地址及相关网络配置信息（如子网掩码、网关、DNS服务器等）。</p><p><strong>主要功能：</strong></p><ul><li>自动分配IP地址，避免手动配置，提高管理效率。</li><li>支持IP地址的动态分配、自动回收和续租。</li><li>可集中管理整个网络的IP地址资源。</li></ul><p><strong>工作流程：</strong></p><ol><li><strong>发现（Discover）：</strong> 客户端广播DHCP Discover报文，寻找DHCP服务器。</li><li><strong>提供（Offer）：</strong> DHCP服务器响应，提供可用IP地址和配置信息。</li><li><strong>请求（Request）：</strong> 客户端选择一个服务器，广播DHCP Request报文，申请该IP。</li><li><strong>确认（ACK）：</strong> 服务器确认分配，发送DHCP ACK报文，客户端获得IP地址。</li></ol><p><strong>优点：</strong></p><ul><li>简化网络管理，适合大中型网络。</li><li>支持移动设备和临时接入主机的自动配置。</li></ul><p><strong>应用场景：</strong></p><ul><li>企业、校园、家庭等各种IP网络环境。</li></ul><hr><h3 id="ARP与DHCP的层次与作用对比"><a href="#ARP与DHCP的层次与作用对比" class="headerlink" title="ARP与DHCP的层次与作用对比"></a>ARP与DHCP的层次与作用对比</h3><ul><li><p><strong>DHCP（动态主机配置协议）</strong>：属于应用层协议，主要作用是为主机自动分配IP地址及相关网络参数（如网关、DNS等）。</p><ul><li>典型流程：主机刚接入网络时，通过广播方式向DHCP服务器请求分配IP地址。</li><li>解决“主机如何获得IP地址”的问题。</li></ul></li><li><p><strong>ARP（地址解析协议）</strong>：属于数据链路层与网络层之间的协议，主要作用是将已知的IP地址解析为对应的MAC地址。</p><ul><li>典型流程：主机已知目标IP地址，但不知道其MAC地址时，通过广播ARP请求，获得目标主机的MAC地址。</li><li>解决“主机如何通过IP找到MAC地址”的问题。</li></ul></li></ul><p><strong>总结：</strong></p><ul><li>DHCP用于“找IP地址”，属于应用层，负责主机的网络参数自动配置。</li><li>ARP用于“找MAC地址”，属于网络层与数据链路层之间，负责IP到MAC的映射。</li><li>两者都采用广播、缓存和软状态等机制，但服务对象和协议层次不同。<br><img src="/../photos/posts/csnet/image-4.png" alt="alt text"></li></ul><hr><h3 id="发现机制（Discovery-Mechanisms）"><a href="#发现机制（Discovery-Mechanisms）" class="headerlink" title="发现机制（Discovery Mechanisms）"></a>发现机制（Discovery Mechanisms）</h3><p>在网络中，常见的发现机制主要有两种：</p><ol><li><p><strong>广播（Broadcast）机制</strong></p><ul><li>典型协议：ARP、DHCP。</li><li>工作方式：通过广播方式在局域网内发现目标（如ARP查找MAC地址、DHCP分配IP地址）。</li><li>优点：<ul><li>无需预先配置，零配置，适合即插即用。</li><li>没有中心化的单点故障，去中心化。</li></ul></li><li>缺点：<ul><li>采用泛洪（flooding）方式，随着网络规模增大，广播流量剧增，扩展性差。</li><li>只适合小型或局部网络。</li></ul></li></ul></li><li><p><strong>目录服务（Directory Service）机制</strong></p><ul><li>典型协议：DNS。</li><li>工作方式：通过集中式的目录服务进行资源发现和名称解析。</li><li>优点：<ul><li>无需广播，具备良好的可扩展性，适合大规模网络。</li></ul></li><li>缺点：<ul><li>目录服务的根节点存在被攻击或失效的风险（缓存机制非常关键）。</li><li>需要预先配置（如本地DNS、根服务器等）以实现引导和启动。</li></ul></li></ul></li></ol><p><strong>总结对比：</strong></p><ul><li>广播机制适合小规模、无需配置的场景，但不适合大规模网络。</li><li>目录服务机制适合大规模网络，但需要一定的配置和容错设计。</li></ul><blockquote><p>相关例子：ARP、DHCP采用广播发现，DNS采用目录服务发现。</p></blockquote><hr><h3 id="CSMA-CD（载波监听多路访问-冲突检测）原理与机制"><a href="#CSMA-CD（载波监听多路访问-冲突检测）原理与机制" class="headerlink" title="CSMA&#x2F;CD（载波监听多路访问&#x2F;冲突检测）原理与机制"></a>CSMA&#x2F;CD（载波监听多路访问&#x2F;冲突检测）原理与机制</h3><p>CSMA&#x2F;CD（Carrier Sense Multiple Access with Collision Detection）是以太网中经典的介质访问控制协议，主要用于总线型或集线器型（半双工）以太网环境下多台主机共享同一信道时的数据传输协调。</p><p><strong>工作原理：</strong></p><ol><li><strong>载波监听（Carrier Sense）</strong>：主机在发送数据前，先监听信道是否空闲，只有信道空闲时才开始发送。</li><li><strong>多路访问（Multiple Access）</strong>：多台主机可同时接入同一信道，具备竞争性。</li><li><strong>冲突检测（Collision Detection）</strong>：如果两台主机几乎同时检测到信道空闲并开始发送，数据会发生冲突。主机在发送数据时持续监听信道，若检测到信号异常（冲突），立即停止发送。</li><li><strong>退避重传（Backoff）</strong>：发生冲突后，主机会发送阻塞信号（Jamming Signal），然后各自等待一个随机退避时间后再次尝试发送。退避时间采用二进制指数退避算法，冲突次数越多，等待时间越长。</li></ol><p><strong>特点与应用：</strong></p><ul><li>适用于传统总线型、集线器型以太网（半双工），现代全双工交换式以太网已不再使用CSMA&#x2F;CD。</li><li>随着网络负载增加，冲突概率上升，信道利用率下降。</li><li>以太网最小帧长的设计与CSMA&#x2F;CD机制密切相关，保证冲突能被检测到。</li></ul><p><strong>局限性：</strong></p><ul><li>只适用于半双工、共享信道的环境。</li><li>在全双工和交换式以太网中已被淘汰。</li></ul><p><strong>总结：</strong><br>CSMA&#x2F;CD通过监听信道、检测冲突和随机退避，有效协调了多主机对共享信道的访问，是经典以太网的核心机制之一。</p><hr><h3 id="CSMA-CA（载波监听多路访问-冲突避免）原理与机制"><a href="#CSMA-CA（载波监听多路访问-冲突避免）原理与机制" class="headerlink" title="CSMA&#x2F;CA（载波监听多路访问&#x2F;冲突避免）原理与机制"></a>CSMA&#x2F;CA（载波监听多路访问&#x2F;冲突避免）原理与机制</h3><p>CSMA&#x2F;CA（Carrier Sense Multiple Access with Collision Avoidance）是无线局域网（如Wi-Fi&#x2F;IEEE 802.11）中常用的介质访问控制协议，用于协调多台设备对共享无线信道的访问，避免数据冲突。</p><p><strong>工作原理：</strong></p><ol><li><strong>载波监听（Carrier Sense）</strong>：终端在发送数据前，先监听信道是否空闲。</li><li><strong>冲突避免（Collision Avoidance）</strong>：<ul><li>若信道空闲，终端等待一个随机退避时间（Backoff），若期间信道仍空闲，则开始发送。</li><li>若信道忙，终端持续监听并等待信道空闲后再退避。</li><li>采用随机退避机制，减少多个终端同时发送的概率。</li></ul></li><li><strong>确认机制（ACK）</strong>：数据帧发送后，接收方需返回ACK确认帧，发送方收到ACK才认为发送成功，否则重传。</li><li><strong>RTS&#x2F;CTS机制（可选）</strong>：为进一步减少冲突，发送方可先发送RTS（请求发送）帧，接收方回复CTS（清除发送）帧，收到CTS后再正式发送数据。<ul><li>该机制可有效解决“隐藏终端”问题。</li></ul></li></ol><p><strong>特点与应用：</strong></p><ul><li>主要用于无线局域网（如Wi-Fi），适合广播式、易受干扰的无线环境。</li><li>由于无线信道无法像有线以太网那样检测冲突（无法边发边听），采用冲突避免而非冲突检测。</li><li>通过ACK和RTS&#x2F;CTS机制提高可靠性和信道利用率。</li></ul><p><strong>局限性：</strong></p><ul><li>存在信道占用、退避等待等开销，信道利用率受限。</li><li>在高密度或高负载环境下，冲突和重传概率仍可能较高。</li></ul><p><strong>总结：</strong><br>CSMA&#x2F;CA通过监听信道、随机退避、确认应答和可选的RTS&#x2F;CTS机制，有效减少了无线环境下的冲突，是无线局域网的核心介质访问控制机制。</p><hr><h3 id="CSMA-CD-与-CSMA-CA-的区别总结"><a href="#CSMA-CD-与-CSMA-CA-的区别总结" class="headerlink" title="CSMA&#x2F;CD 与 CSMA&#x2F;CA 的区别总结"></a>CSMA&#x2F;CD 与 CSMA&#x2F;CA 的区别总结</h3><table><thead><tr><th>对比项</th><th>CSMA&#x2F;CD（冲突检测）</th><th>CSMA&#x2F;CA（冲突避免）</th></tr></thead><tbody><tr><td>典型应用场景</td><td>有线以太网（Ethernet，半双工）</td><td>无线局域网（Wi-Fi&#x2F;IEEE 802.11）</td></tr><tr><td>介质类型</td><td>有线，信号可检测</td><td>无线，信号难以边发边听</td></tr><tr><td>冲突处理方式</td><td>允许冲突发生，检测到冲突后停止发送并退避</td><td>通过退避和控制机制尽量避免冲突发生</td></tr><tr><td>主要机制</td><td>监听信道、检测冲突、冲突后退避重传</td><td>监听信道、随机退避、ACK确认、RTS&#x2F;CTS机制</td></tr><tr><td>能否检测冲突</td><td>可以（边发边听）</td><td>不能（无线无法边发边听）</td></tr><tr><td>退避算法</td><td>二进制指数退避</td><td>随机退避</td></tr><tr><td>可靠性机制</td><td>无确认机制</td><td>ACK确认机制，RTS&#x2F;CTS可选</td></tr><tr><td>适用网络结构</td><td>总线型&#x2F;集线器型有线网络</td><td>无线广播式网络</td></tr><tr><td>现状</td><td>现代全双工以太网已不再使用</td><td>仍为Wi-Fi等无线局域网的核心机制</td></tr></tbody></table><p><strong>简要总结：</strong></p><ul><li>CSMA&#x2F;CD 适用于有线以太网，允许冲突发生并检测冲突，依赖于信号可检测。</li><li>CSMA&#x2F;CA 适用于无线局域网，因无线信道无法检测冲突，采用冲突避免和确认机制。</li><li>两者都属于多路访问协议，但根据物理介质和应用场景采用不同的冲突处理策略。</li></ul><hr><h3 id="网桥的作用与工作原理"><a href="#网桥的作用与工作原理" class="headerlink" title="网桥的作用与工作原理"></a>网桥的作用与工作原理</h3><p><strong>1. 网桥的作用</strong></p><ul><li>网桥（Bridge）是一种工作在数据链路层的网络互联设备，用于连接两个或多个局域网段，实现不同局域网之间的数据转发和隔离冲突域。</li><li>能够根据MAC地址转发数据帧，减少广播域范围，提高网络性能。</li><li>典型应用于以太网分段、扩展局域网、隔离冲突域等场景。</li></ul><p><strong>2. 网桥的工作原理</strong></p><ul><li>网桥通过监听经过的数据帧，自动学习源MAC地址与端口的对应关系，建立转发表（MAC地址表）。</li><li>当接收到数据帧时，查找转发表：<ul><li>若目标MAC地址已在表中，定向转发到对应端口。</li><li>若未知，则广播该帧到除接收端口外的所有端口。</li></ul></li><li>通过地址学习和转发表，实现帧的高效转发和冲突域隔离。</li></ul><p><strong>3. 网桥的路由机制</strong></p><ul><li><strong>转发表（Forwarding Table）</strong>：记录MAC地址与端口的映射关系，实现定向转发。</li><li><strong>地址学习（Address Learning）</strong>：自动学习源MAC地址，动态维护转发表。</li><li><strong>生成树算法（Spanning Tree Protocol, STP）</strong>：为防止网络环路，网桥间运行生成树协议，自动阻断冗余链路，形成无环拓扑，避免广播风暴。</li><li><strong>路由发现机制</strong>：通过生成树协议和地址学习，自动发现网络结构和最优转发路径，无需人工配置。</li></ul><p><strong>总结：</strong></p><ul><li>网桥通过地址学习和转发表实现高效转发，通过生成树协议防止环路和广播风暴，是局域网互联和分段的重要设备。</li></ul><hr><h3 id="集线器（Hub）的作用与原理"><a href="#集线器（Hub）的作用与原理" class="headerlink" title="集线器（Hub）的作用与原理"></a>集线器（Hub）的作用与原理</h3><p><strong>1. 集线器的定义与结构</strong></p><ul><li>集线器（Hub）是局域网中常见的物理层设备，常用于星型拓扑（star layout）结构的网络。</li><li>在星型拓扑中，所有终端（主机）通过两根线（发送和接收）与中心的集线器相连。</li></ul><p><strong>2. 工作原理</strong></p><ul><li>Hub 的主要功能类似于中继器（Repeater），属于“无智能”设备。</li><li>当某个终端发送数据时，Hub 会将收到的信号复制并转发到所有其他端口（即所有其他终端）。</li><li>Hub 不会分析数据内容，也不区分目标，只是简单地广播信号。</li></ul><p><strong>3. 物理与逻辑结构</strong></p><ul><li>物理上，Hub 组网为星型结构（每个终端都连到中心 Hub）。</li><li>逻辑上，Hub 组网等价于总线型（bus）：任何一个终端发出的数据，所有终端都能收到。</li><li>如果有两个终端同时发送数据，会发生冲突（collision），所有终端都处于同一个冲突域。</li></ul><p><strong>4. 特点与局限</strong></p><ul><li>Hub 不具备数据定向转发能力，所有端口共享带宽，冲突概率高。</li><li>适用于小型、低速、对性能要求不高的局域网。</li><li>现代以太网已被交换机（Switch）取代，Hub 基本淘汰。</li></ul><p><strong>5. 小结</strong></p><ul><li>Hub 是星型拓扑的中心设备，起到信号中继和广播的作用。</li><li>物理上为星型，逻辑上为总线型，所有终端共享冲突域。</li><li>不具备智能转发和隔离冲突域的能力。</li></ul><hr><h3 id="IEEE-802-11-无线局域网体系结构（WLAN-Architecture）"><a href="#IEEE-802-11-无线局域网体系结构（WLAN-Architecture）" class="headerlink" title="IEEE 802.11 无线局域网体系结构（WLAN Architecture）"></a>IEEE 802.11 无线局域网体系结构（WLAN Architecture）</h3><p><strong>1. Station（STA，站点）</strong></p><ul><li>指具备IEEE 802.11标准MAC和物理层功能的无线设备，如无线网卡、手机、笔记本等终端。</li></ul><p><strong>2. Access Point（AP，无线接入点）</strong></p><ul><li>作为无线终端与分布式系统（DS）之间的桥梁，负责协调和管理无线终端的接入。</li><li>通过无线信道为终端提供接入服务。</li></ul><p><strong>3. Basic Service Set（BSS，基本服务集）</strong></p><ul><li>由一个AP和若干STA组成的最小无线局域网单元。</li><li>一个BSS通常覆盖一个物理区域（如一个房间），由AP协调管理。</li></ul><p><strong>4. Extended Service Set（ESS，扩展服务集）</strong></p><ul><li>由多个BSS通过分布式系统（DS）互联组成。</li><li>DS可以是交换机、有线网络或无线网络。</li><li>ESS对用户呈现为一个单一的逻辑局域网，实现无线漫游和大范围覆盖。</li><li>通过Portal（如路由器）实现与有线LAN&#x2F;Internet的互通。</li></ul><p><strong>5. Distribution System（DS，分布式系统）</strong></p><ul><li>用于连接多个BSS和集成有线LAN，形成一个ESS。</li><li>DS可采用多种实现方式（如以太网交换机、无线Mesh等）。</li></ul><p><strong>6. 体系结构图解说明</strong></p><ul><li>图中展示了多个BSS（每个BSS有一个AP和若干STA），通过DS互联，组成一个ESS。</li><li>Portal实现ESS与有线LAN&#x2F;Internet的连接。</li><li>ESS为用户提供无缝漫游和统一的无线局域网服务。</li></ul><p><strong>7. 小结</strong></p><ul><li>IEEE 802.11 WLAN采用分层、分区的体系结构，支持灵活扩展和大范围覆盖。</li><li>关键组件包括STA、AP、BSS、ESS、DS和Portal。</li><li>ESS实现了多个BSS的互联和统一管理，是企业和校园无线网络的基础架构。</li></ul><hr><h3 id="IEEE-802-11-帧间隔优先级机制（SIFS、PIFS、DIFS）"><a href="#IEEE-802-11-帧间隔优先级机制（SIFS、PIFS、DIFS）" class="headerlink" title="IEEE 802.11 帧间隔优先级机制（SIFS、PIFS、DIFS）"></a>IEEE 802.11 帧间隔优先级机制（SIFS、PIFS、DIFS）</h3><p>IEEE 802.11 无线局域网采用三种不同的帧间隔（IFS, Inter Frame Space）来实现信道访问的优先级控制，分别是：</p><ul><li><strong>SIFS（Short Inter Frame Space，短帧间隔）</strong><ul><li>最短的IFS，优先级最高。</li><li>用于所有需要立即响应的场景，如ACK、CTS、数据帧之间的连续发送等。</li></ul></li><li><strong>PIFS（Point Coordination Function IFS，点协调功能帧间隔）</strong><ul><li>中等长度的IFS。</li><li>主要由中心控制器（AP）在PCF（点协调功能）模式下发起轮询时使用。</li></ul></li><li><strong>DIFS（Distributed Coordination Function IFS，分布式协调功能帧间隔）</strong><ul><li>最长的IFS，优先级最低。</li><li>用于普通终端争用信道时的异步数据帧发送。</li></ul></li></ul><p>三者的关系为：SIFS &lt; PIFS &lt; DIFS。</p><p>这种设计保证了：</p><ul><li>需要快速响应的帧（如ACK、CTS）能优先获得信道，减少时延。</li><li>控制帧（如AP轮询）优先于普通数据帧。</li><li>普通数据帧需等待最长的DIFS，优先级最低。</li></ul><p>下图为三种IFS的相对长度和优先级关系示意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DIFS</span><br><span class="line">PIFS</span><br><span class="line">SIFS</span><br><span class="line">Frame |&lt;--SIFS--&gt;| Frame |&lt;--PIFS--&gt;| Frame |&lt;--DIFS--&gt;| Frame</span><br></pre></td></tr></table></figure><p>通过这种分级帧间隔机制，IEEE 802.11 实现了无线信道访问的公平性和高效性。</p><hr><h3 id="IEEE-802-11-点协调功能（PCF）与超级帧机制"><a href="#IEEE-802-11-点协调功能（PCF）与超级帧机制" class="headerlink" title="IEEE 802.11 点协调功能（PCF）与超级帧机制"></a>IEEE 802.11 点协调功能（PCF）与超级帧机制</h3><h4 id="1-点协调功能（PCF-Point-Coordination-Function）"><a href="#1-点协调功能（PCF-Point-Coordination-Function）" class="headerlink" title="1. 点协调功能（PCF, Point Coordination Function）"></a>1. 点协调功能（PCF, Point Coordination Function）</h4><ul><li>PCF是一种中心化的无线介质访问控制机制，由接入点（AP）作为点协调器（Point Coordinator, PC）统一调度。</li><li>AP定期以轮询（round-robin）方式向各终端（STA）发起轮询（poll），被轮询到的终端才能发送数据，避免冲突，适合时延敏感业务。</li><li>AP在发起轮询时使用PIFS（优先级高于普通终端的DIFS），可以抢占信道，锁定异步流量，保证轮询和响应期间的信道独占。</li><li>终端收到轮询后，若有数据需发送，则用SIFS（最高优先级）立即响应。</li><li>若AP未收到响应，在预期时间内会继续轮询下一个终端，直到本轮结束。</li></ul><h4 id="2-超级帧（Super-frame）机制"><a href="#2-超级帧（Super-frame）机制" class="headerlink" title="2. 超级帧（Super-frame）机制"></a>2. 超级帧（Super-frame）机制</h4><ul><li>超级帧由PCF定义，将时间划分为轮询期和争用期两部分。<ul><li>轮询期（contend-free period）：AP轮询所有终端，保证无冲突通信。</li><li>争用期（contention period）：允许普通终端采用DCF机制争用信道，进行异步通信。</li></ul></li><li>超级帧开始时，AP通过beacon帧宣布超级帧的起点，并创建无冲突期。</li><li>超级帧结束时，AP再次用PIFS争用信道，进入下一个超级帧周期。</li><li>这样既保证了时延敏感业务的服务质量，又兼容普通异步业务的接入。</li></ul><blockquote><p>超级帧机制通过轮询和争用期的划分，实现了无线局域网中有中心调度与分布式竞争的结合，提升了服务质量和信道利用率。</p></blockquote><hr><h3 id="IEEE-802-11-分布式协调功能（DCF）原理与工作流程"><a href="#IEEE-802-11-分布式协调功能（DCF）原理与工作流程" class="headerlink" title="IEEE 802.11 分布式协调功能（DCF）原理与工作流程"></a>IEEE 802.11 分布式协调功能（DCF）原理与工作流程</h3><h4 id="1-DCF（Distributed-Coordination-Function）原理"><a href="#1-DCF（Distributed-Coordination-Function）原理" class="headerlink" title="1. DCF（Distributed Coordination Function）原理"></a>1. DCF（Distributed Coordination Function）原理</h4><ul><li>DCF是IEEE 802.11无线局域网中最基本、最常用的介质访问控制机制，采用**CSMA&#x2F;CA（载波监听多路访问&#x2F;冲突避免）**协议。</li><li>所有终端平等竞争信道，无中心调度，适合异步、分布式的无线通信环境。</li><li>由于无线环境无法像有线以太网那样检测冲突（不能边发边听），DCF采用冲突避免和确认机制来保证数据可靠传输。</li></ul><h4 id="2-DCF的完整工作流程"><a href="#2-DCF的完整工作流程" class="headerlink" title="2. DCF的完整工作流程"></a>2. DCF的完整工作流程</h4><ol><li><p><strong>监听信道（Carrier Sensing）</strong></p><ul><li>终端准备发送数据前，先监听信道是否空闲。</li><li>若信道忙，则持续监听，直到信道空闲。</li></ul></li><li><p><strong>等待DIFS（Distributed Inter Frame Space）</strong></p><ul><li>信道空闲后，终端需等待一个DIFS时间（最长的帧间隔，优先级最低），以保证高优先级帧（如SIFS、PIFS）优先发送。</li></ul></li><li><p><strong>随机退避（Backoff）机制</strong></p><ul><li>若有多个终端同时等待发送，为避免冲突，每个终端在DIFS后会选择一个随机退避时间（Backoff Time）。</li><li>退避时间以时隙为单位，在[0, CW-1]之间随机选择（CW为争用窗口）。</li><li>退避计数在信道空闲时递减，若信道变忙则暂停计数，等信道再次空闲后继续。</li></ul></li><li><p><strong>发送数据帧</strong></p><ul><li>退避计数减为0时，终端开始发送数据帧。</li></ul></li><li><p><strong>等待ACK确认</strong></p><ul><li>数据帧发送后，接收方在SIFS（最短帧间隔）后立即返回ACK确认帧。</li><li>发送方收到ACK，认为本次发送成功；若未收到ACK，则认为发生冲突或丢包，进入重传流程。</li></ul></li><li><p><strong>重传与退避窗口调整</strong></p><ul><li>若发送失败，终端将CW加倍（指数退避），重新选择退避时间，重复上述流程，直到发送成功或达到最大重传次数。</li></ul></li></ol><h4 id="3-DCF的关键机制与特点"><a href="#3-DCF的关键机制与特点" class="headerlink" title="3. DCF的关键机制与特点"></a>3. DCF的关键机制与特点</h4><ul><li><strong>CSMA&#x2F;CA</strong>：通过监听信道和随机退避，尽量避免冲突发生。</li><li><strong>ACK确认</strong>：每次数据发送都需接收方返回ACK，保证可靠性。</li><li><strong>无冲突检测</strong>：无线环境无法检测冲突，只能通过ACK机制间接判断。</li><li><strong>优先级控制</strong>：通过不同的IFS（SIFS、PIFS、DIFS）实现帧类型的优先级调度。</li><li><strong>RTS&#x2F;CTS机制（可选）</strong>：为解决隐藏终端问题，可在数据发送前先交换RTS&#x2F;CTS帧，进一步减少冲突。</li></ul><blockquote><p>DCF机制保证了无线局域网中各终端公平、有效地竞争信道，适用于大多数Wi-Fi应用场景。</p></blockquote><hr><h3 id="解决隐藏终端问题"><a href="#解决隐藏终端问题" class="headerlink" title="解决隐藏终端问题"></a>解决隐藏终端问题</h3><p>在无线局域网中，<strong>隐藏终端问题</strong>是指两个终端A和C虽然都能与接入点B通信，但A和C之间互相不可见（即彼此信号覆盖不到），导致它们可能会同时向B发送数据，从而发生冲突，但A和C无法直接检测到对方的存在。</p><h4 id="1-RTS-CTS机制"><a href="#1-RTS-CTS机制" class="headerlink" title="1. RTS&#x2F;CTS机制"></a>1. RTS&#x2F;CTS机制</h4><p>IEEE 802.11为了解决隐藏终端问题，引入了<strong>RTS&#x2F;CTS（Request to Send &#x2F; Clear to Send）机制</strong>：</p><ul><li><strong>发送前协商</strong>：发送方先发送RTS帧（请求发送）给接入点（或目标终端），请求占用信道。</li><li><strong>接收方响应</strong>：接收方收到RTS后，若信道空闲，则回复CTS帧（允许发送）。</li><li><strong>通知周围终端</strong>：收到CTS帧的所有终端会在指定时间内避免发送数据，防止冲突。</li><li><strong>数据发送</strong>：发送方收到CTS后，立即发送数据帧，保证数据传输期间信道独占。</li><li><strong>ACK确认</strong>：数据帧发送完毕后，接收方返回ACK确认帧。</li></ul><p>通过RTS&#x2F;CTS机制，即使A和C互不可见，只要它们都能收到B的CTS，就能避免同时发送数据，减少冲突。</p><hr><h3 id="802-11的帧类型和帧格式"><a href="#802-11的帧类型和帧格式" class="headerlink" title="802.11的帧类型和帧格式"></a>802.11的帧类型和帧格式</h3><h4 id="1-802-11帧类型"><a href="#1-802-11帧类型" class="headerlink" title="1. 802.11帧类型"></a>1. 802.11帧类型</h4><p>IEEE 802.11定义了三大类帧类型：</p><ul><li><strong>管理帧（Management Frame）</strong>：用于网络的建立、维护和终止，如Beacon、Probe、Authentication、Association等。</li><li><strong>控制帧（Control Frame）</strong>：用于信道控制和数据传输的协作，如RTS、CTS、ACK、PS-Poll等。</li><li><strong>数据帧（Data Frame）</strong>：用于实际的数据传输。</li></ul><h4 id="2-802-11帧格式"><a href="#2-802-11帧格式" class="headerlink" title="2. 802.11帧格式"></a>2. 802.11帧格式</h4><p>典型的802.11数据帧格式如下：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Frame Control</td><td>帧类型、子类型、控制信息</td></tr><tr><td>Duration&#x2F;ID</td><td>信道占用时间或标识</td></tr><tr><td>Address 1</td><td>接收方地址</td></tr><tr><td>Address 2</td><td>发送方地址</td></tr><tr><td>Address 3</td><td>BSSID或目的&#x2F;源地址</td></tr><tr><td>Sequence Control</td><td>序列号、分片号</td></tr><tr><td>Address 4</td><td>（仅在WDS时使用）</td></tr><tr><td>Payload</td><td>数据载荷</td></tr><tr><td>crc</td><td>帧校验序列</td></tr></tbody></table><ul><li>802.11帧最多可包含4个地址字段，支持多种转发场景（如AP、STA、分布式系统等）。</li><li>帧控制字段包含帧类型、子类型、加密、重传等控制信息。</li></ul><p><img src="/../photos/posts/csnet/image-7.png" alt="alt text"></p><hr><h3 id="802-11与以太网帧格式比较"><a href="#802-11与以太网帧格式比较" class="headerlink" title="802.11与以太网帧格式比较"></a>802.11与以太网帧格式比较</h3><table><thead><tr><th>对比项</th><th>802.11帧格式</th><th>以太网帧格式</th></tr></thead><tbody><tr><td>地址字段</td><td>最多4个（支持AP、STA、DS等场景）</td><td>2个（源MAC、目的MAC）</td></tr><tr><td>帧类型</td><td>管理帧、控制帧、数据帧</td><td>仅数据帧</td></tr><tr><td>控制字段</td><td>帧控制、序列控制、持续时间等</td><td>类型&#x2F;长度字段</td></tr><tr><td>校验</td><td>FCS</td><td>FCS</td></tr><tr><td>适用场景</td><td>无线局域网，支持多跳、漫游</td><td>有线局域网，点对点或广播</td></tr><tr><td>其他</td><td>支持加密、分片、功率管理等</td><td>不支持</td></tr></tbody></table><ul><li>802.11帧结构更复杂，适应无线环境的多样需求，如漫游、功率管理、加密等。</li><li>以太网帧结构简单，主要用于有线点对点或广播通信。</li></ul><hr><h3 id="非对称加密算法：RSA算法"><a href="#非对称加密算法：RSA算法" class="headerlink" title="非对称加密算法：RSA算法"></a>非对称加密算法：RSA算法</h3><h4 id="1-密钥生成过程"><a href="#1-密钥生成过程" class="headerlink" title="1. 密钥生成过程"></a>1. 密钥生成过程</h4><ol><li><strong>选择两个大素数</strong>：随机选择两个足够大的素数p和q。</li><li><strong>计算模数n</strong>：n &#x3D; p × q，n将作为公钥和私钥的一部分。</li><li><strong>计算欧拉函数φ(n)</strong>：φ(n) &#x3D; (p-1) × (q-1)。</li><li><strong>选择公钥指数e</strong>：选择一个与φ(n)互质的整数e（1 &lt; e &lt; φ(n)），常用65537。</li><li><strong>计算私钥指数d</strong>：d是e关于φ(n)的模反元素，即满足 e × d ≡ 1 (mod φ(n))。</li><li><strong>公钥和私钥</strong>：<ul><li>公钥：(n, e)</li><li>私钥：(n, d)</li></ul></li></ol><h4 id="2-RSA加密和解密计算过程"><a href="#2-RSA加密和解密计算过程" class="headerlink" title="2. RSA加密和解密计算过程"></a>2. RSA加密和解密计算过程</h4><ul><li><p><strong>加密过程</strong>：<br>明文M，密文C的计算公式为：<br>C &#x3D; M^e mod n</p></li><li><p><strong>解密过程</strong>：<br>密文C，明文M的计算公式为：<br>M &#x3D; C^d mod n</p></li></ul><h4 id="3-原理说明"><a href="#3-原理说明" class="headerlink" title="3. 原理说明"></a>3. 原理说明</h4><ul><li>RSA是一种典型的公钥加密算法，属于非对称加密，安全性基于大数分解难题。</li><li>加密密钥和解密密钥不同，公钥可公开，私钥需保密。</li><li>既可用于加密数据，也可用于数字签名（用私钥加密摘要，公钥验证）。</li></ul><blockquote><p>RSA算法广泛应用于数据加密、身份认证和数字签名等场景，是现代网络安全的基础算法之一。</p></blockquote><hr><h3 id="公钥系统相关知识详解"><a href="#公钥系统相关知识详解" class="headerlink" title="公钥系统相关知识详解"></a>公钥系统相关知识详解</h3><h4 id="1-公钥加密机制的组成元素"><a href="#1-公钥加密机制的组成元素" class="headerlink" title="1. 公钥加密机制的组成元素"></a>1. 公钥加密机制的组成元素</h4><ul><li><strong>公钥（Public Key）与私钥（Private Key）</strong>：每个用户拥有一对密钥，公钥公开，私钥保密。</li><li><strong>加密算法</strong>：如RSA、ElGamal等，利用公钥加密、私钥解密，实现机密性。</li><li><strong>签名算法</strong>：用私钥对消息摘要签名，公钥验证签名，实现认证与完整性。</li><li><strong>密钥分发与管理</strong>：如何安全地分发和管理公钥，防止伪造和中间人攻击。</li></ul><h4 id="2-加密和数字签名"><a href="#2-加密和数字签名" class="headerlink" title="2. 加密和数字签名"></a>2. 加密和数字签名</h4><ul><li><strong>加密</strong>：发送方用接收方的公钥加密消息，只有接收方能用私钥解密，保证机密性。</li><li><strong>数字签名</strong>：发送方用自己的私钥对消息摘要加密（签名），接收方用发送方公钥验证签名，保证消息来源和完整性，防止否认。</li></ul><h4 id="3-Diffie-Hellman密钥交换过程"><a href="#3-Diffie-Hellman密钥交换过程" class="headerlink" title="3. Diffie-Hellman密钥交换过程"></a>3. Diffie-Hellman密钥交换过程</h4><ul><li>Diffie-Hellman是一种安全的密钥协商协议，允许双方在不安全信道上协商出一个共享密钥。</li><li><strong>过程简述</strong>：<ol><li>双方约定一个大素数p和基g。</li><li>A选择随机数a，计算A &#x3D; g^a mod p，发送给B。</li><li>B选择随机数b，计算B &#x3D; g^b mod p，发送给A。</li><li>A计算共享密钥K &#x3D; B^a mod p，B计算K &#x3D; A^b mod p，结果相同。</li></ol></li><li><strong>特点</strong>：密钥协商过程即使被窃听，攻击者也无法推算出最终密钥（基于离散对数难题）。</li></ul><h4 id="4-数字证书的概念和构造，CA"><a href="#4-数字证书的概念和构造，CA" class="headerlink" title="4. 数字证书的概念和构造，CA"></a>4. 数字证书的概念和构造，CA</h4><ul><li><strong>数字证书（Digital Certificate）</strong>：由权威机构（CA，证书授权中心）签发，绑定公钥与身份信息，防止公钥伪造。</li><li><strong>内容</strong>：持有者身份、公钥、有效期、CA签名等。</li><li><strong>CA（Certificate Authority）</strong>：负责验证身份、签发和吊销证书，是信任链的根。</li><li><strong>作用</strong>：通过证书链和CA签名，用户可验证对方公钥的真实性，防止中间人攻击。</li></ul><h4 id="5-安全电子邮件系统设计"><a href="#5-安全电子邮件系统设计" class="headerlink" title="5. 安全电子邮件系统设计"></a>5. 安全电子邮件系统设计</h4><ul><li><strong>目标</strong>：保证邮件的机密性、完整性、认证和不可否认性。</li><li><strong>常用方案</strong>：<ul><li><strong>加密</strong>：用收件人公钥加密邮件内容，防止被窃听。</li><li><strong>数字签名</strong>：发件人用私钥签名邮件，收件人用公钥验证，保证来源和内容未被篡改。</li><li><strong>数字证书</strong>：用于分发和验证公钥，防止伪造。</li></ul></li><li><strong>典型协议</strong>：PGP（Pretty Good Privacy）、S&#x2F;MIME（安全多用途互联网邮件扩展）。</li><li><strong>流程</strong>：<ol><li>发件人对邮件内容做摘要并签名。</li><li>用收件人公钥加密邮件和签名。</li><li>收件人用私钥解密，再用发件人公钥验证签名。</li></ol></li></ul><hr><p><strong>总结</strong>：<br>公钥系统通过加密、签名、密钥交换和数字证书等机制，保障了网络通信的安全性和可靠性，广泛应用于HTTPS、VPN、安全邮件等场景。</p><hr><h3 id="NAT原理及优缺点"><a href="#NAT原理及优缺点" class="headerlink" title="NAT原理及优缺点"></a>NAT原理及优缺点</h3><p>**NAT（Network Address Translation，网络地址转换）**是一种将私有网络地址与公网地址进行转换的技术，常用于局域网主机共享上网。</p><ul><li><strong>原理</strong>：NAT设备（如路由器）在数据包通过时，将私有IP地址和端口号转换为公网IP和端口号，返回时再转换回来。</li><li><strong>类型</strong>：<ul><li>静态NAT：一一映射，私有IP和公网IP固定对应。</li><li>动态NAT：从公网IP池中动态分配公网地址。</li><li>NAPT（端口复用）：多个私有IP通过同一公网IP出网，靠端口号区分。</li></ul></li><li><strong>优点</strong>：<ul><li>节省公网IP地址资源。</li><li>隐藏内部网络结构，提高安全性。</li><li>支持局域网主机共享上网。</li></ul></li><li><strong>缺点</strong>：<ul><li>破坏端到端通信，某些协议（如P2P、VoIP）兼容性差。</li><li>需要特殊处理端口映射和某些应用层协议。</li><li>影响IP包头校验和，增加处理开销。</li></ul></li></ul><hr><h3 id="ARP地址解析原理和流程"><a href="#ARP地址解析原理和流程" class="headerlink" title="ARP地址解析原理和流程"></a>ARP地址解析原理和流程</h3><p>**ARP（Address Resolution Protocol，地址解析协议）**用于将IP地址解析为对应的MAC地址，工作在网络层与数据链路层之间。</p><ul><li><strong>原理</strong>：主机已知目标IP地址，但不知道其MAC地址时，通过ARP协议查询。</li><li><strong>流程</strong>：<ol><li>主机在局域网内广播ARP请求包，询问“谁是这个IP地址，请告诉我你的MAC地址”。</li><li>目标主机收到后，回复ARP响应包，告知自己的MAC地址。</li><li>发送方收到响应后，将IP-MAC映射缓存到本地ARP表中，后续直接使用。</li></ol></li><li><strong>特点</strong>：<ul><li>采用广播方式，适合局域网。</li><li>有ARP缓存，减少频繁广播。</li><li>存在ARP欺骗等安全隐患。</li></ul></li></ul><hr><h3 id="DHCP动态地址获取的过程"><a href="#DHCP动态地址获取的过程" class="headerlink" title="DHCP动态地址获取的过程"></a>DHCP动态地址获取的过程</h3><p>**DHCP（Dynamic Host Configuration Protocol）**用于自动为主机分配IP地址及相关网络参数。</p><ul><li><strong>流程</strong>：<ol><li><strong>Discover</strong>：客户端广播DHCP Discover报文，寻找DHCP服务器。</li><li><strong>Offer</strong>：服务器响应，提供可用IP地址和配置信息（DHCP Offer）。</li><li><strong>Request</strong>：客户端选择一个服务器，广播DHCP Request报文，申请该IP。</li><li><strong>ACK</strong>：服务器确认分配，发送DHCP ACK报文，客户端获得IP地址。</li></ol></li><li><strong>优点</strong>：<ul><li>自动分配IP，简化管理。</li><li>支持IP地址动态分配、回收和续租。</li></ul></li><li><strong>应用场景</strong>：企业、校园、家庭等各种IP网络环境。</li></ul><hr><h3 id="ICMP：用于发送出错信息，Ping和traceroute的实现原理"><a href="#ICMP：用于发送出错信息，Ping和traceroute的实现原理" class="headerlink" title="ICMP：用于发送出错信息，Ping和traceroute的实现原理"></a>ICMP：用于发送出错信息，Ping和traceroute的实现原理</h3><p>**ICMP（Internet Control Message Protocol，互联网控制报文协议）**是IP协议的辅助协议，主要用于发送网络错误报告和诊断信息。</p><ul><li><strong>作用</strong>：<ul><li>发送网络层错误信息（如目标不可达、超时等）。</li><li>支持网络诊断工具（如Ping、traceroute）。</li></ul></li></ul><h4 id="Ping原理"><a href="#Ping原理" class="headerlink" title="Ping原理"></a>Ping原理</h4><ul><li><strong>Ping</strong>利用ICMP的Echo Request（回显请求）和Echo Reply（回显应答）报文测试主机连通性和时延。</li><li>流程：发送方向目标主机发送ICMP Echo Request，目标主机收到后回复Echo Reply，发送方统计往返时间和丢包率。</li></ul><h4 id="Traceroute原理"><a href="#Traceroute原理" class="headerlink" title="Traceroute原理"></a>Traceroute原理</h4><ul><li><strong>Traceroute</strong>用于探测数据包到目标主机所经过的路由路径。</li><li>实现方式：发送TTL（生存时间）递增的IP包，每经过一个路由器TTL减1，TTL为0时路由器返回ICMP超时报文，发送方据此确定路径上的每一跳。</li><li>最终目标主机收到包后返回ICMP端口不可达或Echo Reply，路径探测完成。</li></ul><hr><p><strong>总结</strong>：  </p><ul><li>NAT实现私有网络与公网的地址转换，节省IP资源但影响端到端通信。</li><li>ARP实现IP到MAC的映射，保证局域网内通信。</li><li>DHCP自动分配IP地址，简化网络管理。</li><li>ICMP用于网络错误报告和诊断，Ping和traceroute是常用的网络测试工具。</li></ul><hr><h3 id="自治系统与路由方式详解"><a href="#自治系统与路由方式详解" class="headerlink" title="自治系统与路由方式详解"></a>自治系统与路由方式详解</h3><h4 id="1-IGP与EGP的概念"><a href="#1-IGP与EGP的概念" class="headerlink" title="1. IGP与EGP的概念"></a>1. IGP与EGP的概念</h4><ul><li><strong>自治系统（AS, Autonomous System）</strong>：由同一技术管理和路由策略控制的一组IP网络和路由器，通常由一个运营商或大型机构管理。</li><li><strong>IGP（Interior Gateway Protocol，内部网关协议）</strong>：用于AS内部各路由器之间的路由信息交换和路径选择，如RIP、OSPF等。</li><li><strong>EGP（Exterior Gateway Protocol，外部网关协议）</strong>：用于不同AS之间的路由信息交换和路径选择，当前主要指BGP。</li></ul><h4 id="2-内部路由协议（IGP）"><a href="#2-内部路由协议（IGP）" class="headerlink" title="2. 内部路由协议（IGP）"></a>2. 内部路由协议（IGP）</h4><ul><li><p><strong>距离向量协议（RIP, Routing Information Protocol）</strong></p><ul><li>基于距离向量算法，每个路由器定期向邻居广播自己的路由表。</li><li>跳数作为度量，最大跳数为15，16表示不可达。</li><li>实现简单，适合小型网络，但收敛慢，易产生环路。</li></ul></li><li><p><strong>链路状态协议（OSPF, Open Shortest Path First）</strong></p><ul><li>基于链路状态算法，路由器通过洪泛方式通告链路状态信息，获得全网拓扑。</li><li>使用Dijkstra算法计算最短路径，度量为“成本”。</li><li>收敛快，支持大规模网络和分层设计（区域Area），广泛应用于企业和运营商网络。</li></ul></li><li><p><strong>路由结构图与路由表的生成</strong></p><ul><li>距离向量协议通过邻居信息逐步更新路由表。</li><li>链路状态协议通过全网拓扑图计算最优路径，生成路由表。</li></ul></li></ul><h4 id="3-BGP（边界网关协议）"><a href="#3-BGP（边界网关协议）" class="headerlink" title="3. BGP（边界网关协议）"></a>3. BGP（边界网关协议）</h4><ul><li><p><strong>BGP的功能</strong></p><ul><li>BGP（Border Gateway Protocol）是目前互联网中唯一广泛使用的EGP协议。</li><li>主要用于不同AS之间的路由信息交换，实现互联网范围的路由可达性和策略控制。</li><li>支持路由聚合、环路避免、策略过滤等高级功能。</li></ul></li><li><p><strong>BGP的基本报文类型和工作方式</strong></p><ul><li><strong>报文类型</strong>：OPEN（建立连接）、UPDATE（通告路由）、KEEPALIVE（保持连接）、NOTIFICATION（错误通知）。</li><li><strong>工作方式</strong>：<ul><li>BGP路由器之间建立TCP连接，交换OPEN报文建立邻居关系。</li><li>通过UPDATE报文通告可达前缀和撤销路由。</li><li>定期发送KEEPALIVE报文保持连接。</li><li>支持路径向量机制，通过AS Path等属性避免环路。</li><li>支持灵活的路由策略和过滤，适应复杂的互联网环境。</li></ul></li></ul></li></ul><hr><p><strong>总结</strong>：  </p><ul><li>IGP（如RIP、OSPF）用于AS内部路由，侧重于快速收敛和最优路径选择。</li><li>EGP（主要是BGP）用于AS之间路由，侧重于策略控制和全网可达性。</li><li>路由表的生成方式和协议机制决定了网络的规模、收敛速度和灵活性。</li></ul><hr><h3 id="可靠传输协议的设计要点"><a href="#可靠传输协议的设计要点" class="headerlink" title="可靠传输协议的设计要点"></a>可靠传输协议的设计要点</h3><p>可靠传输协议（如TCP）需要保证数据在不可靠信道上传输时的正确性、完整性和顺序。主要设计要点如下：</p><ol><li><p><strong>数据包损坏检测：校验和、ACK、NAK信号</strong></p><ul><li><strong>校验和</strong>：每个数据包都带有校验和，接收方收到后进行校验，发现错误则丢弃。</li><li><strong>ACK（确认）信号</strong>：接收方收到正确的数据包后，发送ACK确认给发送方。</li><li><strong>NAK（否认）信号</strong>：接收方检测到数据包损坏时，发送NAK，通知发送方重传。</li></ul></li><li><p><strong>数据包丢失检测：超时计时器</strong></p><ul><li>发送方在发送数据包后启动超时计时器，若在规定时间内未收到ACK，则认为数据包丢失，自动重传。</li></ul></li><li><p><strong>按序交付、副本检测：序列号机制</strong></p><ul><li>每个数据包分配唯一的<strong>序列号</strong>，接收方根据序列号判断数据包顺序，保证按序交付。</li><li>序列号还能区分新旧数据，防止重复包被误收。</li><li><strong>要求序列号空间足够大</strong>，以避免序列号回绕导致的混淆。</li></ul></li><li><p><strong>传输效率：流水线协议</strong></p><ul><li>为提高效率，采用流水线协议（如滑动窗口协议），允许发送方在未收到ACK前连续发送多个数据包，提高信道利用率。</li></ul></li></ol><hr><p><strong>总结</strong>：<br>可靠传输协议通过校验和、ACK&#x2F;NAK、超时重传、序列号和流水线机制，确保数据可靠、有序、高效地传输到接收方。</p><hr><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制用于防止发送方发送过快导致接收方缓存溢出，保证端到端通信的可靠性和高效性。主要机制包括：</p><ol><li><p><strong>滑动窗口机制的设计</strong></p><ul><li>滑动窗口是一种允许发送方在未收到ACK前可以连续发送多个数据包的机制。</li><li>发送窗口和接收窗口分别控制发送方和接收方的缓存和数据流动。</li><li>窗口的“滑动”表示随着ACK的到来，窗口范围向前移动，允许发送新的数据。</li></ul></li><li><p><strong>信用量窗口（Credit Window）</strong></p><ul><li>信用量窗口是接收方根据自身缓冲区剩余空间，动态告知发送方还能发送多少数据。</li><li>发送方根据接收方通告的窗口大小调整自己的发送速率，防止接收方溢出。</li></ul></li><li><p><strong>TCP复合的窗口管理方式</strong></p><ul><li>TCP流量控制采用滑动窗口和信用量窗口的结合。</li><li>发送方维护发送窗口，接收方通过ACK报文中的窗口字段（rwnd）通告剩余缓冲区大小。</li><li>发送方实际可发送的数据量受限于发送窗口、接收窗口和拥塞窗口三者的最小值。</li></ul></li></ol><hr><h3 id="连接维护"><a href="#连接维护" class="headerlink" title="连接维护"></a>连接维护</h3><p>TCP是面向连接的协议，连接的建立和终止都需要严格的握手过程，确保双方状态同步。</p><ol><li><p><strong>连接建立：三次握手</strong></p><ul><li>第一次：客户端发送SYN报文，发起连接请求。</li><li>第二次：服务器收到后，回复SYN+ACK报文，表示同意连接。</li><li>第三次：客户端收到SYN+ACK后，发送ACK报文，连接建立完成。</li><li>三次握手的必要性：防止历史失效连接请求影响当前连接，确保双方都具备发送和接收能力。</li></ul></li><li><p><strong>连接终止：四次挥手</strong></p><ul><li>第一次：主动关闭方发送FIN报文，表示无数据可发。</li><li>第二次：被动关闭方收到FIN后，回复ACK，表示收到终止请求。</li><li>第三次：被动关闭方处理完剩余数据后，发送FIN报文，表示同意关闭。</li><li>第四次：主动关闭方收到FIN后，回复ACK，连接彻底关闭。</li><li>四次挥手保证双方数据都能完整传输，避免数据丢失。</li></ul></li></ol><hr><h3 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a>拥塞控制算法</h3><p>拥塞控制用于防止网络因过载而性能下降，TCP通过多种算法动态调整发送速率，主要内容如下：</p><ol><li><p><strong>时延RTT估计算法</strong></p><ul><li>RTT（Round Trip Time，往返时延）用于估算数据包从发送到收到ACK的时间。</li><li>TCP根据历史RTT测量值，采用加权平均等方法动态估算当前RTT，为超时重传和拥塞控制提供依据。</li></ul></li><li><p><strong>RTO计时器管理算法</strong></p><ul><li>RTO（Retransmission Timeout，重传超时时间）是TCP判断数据包丢失并触发重传的超时时间。</li><li>RTO根据RTT的估算值和波动性动态调整，防止过早或过晚重传。</li></ul></li><li><p><strong>Jacobson’s Reno算法（TCP Reno）</strong></p><ul><li>经典的TCP拥塞控制算法，包含以下机制：<ul><li><strong>慢启动（Slow Start）</strong>：初始拥塞窗口（cwnd）较小，每收到一个ACK，cwnd指数增长，快速探测可用带宽。</li><li><strong>拥塞避免（AIMD）</strong>：窗口增长采用加性增大&#x2F;乘性减小（AIMD, Additive Increase Multiplicative Decrease）算法。正常时线性增长，发生丢包时窗口减半。</li><li><strong>快重传（Fast Retransmit）</strong>：收到3个重复ACK时，立即重传丢失的数据包，无需等待超时。</li><li><strong>快恢复（Fast Recovery）</strong>：丢包后窗口减半，不回到慢启动，维持较高的吞吐量。</li></ul></li></ul></li></ol><hr><p><strong>总结</strong>：<br>TCP通过RTT估计、RTO管理和Reno算法（慢启动、AIMD、快重传、快恢复）等机制，实现了高效、动态的拥塞控制，保证网络稳定和公平利用。</p><h3 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3><p><code>&lt;protocol&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?query_string</code><br>这个URL格式各部分的含义如下：</p><ul><li><code>&lt;protocol&gt;</code>：协议类型，如 http、https、ftp 等，指定访问资源所用的协议。</li><li><code>&lt;host&gt;</code>：主机名或IP地址，表示服务器的地址。</li><li><code>&lt;port&gt;</code>：端口号，指定服务器上用于该协议的端口（如http默认80，https默认443），可省略则用默认端口。</li><li><code>&lt;path&gt;</code>：资源路径，表示服务器上具体的文件或资源位置。</li><li><code>?query_string</code>：查询字符串，通常用于传递参数给服务器，格式为 key1&#x3D;value1&amp;key2&#x3D;value2。</li></ul><p><strong>举例说明：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.example.com:8080/index.html?name=alice&amp;id=123</span><br></pre></td></tr></table></figure><ul><li><code>https</code>：协议</li><li><code>www.example.com</code>：主机</li><li><code>8080</code>：端口</li><li><code>/index.html</code>：路径</li><li><code>?name=alice&amp;id=123</code>：查询参数</li></ul><h3 id="http无状态的优缺点"><a href="#http无状态的优缺点" class="headerlink" title="http无状态的优缺点"></a>http无状态的优缺点</h3><p>这张图讲的是<strong>HTTP是无状态协议（stateless）</strong>，即每个请求-响应都是独立的，服务器不需要保存客户端的状态。</p><ul><li><p><strong>优点（Good）：</strong></p><ul><li>提高服务器端的可扩展性（scalability）。</li><li>故障处理更简单。</li><li>能处理更高的请求速率。</li><li>请求顺序无关紧要。</li></ul></li><li><p><strong>缺点（Bad）：</strong></p><ul><li>某些应用需要持久状态（persistent state），比如需要唯一标识用户或保存临时信息。</li><li>典型场景：购物车、用户资料、使用跟踪等。</li></ul></li></ul><p><strong>总结：</strong><br>HTTP无状态带来扩展性和简化管理，但对于需要记住用户状态的应用（如购物车），就需要额外机制（如cookie）来实现状态保持。</p><h3 id="cookies的作用"><a href="#cookies的作用" class="headerlink" title="cookies的作用"></a>cookies的作用</h3><p>Cookies 主要用来解决<strong>HTTP协议无状态</strong>的问题。</p><p>HTTP协议本身是无状态的，即服务器无法区分同一个用户的多次请求。Cookies 通过在客户端（浏览器）保存少量数据，并在每次请求时自动携带这些数据，实现了“会话跟踪”和“用户识别”。</p><p><strong>主要用途：</strong></p><ul><li>记录用户登录状态（如免登录、购物车等）</li><li>识别和跟踪用户（如个性化设置、广告推荐）</li><li>实现会话管理（如区分不同用户的访问）</li></ul><p><strong>总结：</strong><br>Cookies 让服务器能够识别同一个用户的多次访问，实现用户状态的保持和个性化服务。<br><img src="/../photos/posts/csnet/image-8.png" alt="alt text"></p><hr><h3 id="DNS系统的三大核心知识点"><a href="#DNS系统的三大核心知识点" class="headerlink" title="DNS系统的三大核心知识点"></a>DNS系统的三大核心知识点</h3><ol><li><p><strong>层次域名空间</strong></p><ul><li>DNS采用树状的层次结构进行域名管理，从根域（.）开始，向下分为顶级域（如.com、.cn）、二级域（如example.com）、三级域（如<a href="http://www.example.com)等./">www.example.com）等。</a></li><li>每一级域名由点号分隔，层次结构便于分布式管理和扩展。</li><li>域名空间的分层设计，使得全球范围内的域名可以高效、唯一地分配和解析。</li></ul></li><li><p><strong>域名服务器</strong></p><ul><li>DNS系统由多种类型的服务器组成，包括：<ul><li><strong>根域名服务器（Root DNS Server）</strong>：位于域名空间的最顶层，负责管理顶级域的指向。</li><li><strong>顶级域名服务器（TLD DNS Server）</strong>：管理如.com、.cn等顶级域下的域名。</li><li><strong>权威域名服务器（Authoritative DNS Server）</strong>：负责某一具体域名的最终解析结果，存储该域名的真实IP地址。</li><li><strong>本地域名服务器（Local&#x2F;Resolver DNS Server）</strong>：通常由ISP或企业提供，负责接收用户的DNS查询请求，并递归或迭代地向其他DNS服务器查询结果。</li></ul></li><li>各类服务器协作，实现分布式、高可用的域名解析服务。</li></ul></li><li><p><strong>域名解析过程</strong></p><ul><li>域名解析是将用户输入的域名（如<a href="http://www.example.com）转换为对应IP地址的过程，主要包括以下步骤：">www.example.com）转换为对应IP地址的过程，主要包括以下步骤：</a><ol><li>用户主机向本地域名服务器发起DNS查询请求。</li><li>本地域名服务器若缓存中无结果，则递归或迭代查询根服务器、顶级域服务器、权威服务器。</li><li>查询过程可能涉及多级跳转，最终获得目标域名的IP地址。</li><li>本地域名服务器将结果返回给用户主机，并缓存结果以加速后续查询。</li></ol></li><li>域名解析过程支持递归查询（由本地服务器全权负责）和迭代查询（每级服务器只告诉下一级的地址）。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li>DNS系统通过层次化的命名空间、分布式的服务器体系和高效的解析流程，实现了域名到IP地址的高效映射，是互联网正常访问的基础。</li></ul><h3 id="ECN-🆚-TCP"><a href="#ECN-🆚-TCP" class="headerlink" title="ECN 🆚 TCP"></a>ECN 🆚 TCP</h3><p><strong>ECN（Explicit Congestion Notification，显式拥塞通知）</strong><br>是一种网络拥塞控制机制，允许路由器在发生拥塞时，不丢弃数据包，而是在IP头部设置ECN标志，通知接收方发生了拥塞。接收方收到后，反馈给发送方，发送方据此降低发送速率。</p><p><strong>TCP拥塞控制与ECN的优缺点比较：</strong></p><ul><li><p><strong>传统TCP拥塞控制（如丢包检测）</strong></p><ul><li><strong>优点</strong>：实现简单，无需网络设备支持，兼容性好。</li><li><strong>缺点</strong>：只能通过丢包感知拥塞，导致不必要的数据包丢失和重传，增加延迟和网络负载。</li></ul></li><li><p><strong>ECN</strong></p><ul><li><strong>优点</strong>：无需丢包即可感知拥塞，减少重传和延迟，提高网络性能和吞吐量。</li><li><strong>缺点</strong>：需要端到端（主机和路由器）都支持ECN，部署成本较高，部分老旧设备不兼容。</li></ul></li></ul><p><strong>总结：</strong><br>ECN通过显式标记通知拥塞，能更高效、低损地进行拥塞控制，但需要全网支持；传统TCP通过丢包感知拥塞，简单但效率低。</p><hr><p><em>感谢阅读！如果这篇文章对你有帮助，欢迎点赞和分享。</em></p>]]></content>
    
    
    <summary type="html">期末周复习自用，站建好了上传一下</summary>
    
    
    
    <category term="学习记录" scheme="http://summer-flower.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="学习" scheme="http://summer-flower.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>音乐和视频播放测试</title>
    <link href="http://summer-flower.com/2025/08/09/%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95/"/>
    <id>http://summer-flower.com/2025/08/09/%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95/</id>
    <published>2025-08-09T07:00:00.000Z</published>
    <updated>2025-08-09T01:35:19.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🎵-音乐播放功能"><a href="#🎵-音乐播放功能" class="headerlink" title="🎵 音乐播放功能"></a>🎵 音乐播放功能</h1><h2 id="方式一：HTML5-Audio-标签"><a href="#方式一：HTML5-Audio-标签" class="headerlink" title="方式一：HTML5 Audio 标签"></a>方式一：HTML5 Audio 标签</h2><h3 id="直接嵌入音频文件"><a href="#直接嵌入音频文件" class="headerlink" title="直接嵌入音频文件"></a>直接嵌入音频文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/music/song.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/music/song.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  您的浏览器不支持音频播放。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><audio controls>  <source src="/music/song.mp3" type="audio/mpeg">  <source src="/music/song.ogg" type="audio/ogg">  您的浏览器不支持音频播放。</audio><h2 id="方式二：嵌入网易云音乐"><a href="#方式二：嵌入网易云音乐" class="headerlink" title="方式二：嵌入网易云音乐"></a>方式二：嵌入网易云音乐</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;330&quot;</span> <span class="attr">height</span>=<span class="string">&quot;86&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28391863&amp;auto=0&amp;height=66&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86"         src="//music.163.com/outchain/player?type=2&id=28391863&auto=0&height=66"></iframe><hr><h1 id="🎬-视频播放功能"><a href="#🎬-视频播放功能" class="headerlink" title="🎬 视频播放功能"></a>🎬 视频播放功能</h1><h2 id="方式一：HTML5-Video-标签"><a href="#方式一：HTML5-Video-标签" class="headerlink" title="方式一：HTML5 Video 标签"></a>方式一：HTML5 Video 标签</h2><h3 id="本地视频文件"><a href="#本地视频文件" class="headerlink" title="本地视频文件"></a>本地视频文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/videos/demo.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  您的浏览器不支持视频播放。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><video width="100%" controls>  <source src="/videos/demo.mp4" type="video/mp4">  您的浏览器不支持视频播放。</video><h2 id="方式二：嵌入-YouTube-视频"><a href="#方式二：嵌入-YouTube-视频" class="headerlink" title="方式二：嵌入 YouTube 视频"></a>方式二：嵌入 YouTube 视频</h2><h3 id="iframe-嵌入"><a href="#iframe-嵌入" class="headerlink" title="iframe 嵌入"></a>iframe 嵌入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/VIDEO_ID&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe width="100%" height="400"         src="https://www.youtube.com/embed/dQw4w9WgXcQ"         frameborder="0"         allowfullscreen></iframe><h2 id="方式三：嵌入-Bilibili-视频"><a href="#方式三：嵌入-Bilibili-视频" class="headerlink" title="方式三：嵌入 Bilibili 视频"></a>方式三：嵌入 Bilibili 视频</h2><h3 id="B站视频嵌入"><a href="#B站视频嵌入" class="headerlink" title="B站视频嵌入"></a>B站视频嵌入</h3><h4 id="静态嵌入示例"><a href="#静态嵌入示例" class="headerlink" title="静态嵌入示例"></a>静态嵌入示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?bvid=BV1xx411c7mD&amp;page=1&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?bvid=BV1om4y1Y771&page=1"         scrolling="no"         border="0"         frameborder="no"         framespacing="0"         allowfullscreen="true"         width="100%"         height="400"></iframe><h4 id="🎮-交互式B站视频播放器"><a href="#🎮-交互式B站视频播放器" class="headerlink" title="🎮 交互式B站视频播放器"></a>🎮 交互式B站视频播放器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bilibili-player-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bvid-input&quot;</span>&gt;</span>输入B站视频BV号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">id</span>=<span class="string">&quot;bvid-input&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">placeholder</span>=<span class="string">&quot;例如：BV1om4y1Y771&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">&quot;BV1om4y1Y771&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadBilibiliVideo()&quot;</span>&gt;</span>🎬 播放视频<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearVideo()&quot;</span>&gt;</span>🗑️ 清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preset-videos&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>快速选择：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadPresetVideo(&#x27;BV1om4y1Y771&#x27;)&quot;</span>&gt;</span>示例视频1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadPresetVideo(&#x27;BV1xx411c7mD&#x27;)&quot;</span>&gt;</span>示例视频2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadPresetVideo(&#x27;BV1uv411q7Mv&#x27;)&quot;</span>&gt;</span>示例视频3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;bilibili-iframe&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?bvid=BV1om4y1Y771&amp;page=1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;video-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前播放：BV1om4y1Y771<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadBilibiliVideo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> bvidInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bvid-input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bilibili-iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> videoInfo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video-info&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> bvid = bvidInput.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 验证BV号格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!bvid) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;请输入BV号！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 自动添加BV前缀（如果用户没有输入）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!bvid.<span class="title function_">startsWith</span>(<span class="string">&#x27;BV&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">    bvid = <span class="string">&#x27;BV&#x27;</span> + bvid;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 验证BV号格式（简单验证）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> bvidPattern = <span class="regexp">/^BV[a-zA-Z0-9]&#123;10&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!bvidPattern.<span class="title function_">test</span>(bvid)) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;BV号格式不正确！请检查输入（例如：BV1om4y1Y771）&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 更新iframe src</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> newSrc = <span class="string">`//player.bilibili.com/player.html?bvid=<span class="subst">$&#123;bvid&#125;</span>&amp;page=1`</span>;</span></span><br><span class="line"><span class="language-javascript">  iframe.<span class="property">src</span> = newSrc;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 更新视频信息</span></span></span><br><span class="line"><span class="language-javascript">  videoInfo.<span class="property">innerHTML</span> = <span class="string">`&lt;p&gt;当前播放：<span class="subst">$&#123;bvid&#125;</span> &lt;span class=&quot;loading&quot;&gt;加载中...&lt;/span&gt;&lt;/p&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3秒后移除加载提示</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    videoInfo.<span class="property">innerHTML</span> = <span class="string">`&lt;p&gt;当前播放：<span class="subst">$&#123;bvid&#125;</span> &lt;span class=&quot;success&quot;&gt;✅ 加载完成&lt;/span&gt;&lt;/p&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadPresetVideo</span>(<span class="params">bvid</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> bvidInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bvid-input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  bvidInput.<span class="property">value</span> = bvid;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">loadBilibiliVideo</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clearVideo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> bvidInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bvid-input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bilibili-iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> videoInfo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video-info&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  bvidInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  iframe.<span class="property">src</span> = <span class="string">&#x27;about:blank&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  videoInfo.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;请输入BV号来播放视频&lt;/p&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 回车键快捷播放</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bvid-input&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">loadBilibiliVideo</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bilibili-player-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00A1D6</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#f8f9ff</span> <span class="number">0%</span>, <span class="number">#e8f4ff</span> <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">161</span>, <span class="number">214</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-section</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-section</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: border-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="number">#00A1D6</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">161</span>, <span class="number">214</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#00A1D6</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#0088BB</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">button</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#FF6B6B</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-group</span> <span class="selector-tag">button</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#FF5252</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.preset-videos</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.preset-videos</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.preset-videos</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.preset-videos</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#00A1D6</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="number">#00A1D6</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-player</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-info</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-info</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.loading</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#FF9800</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: pulse <span class="number">1.5s</span> infinite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.success</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#4CAF50</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> pulse &#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span>, <span class="number">50%</span>, <span class="number">100%</span> &#123; <span class="attribute">opacity</span>: <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">25%</span>, <span class="number">75%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0.5</span>; &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.input-group</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.input-group</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.preset-videos</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: flex-start;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="bilibili-player-container">  <div class="input-section">    <label for="bvid-input">输入B站视频BV号：</label>    <div class="input-group">      <input type="text"              id="bvid-input"              placeholder="例如：BV1om4y1Y771"              value="BV1om4y1Y771">      <button onclick="loadBilibiliVideo()">🎬 播放视频</button>      <button onclick="clearVideo()">🗑️ 清空</button>    </div>    <div class="preset-videos">      <span>快速选择：</span>      <button onclick="loadPresetVideo('BV1om4y1Y771')">示例视频1</button>      <button onclick="loadPresetVideo('BV1xx411c7mD')">示例视频2</button>      <button onclick="loadPresetVideo('BV1uv411q7Mv')">示例视频3</button>    </div>  </div>    <div class="video-player">    <iframe id="bilibili-iframe"             src="//player.bilibili.com/player.html?bvid=BV1om4y1Y771&page=1"             scrolling="no"             border="0"             frameborder="no"             framespacing="0"             allowfullscreen="true"             width="100%"             height="400">    </iframe>  </div>    <div class="video-info" id="video-info">    <p>当前播放：BV1om4y1Y771</p>  </div></div><script>function loadBilibiliVideo() {  const bvidInput = document.getElementById('bvid-input');  const iframe = document.getElementById('bilibili-iframe');  const videoInfo = document.getElementById('video-info');    let bvid = bvidInput.value.trim();    // 验证BV号格式  if (!bvid) {    alert('请输入BV号！');    return;  }    // 自动添加BV前缀（如果用户没有输入）  if (!bvid.startsWith('BV')) {    bvid = 'BV' + bvid;  }    // 验证BV号格式（简单验证）  const bvidPattern = /^BV[a-zA-Z0-9]{10}$/;  if (!bvidPattern.test(bvid)) {    alert('BV号格式不正确！请检查输入（例如：BV1om4y1Y771）');    return;  }    // 更新iframe src  const newSrc = `//player.bilibili.com/player.html?bvid=${bvid}&page=1`;  iframe.src = newSrc;    // 更新视频信息  videoInfo.innerHTML = `<p>当前播放：${bvid} <span class="loading">加载中...</span></p>`;    // 3秒后移除加载提示  setTimeout(() => {    videoInfo.innerHTML = `<p>当前播放：${bvid} <span class="success">✅ 加载完成</span></p>`;  }, 3000);}function loadPresetVideo(bvid) {  const bvidInput = document.getElementById('bvid-input');  bvidInput.value = bvid;  loadBilibiliVideo();}function clearVideo() {  const bvidInput = document.getElementById('bvid-input');  const iframe = document.getElementById('bilibili-iframe');  const videoInfo = document.getElementById('video-info');    bvidInput.value = '';  iframe.src = 'about:blank';  videoInfo.innerHTML = '<p>请输入BV号来播放视频</p>';}// 回车键快捷播放document.getElementById('bvid-input').addEventListener('keypress', function(e) {  if (e.key === 'Enter') {    loadBilibiliVideo();  }});</script><style>.bilibili-player-container {  max-width: 800px;  margin: 20px auto;  padding: 20px;  border: 2px solid #00A1D6;  border-radius: 12px;  background: linear-gradient(135deg, #f8f9ff 0%, #e8f4ff 100%);  box-shadow: 0 4px 12px rgba(0, 161, 214, 0.1);}.input-section {  margin-bottom: 20px;}.input-section label {  display: block;  margin-bottom: 8px;  font-weight: bold;  color: #333;}.input-group {  display: flex;  gap: 10px;  margin-bottom: 15px;  flex-wrap: wrap;}.input-group input {  flex: 1;  min-width: 200px;  padding: 10px 15px;  border: 2px solid #ddd;  border-radius: 6px;  font-size: 14px;  transition: border-color 0.3s;}.input-group input:focus {  outline: none;  border-color: #00A1D6;  box-shadow: 0 0 0 3px rgba(0, 161, 214, 0.1);}.input-group button {  padding: 10px 20px;  background: #00A1D6;  color: white;  border: none;  border-radius: 6px;  cursor: pointer;  font-size: 14px;  font-weight: bold;  transition: all 0.3s;  white-space: nowrap;}.input-group button:hover {  background: #0088BB;  transform: translateY(-1px);}.input-group button:last-child {  background: #FF6B6B;}.input-group button:last-child:hover {  background: #FF5252;}.preset-videos {  display: flex;  align-items: center;  gap: 10px;  flex-wrap: wrap;}.preset-videos span {  color: #666;  font-size: 14px;}.preset-videos button {  padding: 6px 12px;  background: #f0f0f0;  color: #333;  border: 1px solid #ddd;  border-radius: 4px;  cursor: pointer;  font-size: 12px;  transition: all 0.3s;}.preset-videos button:hover {  background: #00A1D6;  color: white;  border-color: #00A1D6;}.video-player {  margin-bottom: 15px;  border-radius: 8px;  overflow: hidden;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);}.video-info {  text-align: center;  padding: 10px;  background: rgba(255, 255, 255, 0.8);  border-radius: 6px;}.video-info p {  margin: 0;  color: #333;}.loading {  color: #FF9800;  animation: pulse 1.5s infinite;}.success {  color: #4CAF50;}@keyframes pulse {  0%, 50%, 100% { opacity: 1; }  25%, 75% { opacity: 0.5; }}@media (max-width: 600px) {  .input-group {    flex-direction: column;  }    .input-group input {    min-width: auto;  }    .preset-videos {    flex-direction: column;    align-items: flex-start;  }}</style><hr><h1 id="🎨-高级自定义"><a href="#🎨-高级自定义" class="headerlink" title="🎨 高级自定义"></a>🎨 高级自定义</h1><h2 id="JavaScript-自定义播放器"><a href="#JavaScript-自定义播放器" class="headerlink" title="JavaScript 自定义播放器"></a>JavaScript 自定义播放器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;custom-player&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;myVideo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/videos/demo.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;playPause()&quot;</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;makeBig()&quot;</span>&gt;</span>放大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;makeSmall()&quot;</span>&gt;</span>缩小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;makeNormal()&quot;</span>&gt;</span>正常<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> myVideo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myVideo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">playPause</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (myVideo.<span class="property">paused</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    myVideo.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    myVideo.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">makeBig</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  myVideo.<span class="property">width</span> = <span class="number">800</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">makeSmall</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  myVideo.<span class="property">width</span> = <span class="number">320</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">makeNormal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  myVideo.<span class="property">width</span> = <span class="number">560</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#custom-player</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.controls</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.controls</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#42A5F5</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.controls</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#1976D2</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式视频容器"><a href="#响应式视频容器" class="headerlink" title="响应式视频容器"></a>响应式视频容器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/dQw4w9WgXcQ&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding-bottom</span>: <span class="number">56.25%</span>; <span class="comment">/* 16:9 */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-container</span> <span class="selector-tag">iframe</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">测试博客中的音乐和视频播放功能</summary>
    
    
    
    <category term="技术分享" scheme="http://summer-flower.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="多媒体" scheme="http://summer-flower.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
    <category term="测试" scheme="http://summer-flower.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>归去来</title>
    <link href="http://summer-flower.com/2025/08/09/%E5%BD%92%E5%8E%BB%E6%9D%A5/"/>
    <id>http://summer-flower.com/2025/08/09/%E5%BD%92%E5%8E%BB%E6%9D%A5/</id>
    <published>2025-08-09T02:15:09.000Z</published>
    <updated>2025-08-09T02:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📝-归去来"><a href="#📝-归去来" class="headerlink" title="📝 归去来"></a>📝 归去来</h1><blockquote><p>回看一年前的随笔，情更切。pyq发文，如今补上，仅供纪念。</p></blockquote><p>还是感觉以后回村里隐居也挺好。</p><p>​这里只是晋东南群山中的一个小村落，我知道上一次回来是去年暑假，却不知道下一次要到什么时候了。一条马路将村子分成两片，也连接此处与县城，其上来往的公交车司机也成了姥姥姥爷的老熟人。曾几何时公交车并不像现在一样一元通全线，但在这数不清多少年的时间里唯一改变的也只是票价，始终是两位老人入城的主要交通工具。这条公交线很慢，小时候印象里的从村到城1小时至今不变。</p><p>​往前回倒十几年，回到村里还没修水泥路，回到一些老人离开之前，印象比较深刻的是那时日常用水还是靠担的。记忆里的三处水井现在只能找到两处，一处后山，一处水库旁，现在自然是荒废了。只有我妈体验过担水，还没等我长大就舍弃了这种原始方式，不过担子倒还留存着，也是某种历史的见证了。<br>​<br>​前几天和姥爷下镇里理发，临返程时正巧下雨，我们俩冒着雨骑摩托车在山路上冲刺，感觉姥爷像施了避雨咒一样，结合我下雨时骑摩托被遮挡视线的经历，简直不可思议。返程之前路人还调侃老人带年轻人，只是这位朋友不明其中缘由，这辆摩托车比我年龄还大，借我姥姥的话，这玩意只有我姥爷驾驭得了。多少年过去了，自从地开始荒废之后拖拉机就不怎么开了，但摩托车仍是姥爷的得力干将，只是不知道他还想骑多少年，又能骑多少年。<br>​<br>​从我有记忆开始两位老人就主要靠种地和养蚕为主要收入，以至于我来到晋北看到那里的农家人甚至没见过蚕时感到惊讶。种地自然没什么好说的，主要就是小麦、玉米、土豆、高粱之类的经济作物，除去自己留一些磨成面和自给，其余便卖作收入。而房子周围两位老人也开垦了数小块土地，种一些萝卜、西红柿、豆角之类的果蔬，省去了天天去镇里买菜了。甚至后来表妹想吃草莓的时候，姥爷也真能在房子背后那片难以称得上是肥沃的土地上给她变出草莓，真的很神奇吧。除了种的田，他们还会打核桃、摘柿子和山楂，甚至会摘桑椹。不知道现在还有多少人知道核桃最外层是青皮的，去皮之后洗净才是棕色的壳。姥姥曾多次念叨村里人都觉得核桃不值钱，而城里人却愿意花较贵的钱去超市称，她表示相当不理解。而摘下的柿子除去现吃的，为了方便保存往往会做成柿饼，至今仍是；山楂则去核做成红果罐头，估计是山楂树虽着地一起荒了，我也已经记不得上一次吃红果罐头是什么时候了。<br>​<br>​不论病逝还是进城，在一些老人没离开前，整个村子都会养蚕。养蚕以季为周期，分春夏秋冬蚕。村里人先统计各家各户的养殖量，以张为单位，那是因为一开始拿回来的蚕籽在粘板上。从一个个小黑点长成白蚕再到结茧，喂桑叶从切成细碎到整叶铺盖，它们的住处也从粘板到数个木篓子，直到喷上药，将它们移到网格栅上，静待结茧。随着不少老人的离开，养蚕人越来越少，在前些年姥姥姥爷也因身体原因不在养蚕，网格栅也终于收进了牛圈，恐怕再无可用之日。<br>​<br>​如今，除了种少许地，姥爷还常常骑车上山采摘连翘（P3）。实际上近些年十里八乡的老年男女都在采这种药来卖钱，以6到9月最为频繁，但价格偏低，几元到十几元一斤上下浮动；冬天的干连翘价高，往往在五六十元一斤，但却难寻。采药人早八晚六地摘，一天下来好的话人均十几斤，不好则只有六七斤。姥姥也常会开玩笑说，今天出去吃顿饭又把姥爷一天的采药钱吃没了，我笑罢只觉得苦涩，但也知道老人是闲不住的。采药人采回药后也要观察行情，但又因为连翘不经放所以也要尽快出手，和各地收药人的搏弈始终存在，但不幸的是今年夏天我姥爷总是在涨价前出手，只能在吃饭时骂几句收药人罢了。今天的采摘量为九斤，行情为十二元每斤，在此记录一下。<br>​<br>​我还是会吐槽两位老人生活的地方：房子都是上个世纪的产物，到冬天特别冷；一把铁勺子从姥姥的母亲传到现在；在村里夏天要时刻盯防蚊子，尤其是上厕所qwq；种几块地还要提防野猪，也总会被拱得粮食减产；现在的日常用水每隔五天统一供应，日常囤水；村子里的人越来越少，现在凑桌麻将都难；不时还有蝎子和蛇出没（前几天我就被蝎子咬了(⁄ ⁄•⁄ω⁄•⁄ ⁄)）。但他们俩丝毫不在意。昨天又谈到我想让他们俩彻底离开这里，常住县城，给小姨做饭带娃，但姥姥仍是不在意。我说你们俩总有干不动的时候，早点下城里享受不好呗，姥姥执意说春夏之际凉快。我又说城里有空调不比村里凉快？她又提到费电了。对，这两位就是这么节俭，省了一辈子，处处细打算，却在两位女儿买房时拿出好几万，每次我回来都去超市割肉买菜，在离开的时候以前是塞钱，现在是转账，也只会告诫我好好学习……<br>​<br>​千反田用来形容她家乡的话也正是这个村子的现状，”这里是我的故乡，只有水和土地，人们也在渐渐衰老，失去活力”。我并不觉得这里是最美的地方，也并不觉得这里充满可能性，但是，我愿意讲述这里过往的点滴。可以预见以姥姥姥爷为代表的一代老人也离开这里后，在未来的三十年间这个村子终将荒无人烟。我不知道其他户人家的后代怎么看，我想我还会回到这里，去寻访过往踪迹。<br>​<br>​写在即将启程却不知何时归来之际。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../photos/posts/%E5%BD%92%E5%8E%BB%E6%9D%A5/1.jpg"><br><img src="/../photos/posts/%E5%BD%92%E5%8E%BB%E6%9D%A5/2.jpg"><br><img src="/../photos/posts/%E5%BD%92%E5%8E%BB%E6%9D%A5/3.jpg"><br><img src="/../photos/posts/%E5%BD%92%E5%8E%BB%E6%9D%A5/4.jpg"></h2><p><em>感谢阅读！如果这篇文章对你有帮助，欢迎点赞和分享。</em></p>]]></content>
    
    
    <summary type="html">回看一年前的随笔，情更切。pyq发文，如今补上，仅供纪念。</summary>
    
    
    
    <category term="生活随想" scheme="http://summer-flower.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="乡愁" scheme="http://summer-flower.com/tags/%E4%B9%A1%E6%84%81/"/>
    
  </entry>
  
  <entry>
    <title>用rust复刻git</title>
    <link href="http://summer-flower.com/2025/08/07/%E7%94%A8rust%E5%A4%8D%E5%88%BBgit/"/>
    <id>http://summer-flower.com/2025/08/07/%E7%94%A8rust%E5%A4%8D%E5%88%BBgit/</id>
    <published>2025-08-07T02:56:14.000Z</published>
    <updated>2025-08-07T02:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📝-用rust复刻git"><a href="#📝-用rust复刻git" class="headerlink" title="📝 用rust复刻git"></a>📝 用rust复刻git</h1><blockquote><p>本文将介绍用rust复刻git的历程，也纪念我第一次合作开发的经历</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大二下选课的时候发现有一门《rust程序设计》的课程，之前在大一上c++的时候最早接触过rust这个名字，但是一直没怎么了解过，于是抱着好奇心和同伴组队选了这门课，这也是这门项目的由来。</p><p>整个项目从4月份开始，到5月底向猪脚答辩时完成了1.0版本（<code>https://github.com/231220075/git.git</code>），包含了除远程分支外的基本功能。后续在暑假期间补上了远程分支控制的部分，即1.1版本（<code>https://github.com/231220075/rit.git</code>），命名为rit-&gt;rust-git。</p><h2 id="初步开发"><a href="#初步开发" class="headerlink" title="初步开发"></a>初步开发</h2><ul><li>首先需要了解git的工作原理，这一部分参考<code>https://git-scm.com/book/en/v</code>，不再赘述。</li><li>每一条git命令执行过程比较固定，解析好命令行参数后执行对应的处理函数即可。解析命令行参数使用clap（易于使用，能处理复杂参数解析，且自动生成help页）。clap解析命令行参数并返回具体类型的 subcommand，并调用其run函数。这里为了后续子命令的实现，我们把.git所在目录路径作为参数传给run，并为-C做了处理。</li><li>在做subcommand之前需要先实现一些底层命令，我们做了cat-file、hash-object、write&#x2F;read-tree、update-index、commit-tree、update-ref&amp;&amp;symboloc-ref等等（后两个比较简单，后续直接简化到utils&#x2F;refs作为分支管理工具了），这一部分逐步理清并构建了git的工作环境，如index区、.git文件内容管理、refs管理等等，以及git中 blob、tree、commit这几种object的结构，这些就是git的底层代码，到此为止我们就能完全读懂.git下的所有文件及其功能了。</li><li>理解底层代码后剩下的部分就比较简单了，subcommand就是在底层命令的基础上运行的，基本就是组合一下，加上判断处理。比较复杂的可能是checkout和merge，课程对merge要求比较简单，如果有冲突只要显示两个分支哪部分有不同，这部分由另一位成员完成，我不做过多阐述；而checkout主要涉及到切换分支的时间点，workspace、index和ref commit是否一致的问题。我的理解是，如果切换分支前，仅考虑目标文件，index&#x3D;workspace&#x3D;current ref commit，说明不存在未暂存&amp;&amp;未提交的更改，即index和workspace都是clean，这种情况下可以直接切换ref commit,并把目标commit的tree object写入index和更新workspace；否则说明有未暂存||未提交的更改，需要考虑保留这些更改，存在一个“merge”的过程，对于存在冲突的文件以index&#x2F;workspace为准。</li><li>这个过程中每一步开发新功能前需要先把频繁使用的method构建一个util，方便后续使用，我们主要是用到很多关于三类object构建和读写、index的读写、文件读写以及压缩、hash和做单元测试的method，构建了相关的utils。谈到unit test，需要感谢我的同伴开发了完整的测试框架，为我们的测试做出来巨大的贡献、巨大的carry，respect！也是rust优秀的单元测试让我这个懒人也愿意开始做测试了，amazing啊qwq。</li></ul><h2 id="debug-踩坑"><a href="#debug-踩坑" class="headerlink" title="debug&amp;&amp;踩坑"></a>debug&amp;&amp;踩坑</h2><ul><li>关于debug，包括两部分。一是客观方面作为课设，猪脚还是做了oj，我们这个项目需要通过测试拿分。猪脚的oj是用脚本做断言测试公开了部分测试和要求，涉及大文件、可执行文件、图片等的测试；另一方面主观上每个subcommand和底层命令我们做了对应的集成测试，主要是交替使用原版git和rust-git检查问题。</li><li>大部分bug在检测的过程中就知道哪里有问题，可以快速解决，但有的是认知问题。比较典型的是，index区暂存文件的结构和tree object的文件结构是不一样的，前者是完整的路径，<img src="/../photos/posts/rust-git/!%5Balt%20text%5D.png" alt="alt text">而后者是递归存储的。<img src="/../photos/posts/rust-git/2025-05-28-20-27-15.png" alt="alt text"></li><li>另外就是配置了GitHub的CI，<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Rust</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件：当代码推送到仓库或创建 Pull Request 时触发</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&#x27;**&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>  <span class="comment"># 使用最新的 Ubuntu 环境</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Step 1: 检出代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 2: 设置 Rust 工具链</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Rust</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/toolchain@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">toolchain:</span> <span class="string">stable</span>  <span class="comment"># 使用稳定的 Rust 工具链</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 3: 运行 cargo test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cargo</span> <span class="string">test</span> <span class="string">--</span> <span class="string">--test-threads=1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 4: 运行 cargo clippy 检查</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Clippy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cargo</span> <span class="string">clippy</span> <span class="string">--</span> <span class="string">-D</span> <span class="string">warnings</span>  <span class="comment"># 将警告视为错误</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># （可选）Step 5: 构建项目</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Project</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cargo</span> <span class="string">build</span> <span class="string">--release</span></span><br></pre></td></tr></table></figure>这样每次提交自动触发测试，虽然每次都要发个邮件提醒有点烦就是了……<br>大概如下<img src="/../photos/posts/rust-git/image.png" alt="😗"></li></ul><h2 id="🤖️-远程分支"><a href="#🤖️-远程分支" class="headerlink" title="🤖️ 远程分支"></a>🤖️ 远程分支</h2><ul><li>进入8月才有时间收拾这个没完成的摊子，想补充的远程分支部分主要是fetch、pull和push三个subcommand，目标是能和GitHub的repo交互更新即可。</li><li>我最终选择用https与GitHub传输，虽然传输大文件不稳定，但是本人对https比较熟悉（ssh现阶段就不太考虑了）。fetch主要是获取远程仓库的分支和对应的commit hash，而首先要设定远程传输的仓库URL，所以先实现remote指令设置分支和URL的映射，保存在.git&#x2F;config文件。fetch同样可以指定参数，选择获取所有远程分支还是特定远程分支，然后创建“.git&#x2F;refs&#x2F;remote&#x2F;分支名”文件，记录其commit hash。</li><li>而pull则是fetch+merge，先获取远程分支，然后将当前分支与目标分支合并。有一个需要注意的点是，在init后remote add&amp;&amp;pull，此时本地分支因为没有提交过，refs下并没有默认的master&#x2F;main文件，因为没有提交过、没有commit hash，此时要做merge会出现问题，既没有本地分支也没有index区，我之前的实现会merge fail。所以我取巧了一下，如果是初始化之后直接pull的这种情况，直接fetch+checkout到远程分支；而push则协商需要传输的对象，并创建pack文件通过https传输。</li><li>需要注意的地方主要有两点：一是pull下来的pack需要解压缩，这个解压缩器的设计需要比较精确，完全理解git的压缩pack的逻辑才能设计足够精确的解压器、才能完全解压出100%的object，否则会丢失部分object产生缺损；二是所有的pack在push上去后都会被GitHub端接收，需要严格遵循格式，我在此过程中有两个问题，tree object的文件组织格式（没错，正是前文提到的）和index&amp;&amp;tree object中表项没按字典序排序。说实话之前在和原版git比对的时候也注意到了这个顺序问题，但当时感觉没什么影响，现在被教训了，只能说一切都有其存在的意义</li></ul><hr><p><em>感谢阅读！如果这篇文章对你有帮助，欢迎点赞和分享。</em></p>]]></content>
    
    
    <summary type="html">本文将介绍用rust复刻git的历程，也纪念我第一次合作开发的经历</summary>
    
    
    
    <category term="学习记录" scheme="http://summer-flower.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="rust" scheme="http://summer-flower.com/tags/rust/"/>
    
    <category term="git" scheme="http://summer-flower.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>我的博客重新开始</title>
    <link href="http://summer-flower.com/2025/08/07/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <id>http://summer-flower.com/2025/08/07/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</id>
    <published>2025-08-07T01:19:50.000Z</published>
    <updated>2025-08-13T07:40:30.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🌟-我的博客重新开始"><a href="#🌟-我的博客重新开始" class="headerlink" title="🌟 我的博客重新开始"></a>🌟 我的博客重新开始</h1><p>大家好！我是 forever，欢迎来到我重新搭建的博客 “Summer Flower”。</p><h2 id="📝-为什么重新开始？"><a href="#📝-为什么重新开始？" class="headerlink" title="📝 为什么重新开始？"></a>📝 为什么重新开始？</h2><p>经过一段时间的思考，我决定重新整理我的博客，主要原因包括：</p><ol><li><strong>更好的技术栈</strong>: 使用 Hexo + Butterfly 主题，提供更好的阅读体验</li><li><strong>规范的内容管理</strong>: 建立更完善的写作和发布流程</li><li><strong>专注的内容方向</strong>: <ul><li>💻 技术学习心得</li><li>📸 摄影作品分享</li><li>🎓 计算机科学学习记录</li><li>🌱 日常生活感悟</li></ul></li></ol><h2 id="🛠️-技术栈介绍"><a href="#🛠️-技术栈介绍" class="headerlink" title="🛠️ 技术栈介绍"></a>🛠️ 技术栈介绍</h2><p>这个博客使用的技术栈：</p><ul><li><strong>静态网站生成器</strong>: Hexo 7.3.0</li><li><strong>主题</strong>: Butterfly 5.3.3</li><li><strong>部署平台</strong>: GitHub Pages</li><li><strong>域名</strong>: 华为云自定义域名</li><li><strong>评论系统</strong>: Gitalk</li><li><strong>统计分析</strong>: Google Analytics + 不蒜子</li></ul><h2 id="🎯-未来计划"><a href="#🎯-未来计划" class="headerlink" title="🎯 未来计划"></a>🎯 未来计划</h2><p>接下来我计划在这里分享：</p><h3 id="技术内容"><a href="#技术内容" class="headerlink" title="技术内容"></a>技术内容</h3><ul><li>Rust 编程学习心得</li><li>Git 深度使用技巧</li><li>前端开发经验</li><li>计算机科学课程笔记</li></ul><h3 id="生活分享"><a href="#生活分享" class="headerlink" title="生活分享"></a>生活分享</h3><ul><li>摄影作品和技巧</li><li>读书心得体会</li><li>旅行见闻</li><li>日常思考</li></ul><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><ul><li>GitHub 开源项目介绍</li><li>个人项目经验分享</li><li>课程作业总结</li></ul><h2 id="💡-写作理念"><a href="#💡-写作理念" class="headerlink" title="💡 写作理念"></a>💡 写作理念</h2><p>我希望这个博客能够：</p><ul><li><strong>记录成长</strong>: 记录学习和生活中的点点滴滴</li><li><strong>分享经验</strong>: 把学到的知识和经验分享给大家</li><li><strong>交流互动</strong>: 通过博客认识更多志同道合的朋友</li><li><strong>持续学习</strong>: 通过写作来深化自己的理解</li></ul><h2 id="🤝-联系方式"><a href="#🤝-联系方式" class="headerlink" title="🤝 联系方式"></a>🤝 联系方式</h2><p>如果你对我的文章有任何想法或建议，欢迎通过以下方式联系我：</p><ul><li>📧 Email: <a href="mailto:&#50;&#x33;&#x31;&#50;&#50;&#x30;&#x30;&#55;&#x35;&#64;&#x73;&#109;&#97;&#105;&#108;&#46;&#110;&#106;&#117;&#x2e;&#101;&#x64;&#117;&#x2e;&#x63;&#110;">231220075@smail.nju.edu.cn</a></li><li>🐙 GitHub: <a href="https://github.com/231220075">@231220075</a></li><li>💬 评论区: 每篇文章下方都可以留言</li></ul><h2 id="🎉-结语"><a href="#🎉-结语" class="headerlink" title="🎉 结语"></a>🎉 结语</h2><p>感谢你阅读到这里！希望我的博客能为你带来一些有价值的内容。</p><p>让我们一起在这个夏日花园里，记录美好，分享成长！🌸</p><hr><p><em>“每一次重新开始，都是向更好的自己迈进一步。”</em></p>]]></content>
    
    
    <summary type="html">重新配置博客环境，开启新的写作之旅</summary>
    
    
    
    <category term="生活随想" scheme="http://summer-flower.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="start" scheme="http://summer-flower.com/tags/start/"/>
    
  </entry>
  
  <entry>
    <title>my first address</title>
    <link href="http://summer-flower.com/2025/02/28/hello-world/"/>
    <id>http://summer-flower.com/2025/02/28/hello-world/</id>
    <published>2025-02-28T11:30:00.000Z</published>
    <updated>2025-02-28T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this-is-my-first-article"><a href="#this-is-my-first-article" class="headerlink" title="this is my first article"></a>this is my first article</h2><p>test文件，梦开始的地方</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;this-is-my-first-article&quot;&gt;&lt;a href=&quot;#this-is-my-first-article&quot; class=&quot;headerlink&quot; title=&quot;this is my first article&quot;&gt;&lt;/a&gt;this is my fir</summary>
      
    
    
    
    
  </entry>
  
</feed>
